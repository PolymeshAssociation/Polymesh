version: 2
jobs:
  lint:
    docker:
      - image: polymathnet/rust:debian-nightly-2022-05-10
    resource_class: small
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Check formatting
          command: ./scripts/rustfmt.sh
  build:
    docker:
      - image: polymathnet/rust:debian-nightly-2022-05-10
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v6-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Setup sccache.
          command: ./scripts/install_sccache.sh
      - run:
          name: Build release
          command: cargo build --release
          no_output_timeout: 1h
      - persist_to_workspace:
          root: ./target/release
          paths:
            - polymesh
      - run:
          name: sccache stats
          command: ./scripts/install_sccache.sh
      - save_cache:
          key: v6-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  benchmark-build:
    docker:
      - image: polymathnet/rust:debian-nightly-2022-05-10
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v3-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Setup sccache.
          command: ./scripts/install_sccache.sh
      - run:
          name: Build binary with runtime-benchmarks
          command: cargo build --release --features=runtime-benchmarks,running-ci
          no_output_timeout: 1h
      - run:
          name: Rename the benchmarks binary.
          command: mv ./target/release/polymesh ./polymesh-benchmarks
      - run:
          name: sccache stats
          command: ./scripts/install_sccache.sh
      - persist_to_workspace:
          root: ./
          paths:
            - polymesh-benchmarks
      - save_cache:
          key: v3-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  benchmark:
    docker:
      - image: debian:stable
    resource_class: small
    environment:
      - VERBOSE: "1"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run benchmarks
          command: ./polymesh-benchmarks benchmark pallet -p=* -e=* -r 1 -s 1 --execution native --db-cache 512 --heap-pages=2048
          no_output_timeout: 1h
  migration-tests:
    docker:
      - image: polymathnet/rust:debian-nightly-2022-05-10
    resource_class: large
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - BUILD_DUMMY_WASM_BINARY: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v2-migration-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Run migration tests
          command:  cargo test -p migration-tests --lib -- --nocapture
          no_output_timeout: 1h
      - save_cache:
          key: v2-migration-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  test:
    docker:
      - image: polymathnet/rust:debian-nightly-2022-05-10
    resource_class: large
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
      - SKIP_WASM_BUILD: "1"
      - RUST_BACKTRACE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v12-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Setup sccache.
          command: ./scripts/install_sccache.sh
      - run:
          name: Tests
          command: >-
            cargo test
            --package pallet-staking
            --package pallet-group
            --package pallet-sudo
            --package pallet-pips
            --package polymesh-primitives
            --package node-rpc-runtime-api
            --package pallet-transaction-payment
            --package polymesh-runtime-tests
            --package pallet-balances:0.1.0
            --package asset-metadata
            --features default_identity
          no_output_timeout: 1h
      - run:
          name: sccache stats
          command: ./scripts/install_sccache.sh
      - save_cache:
          key: v12-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  coverage:
    docker:
      - image: cimg/rust:1.60.0
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
    steps:
      - run:
          name: Install libclang
          command: sudo apt-get update && sudo apt-get install libclang-dev
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version | tee rust.version
      - restore_cache:
          keys:
            - v7-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Install dependencies
          command: rustup component add llvm-tools-preview && cargo install rustfilt cargo-binutils
      - run:
          name: Coverage
          command: bash ./scripts/coverage.sh
          no_output_timeout: 1h
      - save_cache:
          key: v7-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  integration-test:
    docker:
      - image: polymathnet/node:v16
    resource_class: medium+
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - attach_workspace:
          at: ./target/release
      - run:
          name: run Polymesh ci-dev chain node for integration tests
          command: >-
            ./target/release/polymesh --bob --chain ci-dev
              --no-prometheus --no-telemetry --tmp
              --wasm-execution compiled
              --pool-limit 100000
          background: true
      - run:
          name: install and build integration tests
          command: yarn install && yarn build
          working_directory: ./scripts/cli
          no_output_timeout: 1h
      - run:
          name: run integration tests
          command: yarn test
          working_directory: ./scripts/cli
          no_output_timeout: 10m
  clippy:
    docker:
      - image: polymathnet/rust:debian-nightly-2022-05-10
    resource_class: xlarge
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v6-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: run clippy
          command: cargo clippy -- -A clippy::all -W clippy::complexity -W clippy::perf
          no_output_timeout: 1h
      - save_cache:
          key: v6-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
workflows:
  version: 2
  commit:
    jobs:
      - lint
      - clippy
      - test
      - build
      - benchmark-build
      - coverage
      - integration-test:
          requires:
            - build
      - benchmark:
          requires:
            - benchmark-build
