version: 2
jobs:
  lint:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: small
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Check formatting
          command: ./scripts/rustfmt.sh
  check-storage-version:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: small
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Check Storage versions
          command: ./scripts/check_storage_versions.sh
  build:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v7-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build release
          command: cargo build --release
          no_output_timeout: 1h
      - run:
          name: Create assets directory for releases
          command: mkdir ./assets
      - run:
          name: Copy binary to assets
          command: cp ./target/release/polymesh ./assets/polymesh
      - run:
          name: Copy wasm to assets
          command: cp ./target/release/wbuild/polymesh*/*wasm ./assets/
      - persist_to_workspace:
          root: ./assets
          paths:
              - .
      - save_cache:
          key: v7-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  build-ci:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v7-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build ci-runtime
          command: cargo build --release --features ci-runtime
          no_output_timeout: 1h
      - run:
          name: Create assets directory for releases
          command: mkdir ./assets
      - run:
          name: Copy binary to assets
          command: cp ./target/release/polymesh ./assets/ci-runtime-polymesh
      - persist_to_workspace:
          root: ./assets
          paths:
              - .
  build-arm64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.xlarge
    environment:
      - NIGHTLY: "nightly-2022-11-02"
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: echo $NIGHTLY > rust.version
      - run:
          name: Create folders for caching.
          command: mkdir -p ~/.cargo/git ~/.cargo/registry ~/.cache/sccache
      - restore_cache:
          keys:
            - v7-release-arm64-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build arm64 release
          command: |
            docker run --rm --user "$(id -u)":"$(id -g)" \
              -e VERBOSE="$VERBOSE" \
              -e RUSTFLAGS="$RUSTFLAGS" \
              -e RUSTC_WRAPPER="$RUSTC_WRAPPER" \
              -v "$PWD":/tmp/build \
              -v ~/.cargo/git:/usr/local/cargo/git \
              -v ~/.cargo/registry:/usr/local/cargo/registry \
              -v ~/.cache/sccache:/.cache/sccache \
              -w /tmp/build polymeshassociation/rust-arm64:debian-$NIGHTLY \
              cargo build --release
          no_output_timeout: 1h
      - run:
          name: Create assets directory for releases
          command: mkdir -p ./assets
      - run:
          name: Copy arm64 binary to assets
          command: cp ./target/release/polymesh ./assets/polymesh-arm64
      - persist_to_workspace:
          root: ./assets
          paths:
              - .
      - save_cache:
          key: v7-release-arm64-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "~/.cache/sccache"
  benchmark-build:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v4-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build binary with runtime-benchmarks
          command: cargo build --release --features=runtime-benchmarks,running-ci
          no_output_timeout: 1h
      - run:
          name: Rename the benchmarks binary.
          command: mv ./target/release/polymesh ./polymesh-benchmarks
      - persist_to_workspace:
          root: ./
          paths:
            - polymesh-benchmarks
      - save_cache:
          key: v4-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  benchmark:
    docker:
      - image: debian:stable
    resource_class: small
    environment:
      - VERBOSE: "1"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run benchmarks
          command: ./polymesh-benchmarks benchmark pallet -p=* -e=* -r 1 -s 2 --execution wasm --wasm-execution compiled --db-cache 512 --heap-pages=4096
          no_output_timeout: 1h
  migration-tests:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: large
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - BUILD_DUMMY_WASM_BINARY: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v2-migration-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Run migration tests
          command:  cargo test -p migration-tests --lib -- --nocapture
          no_output_timeout: 1h
      - save_cache:
          key: v2-migration-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  test:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: large
    environment:
      - VERBOSE: "1"
      - RUSTFLAGS: -D warnings
      - RUSTC_WRAPPER: /usr/local/cargo/bin/sccache
      - SKIP_WASM_BUILD: "1"
      - RUST_BACKTRACE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v12-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Tests
          command: >-
            cargo test
            --package pallet-staking
            --package pallet-group
            --package pallet-sudo
            --package pallet-pips
            --package polymesh-primitives
            --package node-rpc-runtime-api
            --package pallet-transaction-payment
            --package polymesh-runtime-tests
            --package pallet-balances:0.1.0
            --package asset-metadata
            --features default_identity
          no_output_timeout: 1h
      - save_cache:
          key: v12-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cache/sccache"
  coverage:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version | tee rust.version
      - restore_cache:
          keys:
            - v7-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Coverage
          command: bash ./scripts/coverage.sh
          no_output_timeout: 1h
      - save_cache:
          key: v7-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  integration-test:
    docker:
      - image: node:16-bullseye
    resource_class: medium+
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - attach_workspace:
          at: ./target/release
      - run:
          name: run Polymesh ci-runtime dev chain node for integration tests
          command: >-
            ./target/release/ci-runtime-polymesh --bob --chain dev
              --no-prometheus --no-telemetry --tmp
              --wasm-execution compiled
              --pool-limit 100000
          background: true
      - run:
          name: install and build integration tests
          command: yarn install && yarn build
          working_directory: ./scripts/cli
          no_output_timeout: 1h
      - run:
          name: run integration tests
          command: yarn test
          working_directory: ./scripts/cli
          no_output_timeout: 10m
  clippy:
    docker:
      - image: polymeshassociation/rust:debian-nightly-2022-11-02
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - SKIP_WASM_BUILD: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v6-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: run clippy
          command: cargo clippy -- -A clippy::all -W clippy::complexity -W clippy::perf
          no_output_timeout: 1h
      - save_cache:
          key: v6-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
  build-docker-debian:
    environment:
      IMAGE_NAME: polymeshassociation/polymesh
    docker:
      - image: docker:stable-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: |
          export VERSION=`grep ^version ./Cargo.toml | head -1 | cut -d"=" -f2 | sed 's/[^a-zA-Z0-9\.]//g'`
          docker build -f ./.docker/Dockerfile.debian --tag $IMAGE_NAME:latest-$CIRCLE_BRANCH-debian --tag $IMAGE_NAME:$VERSION-$CIRCLE_BRANCH-debian .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push $IMAGE_NAME
  build-docker-distroless:
    environment:
      IMAGE_NAME: polymeshassociation/polymesh
    docker:
      - image: docker:stable-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run: |
          export VERSION=`grep ^version ./Cargo.toml | head -1 | cut -d"=" -f2 | sed 's/[^a-zA-Z0-9\.]//g'`
          docker build -f ./.docker/Dockerfile.distroless --tag $IMAGE_NAME:latest-$CIRCLE_BRANCH-distroless --tag $IMAGE_NAME:$VERSION-$CIRCLE_BRANCH-distroless .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push $IMAGE_NAME
  build-docker-arm64-debian:
    environment:
      IMAGE_NAME: polymeshassociation/polymesh-arm64
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          export VERSION=`grep ^version ./Cargo.toml | head -1 | cut -d"=" -f2 | sed 's/[^a-zA-Z0-9\.]//g'`
          docker build -f ./.docker/arm64/Dockerfile.debian --tag $IMAGE_NAME:latest-$CIRCLE_BRANCH-debian --tag $IMAGE_NAME:$VERSION-$CIRCLE_BRANCH-debian .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push --all-tags $IMAGE_NAME
  build-docker-arm64-distroless:
    environment:
      IMAGE_NAME: polymeshassociation/polymesh-arm64
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          export VERSION=`grep ^version ./Cargo.toml | head -1 | cut -d"=" -f2 | sed 's/[^a-zA-Z0-9\.]//g'`
          docker build -f ./.docker/arm64/Dockerfile.distroless --tag $IMAGE_NAME:latest-$CIRCLE_BRANCH-distroless --tag $IMAGE_NAME:$VERSION-$CIRCLE_BRANCH-distroless .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push --all-tags $IMAGE_NAME
  build-docker-rust-debian:
    environment:
      RUST_BASE: 1.65.0
      IMAGE_NAME: polymeshassociation/rust
    docker:
      - image: docker:stable-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run: |
          export NIGHTLY=`date "+nightly-%Y-%m-%d"`
          docker build -f ./.docker/rust-nightly/Dockerfile.debian \
            --build-arg rustbase=$RUST_BASE \
            --build-arg toolchainversion=$NIGHTLY \
            --tag $IMAGE_NAME:latest \
            --tag $IMAGE_NAME:debian --tag $IMAGE_NAME:debian-latest \
            --tag $IMAGE_NAME:debian-$NIGHTLY .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push $IMAGE_NAME
  build-docker-rust-alpine:
    environment:
      RUST_BASE: 1.65.0
      IMAGE_NAME: polymeshassociation/rust
    docker:
      - image: docker:stable-git
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run: |
          export NIGHTLY=`date "+nightly-%Y-%m-%d"`
          docker build -f ./.docker/rust-nightly/Dockerfile.alpine \
            --build-arg rustbase=$RUST_BASE \
            --build-arg toolchainversion=$NIGHTLY \
            --tag $IMAGE_NAME:alpine --tag $IMAGE_NAME:alpine-latest \
            --tag $IMAGE_NAME:alpine-$NIGHTLY .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push $IMAGE_NAME
  build-docker-arm64-rust-debian:
    environment:
      RUST_BASE: 1.65.0
      IMAGE_NAME: polymeshassociation/rust-arm64
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    steps:
      - checkout
      - run: |
          export NIGHTLY=`date "+nightly-%Y-%m-%d"`
          docker build -f ./.docker/arm64/rust/Dockerfile.debian \
            --build-arg rustbase=$RUST_BASE \
            --build-arg toolchainversion=$NIGHTLY \
            --tag $IMAGE_NAME:latest \
            --tag $IMAGE_NAME:debian --tag $IMAGE_NAME:debian-latest \
            --tag $IMAGE_NAME:debian-$NIGHTLY .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push --all-tags $IMAGE_NAME
  build-docker-arm64-rust-alpine:
    environment:
      RUST_BASE: 1.65.0
      IMAGE_NAME: polymeshassociation/rust-arm64
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    steps:
      - checkout
      - run: |
          export NIGHTLY=`date "+nightly-%Y-%m-%d"`
          docker build -f ./.docker/arm64/rust/Dockerfile.alpine \
            --build-arg rustbase=$RUST_BASE \
            --build-arg toolchainversion=$NIGHTLY \
            --tag $IMAGE_NAME:alpine --tag $IMAGE_NAME:alpine-latest \
            --tag $IMAGE_NAME:alpine-$NIGHTLY .
          echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker push --all-tags $IMAGE_NAME
  publish-github-release:
    docker:
      - image: circleci/golang:1.17
    steps:
      - attach_workspace:
          at: ./assets
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            cd assets
            VERSION=$(./polymesh --version | cut -d " " -f2)
            mv ./polymesh ./polymesh-${VERSION}
            mv ./polymesh-arm64 ./polymesh-${VERSION}-arm64
            zip -rm ./polymesh-${VERSION}.zip ./polymesh-${VERSION}
            zip -rm ./polymesh-${VERSION}-linux-arm64.zip ./polymesh-${VERSION}-arm64
            zip -rm ./polymesh-${VERSION}-wasm.zip ./*.wasm
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -prerelease -delete v${VERSION} ./

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 23 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-docker-rust-debian
      - build-docker-rust-alpine
      - build-docker-arm64-rust-debian
      - build-docker-arm64-rust-alpine
  commit:
    jobs:
      - lint
      - check-storage-version
      - clippy
      - test
      - build
      - build-ci
      - build-arm64
      - benchmark-build
      - coverage
      - integration-test:
          requires:
            - build-ci
      - benchmark:
          requires:
            - benchmark-build
      - build-docker-debian:
          requires:
            - build
          filters:
            branches:
              only:
                - mainnet
                - testnet
                - staging
                - develop
      - build-docker-distroless:
          requires:
            - build
          filters:
            branches:
              only:
                - mainnet
                - testnet
                - staging
                - develop
      - build-docker-arm64-debian:
          requires:
            - build-arm64
          filters:
            branches:
              only:
                - mainnet
                - testnet
                - staging
                - develop
      - build-docker-arm64-distroless:
          requires:
            - build-arm64
          filters:
            branches:
              only:
                - mainnet
                - testnet
                - staging
                - develop
      - publish-github-release:
          requires:
            - build
            - build-arm64
          filters:
            branches:
              only:
                - mainnet
                - testnet
                - staging