version: 2
jobs:
  lint:
    docker:
      - image: polymathnet/rust:debian-nightly-2021-12-14
    resource_class: medium
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Check formatting
          command: ./scripts/rustfmt.sh
  build:
    docker:
      - image: polymathnet/rust:debian-nightly-2021-12-14
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
      - RUSTC_WORKSPACE_WRAPPER: ./scripts/rustc.sh
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v5-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build release
          command: cargo build --release
          no_output_timeout: 1h
      - save_cache:
          key: v5-release-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cargo"
            - "./target"
  benchmark-build:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: xlarge
    environment:
      - VERBOSE: "1"
    steps:
      - checkout
      - run:
          shell: /bin/bash
          name: Setup rust-nightly environment.
          command: |
            sudo apt update
            sudo apt install build-essential \
              clang cmake \
              gcc jq libclang-dev libssl-dev \
              pkg-config ca-certificates rsync curl \
              -y --no-install-recommends
            export TOOLCHAIN=`cat rust-toolchain`
            # Download rustup installer.
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs >./rustup_install.sh
            # Run rustup installer.
            bash ./rustup_install.sh -y --default-toolchain $TOOLCHAIN
            # Add rustup to PATH.
            source $HOME/.cargo/env
            # Install wasm tools.
            ./scripts/init.sh

      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v2-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build binary with runtime-benchmarks
          environment:
            - RUSTC_WORKSPACE_WRAPPER: ./scripts/rustc.sh
          command: cargo build --release --features=runtime-benchmarks,running-ci
          no_output_timeout: 1h
      - persist_to_workspace:
          root: ./target/release
          paths:
            - polymesh
      - save_cache:
          key: v2-bench-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
  benchmark:
    docker:
      - image: debian:stable
    resource_class: medium
    environment:
      - VERBOSE: "1"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run benchmarks
          command: ./polymesh benchmark -p=* -e=* -r 1 -s 1 --execution native --db-cache 512 --heap-pages=2048
          no_output_timeout: 1h
  migration-tests:
    docker:
      - image: polymathnet/rust:debian-nightly-2021-12-14
    resource_class: large
    environment:
      - VERBOSE: "1"
      - RUSTC_WORKSPACE_WRAPPER: ./scripts/rustc.sh
      - BUILD_DUMMY_WASM_BINARY: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in an environment var for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v1-migration-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Run migration tests
          command:  cargo test -p migration-tests --lib -- --nocapture
          no_output_timeout: 1h
      - save_cache:
          key: v1-migration-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cargo"
            - "./target"
  test:
    docker:
      - image: polymathnet/rust:debian-nightly-2021-12-14
    resource_class: large
    environment:
      - VERBOSE: "1"
      - RUSTC_WORKSPACE_WRAPPER: ./scripts/rustc.sh
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v11-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Tests
          command: >-
            cargo test
            --package polymesh-runtime-tests
            --package pallet-staking
            --package pallet-group
            --package pallet-sudo
            --package polymesh-primitives
            --package node-rpc-runtime-api
            --package pallet-transaction-payment
            --package polymesh-runtime-tests
            --features default_identity
          no_output_timeout: 1h
      - save_cache:
          key: v11-test-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cargo"
            - "./target"
  coverage:
    docker:
      - image: cimg/rust:1.60.0
    resource_class: large
    environment:
      - VERBOSE: "1"
    steps:
      - run:
          name: Install libclang
          command: sudo apt-get update && sudo apt-get install libclang-dev
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version | tee rust.version
      - restore_cache:
          keys:
            - v6-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Install dependencies
          command: rustup component add llvm-tools-preview && cargo install rustfilt cargo-binutils
      - run:
          name: Coverage
          command: bash ./scripts/coverage.sh
          no_output_timeout: 1h
      - save_cache:
          key: v6-coverage-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "~/.cargo"
  cli:
    docker:
      - image: polymathnet/rust:debian-nightly-2021-12-14
    resource_class: xlarge
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v6-cli-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: Build release
          command: cargo build --release
          no_output_timeout: 4h
      - run:
          name: cli node instance
          command: ./target/release/polymesh --dev --pool-limit 100000 -d /tmp/pmesh-primary-node
          background: true
      - run:
          name: cli scripts install and build
          command: yarn install && yarn build
          working_directory: ./scripts/cli
          no_output_timeout: 1h
      - run:
          name: cli scripts test
          command: yarn test
          working_directory: ./scripts/cli
          no_output_timeout: 10m
      - save_cache:
          key: v6-cli-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cargo"
            - "./target"
            - "./scripts/cli/node_modules"
  clippy:
    docker:
      - image: polymathnet/rust:debian-nightly-2021-12-14
    resource_class: large
    environment:
      VERBOSE: "1"
    steps:
      - checkout
      - run:
          name: Store rust version in a file for cache key
          command: rustc --version > rust.version
      - restore_cache:
          keys:
            - v5-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
      - run:
          name: run clippy
          command: cargo clippy
          no_output_timeout: 1h
      - save_cache:
          key: v5-clippy-cache-{{ checksum "./rust.version" }}-{{ checksum "./Cargo.lock" }}
          paths:
            - "/usr/local/cargo"
            - "~/.cargo"
            - "./target"
workflows:
  version: 2
  commit:
    jobs:
      - benchmark-build
      - coverage
      - benchmark:
          requires:
            - benchmark-build
