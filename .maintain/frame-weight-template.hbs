// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for {{pallet}}
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}, STEPS: `{{cmd.steps}}`, REPEAT: {{cmd.repeat}}, LOW RANGE: `{{cmd.lowest_range_values}}`, HIGH RANGE: `{{cmd.highest_range_values}}`
//! EXECUTION: {{cmd.execution}}, WASM-EXECUTION: {{cmd.wasm_execution}}, CHAIN: {{cmd.chain}}, DB CACHE: {{cmd.db_cache}}
//! HOSTNAME: `{{hostname}}`, CPU: `{{cpuname}}`

// Executed Command:
{{#each args as |arg|~}}
// {{arg}}
{{/each}}

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for {{pallet}} using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl {{pallet}}::WeightInfo for SubstrateWeight {
    {{#each benchmarks as |benchmark|}}
    {{#each benchmark.comments as |comment|}}
    // {{comment}}
    {{/each}}
    {{#each benchmark.component_ranges as |range|}}
    /// The range of component `{{range.name}}` is `[{{range.min}}, {{range.max}}]`.
    {{/each}}
    fn {{benchmark.name~}}
    (
        {{~#each benchmark.components as |c| ~}}
        {{~#if (not c.is_used)}}_{{/if}}{{c.name}}: u32, {{/each~}}
    ) -> Weight {
        // Minimum execution time: {{underscore benchmark.min_execution_time}} nanoseconds.
        Weight::from_ref_time({{underscore benchmark.base_weight}})
            {{#each benchmark.component_weight as |cw|}}
            // Standard Error: {{underscore cw.error}}
            .saturating_add(Weight::from_ref_time({{underscore cw.slope}}).saturating_mul({{cw.name}}.into()))
            {{/each}}
            {{#if (ne benchmark.base_reads "0")}}
            .saturating_add(DbWeight::get().reads({{benchmark.base_reads}}))
            {{/if}}
            {{#each benchmark.component_reads as |cr|}}
            .saturating_add(DbWeight::get().reads(({{cr.slope}}_u64).saturating_mul({{cr.name}}.into())))
            {{/each}}
            {{#if (ne benchmark.base_writes "0")}}
            .saturating_add(DbWeight::get().writes({{benchmark.base_writes}}))
            {{/if}}
            {{#each benchmark.component_writes as |cw|}}
            .saturating_add(DbWeight::get().writes(({{cw.slope}}_u64).saturating_mul({{cw.name}}.into())))
            {{/each}}
    }
    {{/each}}
}
