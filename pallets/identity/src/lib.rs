// This file is part of the Polymesh distribution (https://github.com/PolymathNetwork/Polymesh).
// Copyright (c) 2020 Polymath

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, version 3.

// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

//! # Identity module
//!
//! This module is used to manage identity concept.
//!
//!  - [Module](./struct.Module.html)
//!  - [Trait](./trait.Trait.html)
//!
//! ## Overview :
//!
//! Identity concept groups different account (keys) in one place, and it allows each key to
//! make operations based on the constraint that each account (permissions and key types).
//!
//! Any account can create and manage one and only one identity, using
//! [register_did](./struct.Module.html#method.register_did). Other accounts can be added to a
//! target identity as secondary key, where we also define the type of account (`External`,
//! `MultiSign`, etc.) and/or its permission.
//!
//! ## Identity information
//!
//! Identity contains the following data:
//!  - `primary_key`. It is the administrator account of the identity.
//!  - `secondary_keys`. List of keys and their capabilities (type of key and its permissions) .
//!
//! ## Freeze secondary keys
//!
//! It is an *emergency action* to block all secondary keys of an identity and it can only be performed
//! by its administrator.
//!
//! see [freeze_secondary_keys](./struct.Module.html#method.freeze_secondary_keys)
//! see [unfreeze_secondary_keys](./struct.Module.html#method.unfreeze_secondary_keys)
//!
//! ## Claim Unique Index
//!
//! Each claim is identified by a unique index, which is composed by two keys in order to optimise
//! the posterior use of them:
//! - Claim First Key, which have two fields:
//!    - A target DID, which is the user that receive that claim.
//!    - The type of the claim.
//! - Claim Second Key contains:
//!     - An issuer of the claim, who generated/added that claim.
//!     - An optional scope, it could limit the scope of this claim to specific assets,
//!     identities, or any other custom label.
//!
//! ## Interface
//!
//! ### Dispatchable Functions
//!
//! - `invalidate_cdd_claims` - Invalidates any claim generated by `cdd` from `disable_from` timestamps.
//! - `remove_secondary_keys` - Removes specified secondary keys of a DID if present.
//! - `accept_primary_key` - Accept authorization to become the new primary key of an identity.
//! - `change_cdd_requirement_for_mk_rotation` - Sets if CDD authorization is required for updating primary key of an identity.
//! - `join_identity_as_key` - Join an identity as a secondary key.
//! - `join_identity_as_identity` - Join an identity as a secondary identity.
//! - `add_claim` - Adds a new claim record or edits an existing one.
//! - `revoke_claim` - Marks the specified claim as revoked.
//! - `revoke_claim_by_index` - Revoke a claim identified by its index.
//! - `set_permission_to_signer` - Sets permissions for an specific `target_key` key.
//! - `freeze_secondary_keys` - Disables all secondary keys at `did` identity.
//! - `unfreeze_secondary_keys` - Re-enables all secondary keys of the caller's identity.
//! - `add_authorization` - Adds an authorization.
//! - `remove_authorization` - Removes an authorization.
//! - `add_secondary_keys_with_authorization` - Adds secondary keys to target identity `id`.
//! - `revoke_offchain_authorization` - Revokes the `auth` off-chain authorization of `signer`.
//! - `add_investor_uniqueness_claim` - Adds InvestorUniqueness claim for a given target identity.
//! - `add_investor_uniqueness_claim_v2` - Adds InvestorUniqueness claim V2 for a given target identity.

#![cfg_attr(not(feature = "std"), no_std)]
#![recursion_limit = "256"]
#![feature(const_option, bool_to_option)]

pub mod types;
pub use types::{
    Claim1stKey, Claim2ndKey, DidRecords as RpcDidRecords, DidStatus, PermissionedCallOriginData,
};

mod migration;

#[cfg(feature = "runtime-benchmarks")]
pub mod benchmarking;

use codec::{Decode, Encode};
use confidential_identity::ScopeClaimProof;
use core::convert::From;
use frame_support::{
    debug, decl_error, decl_module, decl_storage,
    dispatch::{DispatchError, DispatchResult},
    ensure, fail,
    traits::{ChangeMembers, Currency, EnsureOrigin, Get, InitializeMembers},
    weights::{
        DispatchClass::{Normal, Operational},
        Pays, Weight,
    },
    StorageDoubleMap,
};
use frame_system::{self as system, ensure_root, ensure_signed};
use pallet_base::{ensure_length_ok, ensure_string_limited};
pub use polymesh_common_utilities::traits::identity::WeightInfo;
use polymesh_common_utilities::{
    constants::did::{SECURITY_TOKEN, USER},
    protocol_fee::{ChargeProtocolFee, ProtocolOp},
    traits::{
        asset::AssetSubTrait,
        group::{GroupTrait, InactiveMember},
        identity::{
            AuthorizationNonce, Config, IdentityFnTrait, RawEvent, SecondaryKeyWithAuth,
            TargetIdAuthorization,
        },
        multisig::MultiSigSubTrait,
        transaction_payment::CddAndFeeDetails,
        AccountCallPermissionsData, CheckAccountCallPermissions,
    },
    Context, SystematicIssuers, GC_DID, SYSTEMATIC_ISSUERS,
};
use polymesh_primitives::identity_id::GenesisIdentityRecord;
use polymesh_primitives::{
    extract_auth,
    investor_zkproof_data::{v1::InvestorZKProofData, InvestorZKProofData as InvestorZKProof},
    secondary_key::{self, api::LegacyPermissions},
    storage_migrate_on, storage_migration_ver, valid_proof_of_investor, Authorization,
    AuthorizationData, AuthorizationError, AuthorizationType, CddId, Claim, ClaimType,
    DispatchableName, ExtrinsicPermissions, Identity as DidRecord, IdentityClaim, IdentityId,
    InvestorUid, PalletName, Permissions, Scope, ScopeId, SecondaryKey, Signatory, Ticker,
};
use sp_core::sr25519::Signature;
use sp_io::hashing::blake2_256;
use sp_runtime::{
    traits::{
        AccountIdConversion, CheckedAdd, Hash, IdentifyAccount, SaturatedConversion, Verify, Zero,
    },
    AnySignature,
};
use sp_std::{convert::TryFrom, iter, mem::replace, prelude::*, vec};

pub type Event<T> = polymesh_common_utilities::traits::identity::Event<T>;
type CallPermissions<T> = pallet_permissions::Module<T>;

// A value placed in storage that represents the current version of the this storage. This value
// is used by the `on_runtime_upgrade` logic to determine whether we run storage migration logic.
storage_migration_ver!(3);

decl_storage! {
    trait Store for Module<T: Config> as identity {

        /// DID -> identity info
        pub DidRecords get(fn did_records) config(): map hasher(twox_64_concat) IdentityId => DidRecord<T::AccountId>;

        /// DID -> bool that indicates if secondary keys are frozen.
        pub IsDidFrozen get(fn is_did_frozen): map hasher(twox_64_concat) IdentityId => bool;

        /// It stores the current identity for current transaction.
        pub CurrentDid: Option<IdentityId>;

        /// It stores the current gas fee payer for the current transaction
        pub CurrentPayer: Option<T::AccountId>;

        /// (Target ID, claim type) (issuer,scope) -> Associated claims
        pub Claims: double_map hasher(blake2_128_concat) Claim1stKey, hasher(blake2_128_concat) Claim2ndKey => IdentityClaim;

        // A map from AccountId primary or secondary keys to DIDs.
        // Account keys map to at most one identity.
        pub KeyToIdentityIds get(fn key_to_identity_dids) config():
            map hasher(blake2_128_concat) T::AccountId => IdentityId;

        /// Nonce to ensure unique actions. starts from 1.
        pub MultiPurposeNonce get(fn multi_purpose_nonce) build(|_| 1u64): u64;

        /// Authorization nonce per Identity. Initially is 0.
        pub OffChainAuthorizationNonce get(fn offchain_authorization_nonce): map hasher(twox_64_concat) IdentityId => AuthorizationNonce;

        /// Inmediate revoke of any off-chain authorization.
        pub RevokeOffChainAuthorization get(fn is_offchain_authorization_revoked):
            map hasher(blake2_128_concat) (Signatory<T::AccountId>, TargetIdAuthorization<T::Moment>) => bool;

        /// All authorizations that an identity/key has
        pub Authorizations get(fn authorizations): double_map hasher(blake2_128_concat)
            Signatory<T::AccountId>, hasher(twox_64_concat) u64 => Authorization<T::AccountId, T::Moment>;

        /// All authorizations that an identity has given. (Authorizer, auth_id -> authorized)
        pub AuthorizationsGiven: double_map hasher(blake2_128_concat)
            IdentityId, hasher(twox_64_concat) u64 => Signatory<T::AccountId>;

        /// Obsoleted storage variable superceded by `CddAuthForPrimaryKeyRotation`. It is kept here
        /// for the purpose of storage migration.
        pub CddAuthForMasterKeyRotation get(fn cdd_auth_for_master_key_rotation): bool;

        /// A config flag that, if set, instructs an authorization from a CDD provider in order to
        /// change the primary key of an identity.
        pub CddAuthForPrimaryKeyRotation get(fn cdd_auth_for_primary_key_rotation): bool;

        /// Storage version.
        StorageVersion get(fn storage_version) build(|_| Version::new(3).unwrap()): Version;

        /// How many "strong" references to the account key.
        ///
        /// Strong references will block a key from leaving it's identity.
        ///
        /// Pallets using "strong" references to account keys:
        /// * Relayer: For `user_key` and `paying_key`
        ///
        pub AccountKeyRefCount get(fn account_key_ref_count):
            map hasher(blake2_128_concat) T::AccountId => u64;
    }
    add_extra_genesis {
        // Identities at genesis.
        config(identities): Vec<GenesisIdentityRecord<T::AccountId>>;
        // Secondary keys of identities at genesis. `identities` have to be initialised.
        config(secondary_keys): Vec<(T::AccountId, IdentityId)>;
        build(|config: &GenesisConfig<T>| {
            SYSTEMATIC_ISSUERS
                .iter()
                .copied()
                .for_each(<Module<T>>::register_systematic_id);

            // Add CDD claims to Treasury & BRR
            let sys_issuers_with_cdd = [SystematicIssuers::Treasury, SystematicIssuers::BlockRewardReserve, SystematicIssuers::Settlement];
            let id_with_cdd = sys_issuers_with_cdd.iter()
                .map(|iss| iss.as_id())
                .collect::<Vec<_>>();

            <Module<T>>::add_systematic_cdd_claims(&id_with_cdd, SystematicIssuers::CDDProvider);

            //  Other
            for gen_id in &config.identities {
                let cdd_claim = Claim::CustomerDueDiligence(CddId::new_v1(gen_id.did, gen_id.investor));
                // Direct storage change for registering the DID and providing the claim
                <Module<T>>::ensure_no_id_record(gen_id.did).unwrap();
                <MultiPurposeNonce>::mutate(|n| *n += 1_u64);
                let expiry = gen_id.cdd_claim_expiry.iter().map(|m| T::Moment::from(*m as u32)).next();
                <Module<T>>::do_register_id(gen_id.primary_key.clone(), gen_id.did, gen_id.secondary_keys.clone());
                for issuer in &gen_id.issuers {
                    <Module<T>>::base_add_claim(gen_id.did, cdd_claim.clone(), issuer.clone(), expiry);
                }
            }

            for &(ref secondary_account_id, did) in &config.secondary_keys {
                // Direct storage change for attaching some secondary keys to identities
                <Module<T>>::ensure_id_record_exists(did).unwrap();
                assert!(
                    <Module<T>>::can_link_account_key_to_did(secondary_account_id),
                    "Secondary key already linked"
                );
                <MultiPurposeNonce>::mutate(|n| *n += 1_u64);
                <Module<T>>::link_account_key_to_did(secondary_account_id, did);
                let sk = SecondaryKey::from_account_id(secondary_account_id.clone());
                <DidRecords<T>>::mutate(did, |record| {
                    (*record).add_secondary_keys(iter::once(sk.clone()));
                });
                <Module<T>>::deposit_event(RawEvent::SecondaryKeysAdded(did, vec![sk.into()]));
            }
        });
    }
}

decl_module! {
    /// The module declaration.
    pub struct Module<T: Config> for enum Call where origin: T::Origin {

        type Error = Error<T>;

        // Initializing events
        // this is needed only if you are using events in your module
        fn deposit_event() = default;

        const InitialPOLYX: <T::Balances as Currency<T::AccountId>>::Balance = T::InitialPOLYX::get();

        fn on_runtime_upgrade() -> Weight {
            let storage_ver = StorageVersion::get();

            storage_migrate_on!(storage_ver, 3, { Claims::translate(migration::migrate_claim); });

            // It's gonna be alot, so lets pretend its 0 anyways.
            0
        }

        /// Register `target_account` with a new Identity.
        ///
        /// # Failure
        /// - `origin` has to be a active CDD provider. Inactive CDD providers cannot add new
        /// claims.
        /// - `target_account` (primary key of the new Identity) can be linked to just one and only
        /// one identity.
        /// - External secondary keys can be linked to just one identity.
        ///
        /// # Weight
        /// `7_000_000_000 + 600_000 * secondary_keys.len()`
        #[weight = <T as Config>::WeightInfo::cdd_register_did(secondary_keys.len() as u32)]
        pub fn cdd_register_did(
            origin,
            target_account: T::AccountId,
            secondary_keys: Vec<SecondaryKey<T::AccountId>>
        ) {
            let cdd_id = Self::ensure_perms(origin)?;
            Self::base_cdd_register_did(cdd_id, target_account, secondary_keys)?;
        }

        /// It invalidates any claim generated by `cdd` from `disable_from` timestamps.
        /// You can also define an expiration time, which will invalidate all claims generated by
        /// that `cdd` and remove it as CDD member group.
        #[weight = (<T as Config>::WeightInfo::invalidate_cdd_claims(), Operational, Pays::Yes)]
        pub fn invalidate_cdd_claims(
            origin,
            cdd: IdentityId,
            disable_from: T::Moment,
            expiry: Option<T::Moment>,
        ) {
            ensure_root(origin)?;

            let now = <pallet_timestamp::Module<T>>::get();
            ensure!(
                T::CddServiceProviders::get_valid_members_at(now).contains(&cdd),
                Error::<T>::UnAuthorizedCddProvider
            );

            T::CddServiceProviders::disable_member(cdd, expiry, Some(disable_from))?;
            Self::deposit_event(RawEvent::CddClaimsInvalidated(cdd, disable_from));
        }

        /// Removes specified secondary keys of a DID if present.
        ///
        /// # Failure
        /// It can only called by primary key owner.
        ///
        /// # Weight
        /// `950_000_000 + 60_000 * signers_to_remove.len()`
        #[weight = <T as Config>::WeightInfo::remove_secondary_keys(signers_to_remove.len() as u32)]
        pub fn remove_secondary_keys(origin, signers_to_remove: Vec<Signatory<T::AccountId>>) {
            let PermissionedCallOriginData {
                sender,
                primary_did: did,
                ..
            } = Self::ensure_origin_call_permissions(origin)?;
            let _grants_checked = Self::grant_check_only_primary_key(&sender, did)?;

            // Ensure that it is safe to unlink the secondary keys from the did.
            for signer in &signers_to_remove {
                if let Signatory::Account(key) = &signer {
                    Self::ensure_key_unlinkable_from_did(key)?;
                }
            }

            // Remove links and get all authorization IDs per signer.
            signers_to_remove
                .iter()
                .flat_map(|signer| {
                    use either::Either::{Left, Right};

                    // Unlink each of the given secondary keys from `did`.
                    if let Signatory::Account(key) = &signer {
                        // Unlink multisig signers.
                        if T::MultiSig::is_multisig(key) {
                            if !T::Balances::total_balance(key).is_zero() {
                                return Left(iter::empty());
                            }
                            // Unlink multisig signers from the identity.
                            Self::unlink_multisig_signers_from_did(
                                T::MultiSig::get_key_signers(key),
                                did
                            );
                        }
                        // Unlink the secondary account key.
                        Self::unlink_account_key_from_did(key, did);
                    }

                    // Compute list of `auth_id` from `did`.
                    Right(
                        <Authorizations<T>>::iter_prefix_values(signer)
                            .filter_map(move |auth| (auth.authorized_by == did).then_some((signer, auth.auth_id)))
                    )
                })
                // Remove authorizations.
                .for_each(|(signer, auth_id)| Self::unsafe_remove_auth(signer, auth_id, &did, true));

            // Update secondary keys at Identity.
            <DidRecords<T>>::mutate(did, |record| {
                (*record).remove_secondary_keys(&signers_to_remove);
            });

            Self::deposit_event(RawEvent::SecondaryKeysRemoved(did, signers_to_remove));
        }

        /// Call this with the new primary key. By invoking this method, caller accepts authorization
        /// with the new primary key. If a CDD service provider approved this change, primary key of
        /// the DID is updated.
        ///
        /// # Arguments
        /// * `owner_auth_id` Authorization from the owner who initiated the change
        /// * `cdd_auth_id` Authorization from a CDD service provider
        #[weight = <T as Config>::WeightInfo::accept_primary_key()]
        pub fn accept_primary_key(origin, rotation_auth_id: u64, optional_cdd_auth_id: Option<u64>) -> DispatchResult {
            Self::accept_primary_key_rotation(origin, rotation_auth_id, optional_cdd_auth_id)
        }

        /// Set if CDD authorization is required for updating primary key of an identity.
        /// Callable via root (governance)
        ///
        /// # Arguments
        /// * `auth_required` CDD Authorization required or not
        #[weight = (<T as Config>::WeightInfo::change_cdd_requirement_for_mk_rotation(), Operational, Pays::Yes)]
        pub fn change_cdd_requirement_for_mk_rotation(origin, auth_required: bool) {
            ensure_root(origin)?;
            CddAuthForPrimaryKeyRotation::put(auth_required);
            Self::deposit_event(RawEvent::CddRequirementForPrimaryKeyUpdated(auth_required));
        }

        /// Join an identity as a secondary key.
        #[weight = <T as Config>::WeightInfo::join_identity_as_key()]
        pub fn join_identity_as_key(origin, auth_id: u64) -> DispatchResult {
            let sender = ensure_signed(origin)?;
            Self::join_identity(Signatory::Account(sender), auth_id)
        }

        /// Join an identity as a secondary identity.
        #[weight = <T as Config>::WeightInfo::join_identity_as_identity()]
        pub fn join_identity_as_identity(origin, auth_id: u64) -> DispatchResult {
            let sender_did = Self::ensure_perms(origin)?;
            Self::join_identity(Signatory::from(sender_did), auth_id)
        }

        /// Leave the secondary key's identity.
        #[weight = <T as Config>::WeightInfo::leave_identity_as_key()]
        pub fn leave_identity_as_key(origin) -> DispatchResult {
            let data = Self::ensure_origin_call_permissions(origin)?;
            Self::leave_identity(Signatory::Account(data.sender), data.primary_did)
        }

        /// Leave an identity as a secondary identity.
        #[weight = <T as Config>::WeightInfo::leave_identity_as_identity()]
        pub fn leave_identity_as_identity(origin, did: IdentityId) -> DispatchResult {
            let sender_did = Self::ensure_perms(origin)?;
            Self::leave_identity(Signatory::from(sender_did), did)
        }

        /// Adds a new claim record or edits an existing one. Only called by did_issuer's secondary key.
        #[weight = <T as Config>::WeightInfo::add_claim()]
        pub fn add_claim(
            origin,
            target: IdentityId,
            claim: Claim,
            expiry: Option<T::Moment>,
        ) -> DispatchResult {
            let issuer = Self::ensure_signed_and_validate_claim_target(origin, target)?;

            match &claim {
                Claim::CustomerDueDiligence(..) => Self::base_add_cdd_claim(target, claim, issuer, expiry),
                Claim::InvestorUniqueness(..) | Claim::InvestorUniquenessV2(..) => Err(Error::<T>::ClaimVariantNotAllowed.into()),
                _ => {
                    T::ProtocolFee::charge_fee(ProtocolOp::IdentityAddClaim)?;
                    Self::base_add_claim(target, claim, issuer, expiry);
                    Ok(())
                }
            }
        }

        /// Marks the specified claim as revoked.
        #[weight = (<T as Config>::WeightInfo::revoke_claim(), revoke_claim_class(claim.claim_type()))]
        pub fn revoke_claim(origin, target: IdentityId, claim: Claim) -> DispatchResult {
            let issuer = Self::ensure_perms(origin)?;
            let claim_type = claim.claim_type();
            let scope = claim.as_scope().cloned();
            Self::base_revoke_claim(target, claim_type, issuer, scope)
        }

        /// It sets permissions for an specific `target_key` key.
        /// Only the primary key of an identity is able to set secondary key permissions.
        #[weight = <T as Config>::WeightInfo::set_permission_to_signer()]
        pub fn set_permission_to_signer(
            origin,
            signer: Signatory<T::AccountId>,
            permissions: Permissions
        ) -> DispatchResult {
            let PermissionedCallOriginData {
                sender,
                primary_did: did,
                ..
            } = Self::ensure_origin_call_permissions(origin)?;
            let record = Self::grant_check_only_primary_key(&sender, did)?;

            // Ensure that the signer is a secondary key of the caller's Identity
            ensure!(record.secondary_keys.iter().any(|si| si.signer == signer), Error::<T>::NotASigner);
            Self::update_secondary_key_permissions(did, &signer, permissions)
        }

        /// This function is a workaround for https://github.com/polkadot-js/apps/issues/3632
        /// It sets permissions for an specific `target_key` key.
        /// Only the primary key of an identity is able to set secondary key permissions.
        #[weight = <T as Config>::WeightInfo::set_permission_to_signer()]
        pub fn legacy_set_permission_to_signer(
            origin,
            signer: Signatory<T::AccountId>,
            permissions: LegacyPermissions
        ) -> DispatchResult {
            Self::set_permission_to_signer(origin, signer, permissions.into())
        }

        /// It disables all secondary keys at `did` identity.
        ///
        /// # Errors
        ///
        #[weight = <T as Config>::WeightInfo::freeze_secondary_keys()]
        pub fn freeze_secondary_keys(origin) -> DispatchResult {
            Self::set_frozen_secondary_key_flags(origin, true)
        }

        /// Re-enables all secondary keys of the caller's identity.
        #[weight = <T as Config>::WeightInfo::unfreeze_secondary_keys()]
        pub fn unfreeze_secondary_keys(origin) -> DispatchResult {
            Self::set_frozen_secondary_key_flags(origin, false)
        }

        // Manage generic authorizations
        /// Adds an authorization.
        #[weight = <T as Config>::WeightInfo::add_authorization()]
        pub fn add_authorization(
            origin,
            target: Signatory<T::AccountId>,
            authorization_data: AuthorizationData<T::AccountId>,
            expiry: Option<T::Moment>
        ) {
            let from_did = Self::ensure_perms(origin)?;
            if let AuthorizationData::JoinIdentity(perms) = &authorization_data {
                Self::ensure_perms_length_limited(perms)?;
            }
            Self::add_auth(from_did, target, authorization_data, expiry);
        }

        /// Removes an authorization.
        /// _auth_issuer_pays determines whether the issuer of the authorisation pays the transaction fee
        #[weight = <T as Config>::WeightInfo::remove_authorization()]
        pub fn remove_authorization(
            origin,
            target: Signatory<T::AccountId>,
            auth_id: u64,
            _auth_issuer_pays: bool,
        ) {
            let sender = ensure_signed(origin)?;
            let from_did = if <KeyToIdentityIds<T>>::contains_key(&sender) {
                // If the sender is linked to an identity, ensure that it has relevant permissions
                CallPermissions::<T>::ensure_call_permissions(&sender)?.primary_did
            } else {
                Context::current_identity_or::<Self>(&sender)?
            };

            let auth = Self::ensure_authorization(&target, auth_id)?;
            let revoked = auth.authorized_by == from_did;
            ensure!(
                revoked || target.eq_either(&from_did, &sender),
                Error::<T>::Unauthorized
            );
            Self::unsafe_remove_auth(&target, auth_id, &auth.authorized_by, revoked);
        }

        /// It adds secondary keys to target identity `id`.
        /// Keys are directly added to identity because each of them has an authorization.
        ///
        /// Arguments:
        ///     - `origin` Primary key of `id` identity.
        ///     - `id` Identity where new secondary keys will be added.
        ///     - `additional_keys` New secondary items (and their authorization data) to add to target
        ///     identity.
        ///
        /// Failure
        ///     - It can only called by primary key owner.
        ///     - Keys should be able to linked to any identity.
        ///
        /// NB: The current weight is a defensive approximation.
        #[weight =
            (1_500_000_000 as Weight)
                .saturating_add(T::DbWeight::get().reads(10 as Weight))
                .saturating_add(T::DbWeight::get().writes(5 as Weight))
        ]
        pub fn add_secondary_keys_with_authorization(
            origin,
            additional_keys: Vec<SecondaryKeyWithAuth<T::AccountId>>,
            expires_at: T::Moment
        ) {
            let PermissionedCallOriginData {
                sender,
                primary_did: did,
                ..
            } = Self::ensure_origin_call_permissions(origin)?;
            let _grants_checked = Self::grant_check_only_primary_key(&sender, did)?;

            // 0. Check expiration
            let now = <pallet_timestamp::Module<T>>::get();
            ensure!(now < expires_at, Error::<T>::AuthorizationExpired);
            let authorization = TargetIdAuthorization {
                target_id: did,
                nonce: Self::offchain_authorization_nonce(did),
                expires_at
            };
            let auth_encoded = authorization.encode();

            let mut record = <DidRecords<T>>::get(did);

            // Ensure we won't have too many keys.
            ensure_length_ok::<T>(record.secondary_keys.len().saturating_add(additional_keys.len()))?;

            // 1. Verify signatures.
            for si_with_auth in additional_keys.iter() {
                let si: SecondaryKey<T::AccountId> = si_with_auth.secondary_key.clone().into();

                Self::ensure_perms_length_limited(&si.permissions)?;

                // Get account_id from signer
                let account_id = match si.signer {
                    Signatory::Account(ref key) => Some(key.clone()),
                    Signatory::Identity(id) => Self::identity_record_of(id).map(|r| r.primary_key),
                }.ok_or(Error::<T>::InvalidAccountKey)?;

                ensure!(match si.signer {
                    Signatory::Account(ref key) => {
                        // 1.1. Constraint 1-to-1 account to DID.
                        Self::can_link_account_key_to_did(key)
                    },
                    Signatory::Identity(_) => {
                        // 1.1. Check if identity is already a secondary key.
                        !record.contains_secondary_key(&si.signer)
                    }
                }, Error::<T>::AlreadyLinked);

                // 1.2. Offchain authorization is not revoked explicitly.
                let si_signer_authorization = &(si.signer.clone(), authorization.clone());
                ensure!(
                    !Self::is_offchain_authorization_revoked(si_signer_authorization),
                    Error::<T>::AuthorizationHasBeenRevoked
                );
                // 1.3. Verify the signature.
                let signature = AnySignature::from(Signature::from_h512(si_with_auth.auth_signature));
                let signer: <<AnySignature as Verify>::Signer as IdentifyAccount>::AccountId =
                    Decode::decode(&mut &account_id.encode()[..]).map_err(|_| {
                        Error::<T>::CannotDecodeSignerAccountId
                    })?;
                ensure!(
                    signature.verify(auth_encoded.as_slice(), &signer),
                    Error::<T>::InvalidAuthorizationSignature
                );
            }
            // 1.999. Charge the fee.
            T::ProtocolFee::batch_charge_fee(
                ProtocolOp::IdentityAddSecondaryKeysWithAuthorization,
                additional_keys.len()
            )?;
            // 2.1. Link keys to identity
            let additional_keys_si: Vec<_> =
                additional_keys.into_iter()
                .map(|si_with_auth| si_with_auth.secondary_key)
                .collect();

            additional_keys_si.iter().for_each(|sk| {
                if let Signatory::Account(key) = &sk.signer {
                    Self::link_account_key_to_did(key, did);
                }
            });
            // 2.2. Update that identity information and its offchain authorization nonce.
            record.add_secondary_keys(additional_keys_si.iter().map(|sk| sk.clone().into()));
            <DidRecords<T>>::insert(did, record);
            OffChainAuthorizationNonce::mutate(did, |offchain_nonce| {
                *offchain_nonce = authorization.nonce + 1;
            });

            Self::deposit_event(RawEvent::SecondaryKeysAdded(did, additional_keys_si));
        }

        /// It revokes the `auth` off-chain authorization of `signer`. It only takes effect if
        /// the authorized transaction is not yet executed.
        #[weight = <T as Config>::WeightInfo::revoke_offchain_authorization()]
        pub fn revoke_offchain_authorization(
            origin,
            signer: Signatory<T::AccountId>,
            auth: TargetIdAuthorization<T::Moment>
        ) {
            let sender = ensure_signed(origin)?;
            CallPermissions::<T>::ensure_call_permissions(&sender)?;

            match &signer {
                Signatory::Account(key) => {
                    ensure!(&sender == key, Error::<T>::KeyNotAllowed);
                }
                Signatory::Identity(id) => {
                    ensure!(Self::is_primary_key(id, &sender), Error::<T>::NotPrimaryKey);
                }
            }

            Self::deposit_event(
                RawEvent::OffChainAuthorizationRevoked(
                    auth.target_id,
                    signer.clone()
                )
            );
            <RevokeOffChainAuthorization<T>>::insert((signer, auth), true);
        }

        /// Add `Claim::InvestorUniqueness` claim for a given target identity.
        ///
        /// # <weight>
        ///  Weight of the this extrinsic is depend on the computation that used to validate
        ///  the proof of claim, which will be a constant independent of user inputs.
        /// # </weight>
        ///
        /// # Arguments
        /// * origin - Who provides the claim to the user? In this case, it's the user's account id as the user provides.
        /// * target - `IdentityId` to which the claim gets assigned.
        /// * claim - `InvestorUniqueness` claim details.
        /// * proof - To validate the self attestation.
        /// * expiry - Expiry of claim.
        ///
        /// # Errors
        /// * `DidMustAlreadyExist` Target should already been a part of the ecosystem.
        /// * `ClaimVariantNotAllowed` When origin trying to pass claim variant other than `InvestorUniqueness`.
        /// * `ConfidentialScopeClaimNotAllowed` When issuer is different from target or CDD_ID is invalid for given user.
        /// * `InvalidScopeClaim When proof is invalid.
        #[weight = <T as Config>::WeightInfo::add_investor_uniqueness_claim()]
        pub fn add_investor_uniqueness_claim(origin, target: IdentityId, claim: Claim, proof: InvestorZKProofData, expiry: Option<T::Moment>) -> DispatchResult {
            Self::base_add_investor_uniqueness_claim(origin, target, claim, None, proof.into(), expiry)
        }

        /// Assuming this is executed by the GC voting majority, adds a new cdd claim record.
        #[weight = (<T as Config>::WeightInfo::add_claim(), Operational, Pays::Yes)]
        pub fn gc_add_cdd_claim(
            origin,
            target: IdentityId,
        ) {
            T::GCVotingMajorityOrigin::ensure_origin(origin)?;
            Self::add_systematic_cdd_claims(&[target], SystematicIssuers::Committee);
        }

        /// Assuming this is executed by the GC voting majority, removes an existing cdd claim record.
        #[weight = (<T as Config>::WeightInfo::add_claim(), Operational, Pays::Yes)]
        pub fn gc_revoke_cdd_claim(origin, target: IdentityId) -> DispatchResult {
            T::GCVotingMajorityOrigin::ensure_origin(origin)?;
            Self::base_revoke_claim(target, ClaimType::CustomerDueDiligence, GC_DID, None)
        }

        #[weight = <T as Config>::WeightInfo::add_investor_uniqueness_claim_v2()]
        pub fn add_investor_uniqueness_claim_v2(origin, target: IdentityId, scope: Scope, claim: Claim, proof: ScopeClaimProof, expiry: Option<T::Moment>) -> DispatchResult {
            Self::base_add_investor_uniqueness_claim(origin, target, claim, Some(scope), proof.into(), expiry)
        }

        /// Revokes a specific claim using its [Claim Unique Index](/pallet_identity/index.html#claim-unique-index) composed by `target`,
        /// `claim_type`, and `scope`.
        ///
        /// Please note that `origin` must be the issuer of the target claim.
        ///
        /// # Errors
        /// - `TargetHasNonZeroBalanceAtScopeId` when you try to revoke a `InvestorUniqueness*`
        /// claim, and `target` identity still have any balance on the given `scope`.
        #[weight = (<T as Config>::WeightInfo::revoke_claim_by_index(), revoke_claim_class(*claim_type))]
        pub fn revoke_claim_by_index(origin, target: IdentityId, claim_type: ClaimType, scope: Option<Scope>) -> DispatchResult {
            let issuer = Self::ensure_perms(origin)?;
            Self::base_revoke_claim(target, claim_type, issuer, scope)
        }
    }
}

decl_error! {
    pub enum Error for Module<T: Config> {
        /// One secondary or primary key can only belong to one DID
        AlreadyLinked,
        /// Missing current identity on the transaction
        MissingCurrentIdentity,
        /// Signatory is not pre authorized by the identity
        Unauthorized,
        /// Account Id cannot be extracted from signer
        InvalidAccountKey,
        /// Only CDD service providers are allowed.
        UnAuthorizedCddProvider,
        /// An invalid authorization from the owner.
        InvalidAuthorizationFromOwner,
        /// An invalid authorization from the CDD provider.
        InvalidAuthorizationFromCddProvider,
        /// Attestation was not by a CDD service provider.
        NotCddProviderAttestation,
        /// Authorizations are not for the same DID.
        AuthorizationsNotForSameDids,
        /// The DID must already exist.
        DidMustAlreadyExist,
        /// Current identity cannot be forwarded, it is not a secondary key of target identity.
        CurrentIdentityCannotBeForwarded,
        /// The offchain authorization has expired.
        AuthorizationExpired,
        /// The target DID has no valid CDD.
        TargetHasNoCdd,
        /// Authorization has been explicitly revoked.
        AuthorizationHasBeenRevoked,
        /// An invalid authorization signature.
        InvalidAuthorizationSignature,
        /// This key is not allowed to execute a given operation.
        KeyNotAllowed,
        /// Only the primary key is allowed to revoke an Identity Signatory off-chain authorization.
        NotPrimaryKey,
        /// The DID does not exist.
        DidDoesNotExist,
        /// The DID already exists.
        DidAlreadyExists,
        /// The secondary keys contain the primary key.
        SecondaryKeysContainPrimaryKey,
        /// Couldn't charge fee for the transaction.
        FailedToChargeFee,
        /// Signer is not a secondary key of the provided identity
        NotASigner,
        /// Cannot convert a `T::AccountId` to `AnySignature::Signer::AccountId`.
        CannotDecodeSignerAccountId,
        /// Multisig can not be unlinked from an identity while it still holds POLYX
        MultiSigHasBalance,
        /// Confidential Scope claims can be added by an Identity to it-self.
        ConfidentialScopeClaimNotAllowed,
        /// Addition of a new scope claim gets invalidated.
        InvalidScopeClaim,
        /// Try to add a claim variant using un-designated extrinsic.
        ClaimVariantNotAllowed,
        /// Try to delete the IU claim even when the user has non zero balance at given scopeId.
        TargetHasNonZeroBalanceAtScopeId,
        /// CDDId should be unique & same within all cdd claims possessed by a DID.
        CDDIdNotUniqueForIdentity,
        /// Non systematic CDD providers can not create default cdd_id claims.
        InvalidCDDId,
        /// Do not allow forwarded call to be called recursively
        RecursionNotAllowed,
        /// Claim and Proof versions are different.
        ClaimAndProofVersionsDoNotMatch,
        /// The account key is being used, it can't be unlinked.
        AccountKeyIsBeingUsed
    }
}

impl<T: Config> Module<T> {
    /// Only used by `create_asset` since `AssetDidRegistered` is defined here instead of there.
    pub fn commit_token_did(did: IdentityId, ticker: Ticker) {
        <DidRecords<T>>::insert(did, DidRecord::default());
        Self::deposit_event(RawEvent::AssetDidRegistered(did, ticker));
    }

    pub fn ensure_no_id_record(id: IdentityId) -> DispatchResult {
        ensure!(!Self::is_identity_exists(&id), Error::<T>::DidAlreadyExists);
        Ok(())
    }

    /// Increment the reference counter for `key`.
    pub fn add_account_key_ref_count(key: &T::AccountId) {
        <AccountKeyRefCount<T>>::mutate(key, |n| *n = n.saturating_add(1_u64));
    }

    /// Decrement the reference counter for `key`.
    pub fn remove_account_key_ref_count(key: &T::AccountId) {
        <AccountKeyRefCount<T>>::mutate(key, |n| *n = n.saturating_sub(1_u64));
    }

    /// Ensure that the account key is safe to unlink from it's identity.
    fn ensure_key_unlinkable_from_did(key: &T::AccountId) -> DispatchResult {
        ensure!(
            <AccountKeyRefCount<T>>::get(key) == 0,
            Error::<T>::AccountKeyIsBeingUsed
        );
        Ok(())
    }

    /// Returns `Err(DidDoesNotExist)` unless `id` has an associated record.
    fn ensure_id_record_exists(id: IdentityId) -> DispatchResult {
        ensure!(Self::is_identity_exists(&id), Error::<T>::DidDoesNotExist);
        Ok(())
    }

    /// Accepts an auth to join an identity as a signer
    pub fn join_identity(signer: Signatory<T::AccountId>, auth_id: u64) -> DispatchResult {
        Self::accept_auth_with(&signer, auth_id, |data, target_did| {
            let permissions = extract_auth!(data, JoinIdentity(p));
            // Not really needed unless we allow identities to be deleted.
            Self::ensure_id_record_exists(target_did)?;

            let charge_fee = || {
                T::ProtocolFee::charge_fee(ProtocolOp::IdentityAddSecondaryKeysWithAuthorization)
            };

            // Link the secondary key.
            match &signer {
                Signatory::Account(key) => {
                    Self::ensure_key_did_unlinked(key)?;
                    // Check that the new Identity has a valid CDD claim.
                    ensure!(Self::has_valid_cdd(target_did), Error::<T>::TargetHasNoCdd);
                    // Charge the protocol fee after all checks.
                    charge_fee()?;
                    // Update current did of the transaction to the newly joined did.
                    // This comes handy when someone uses a batch transaction to leave their identity,
                    // join another identity, and then do something as the new identity.
                    T::CddHandler::set_current_identity(&target_did);

                    Self::link_account_key_to_did(key, target_did);
                }
                Signatory::Identity(_) => {
                    // Check if secondary keys already contains this signer.
                    ensure!(
                        !<DidRecords<T>>::get(target_did).contains_secondary_key(&signer),
                        Error::<T>::AlreadyLinked
                    );
                    // Charge the protocol fee after all checks.
                    charge_fee()?;
                }
            }

            Self::unsafe_join_identity(target_did, permissions, &signer);
            Ok(())
        })
    }

    /// Ensure `key` isn't linked to a DID.
    pub fn ensure_key_did_unlinked(key: &T::AccountId) -> DispatchResult {
        ensure!(
            Self::can_link_account_key_to_did(key),
            Error::<T>::AlreadyLinked
        );
        Ok(())
    }

    /// Joins an identity as signer
    pub fn unsafe_join_identity(
        target_did: IdentityId,
        permissions: Permissions,
        signer: &Signatory<T::AccountId>,
    ) {
        // Link the secondary key.
        let sk = SecondaryKey::new(signer.clone(), permissions);
        <DidRecords<T>>::mutate(target_did, |identity| {
            identity.add_secondary_keys(iter::once(sk.clone()));
        });
        Self::deposit_event(RawEvent::SecondaryKeysAdded(target_did, vec![sk.into()]));
    }

    /// Adds an authorization.
    pub fn add_auth(
        from: IdentityId,
        target: Signatory<T::AccountId>,
        authorization_data: AuthorizationData<T::AccountId>,
        expiry: Option<T::Moment>,
    ) -> u64 {
        let new_nonce = Self::multi_purpose_nonce() + 1u64;
        MultiPurposeNonce::put(&new_nonce);

        let auth = Authorization {
            authorization_data: authorization_data.clone(),
            authorized_by: from,
            expiry,
            auth_id: new_nonce,
        };

        <Authorizations<T>>::insert(target.clone(), new_nonce, auth);
        <AuthorizationsGiven<T>>::insert(from, new_nonce, target.clone());

        // This event is split in order to help the event harvesters.
        Self::deposit_event(RawEvent::AuthorizationAdded(
            from,
            target.as_identity().cloned(),
            target.as_account().cloned(),
            new_nonce,
            authorization_data,
            expiry,
        ));

        new_nonce
    }

    /// Removes any authorization. No questions asked.
    /// NB: Please do all the required checks before calling this function.
    fn unsafe_remove_auth(
        target: &Signatory<T::AccountId>,
        auth_id: u64,
        authorizer: &IdentityId,
        revoked: bool,
    ) {
        <Authorizations<T>>::remove(target, auth_id);
        <AuthorizationsGiven<T>>::remove(authorizer, auth_id);
        let id = target.as_identity().cloned();
        let acc = target.as_account().cloned();
        let event = if revoked {
            RawEvent::AuthorizationRevoked
        } else {
            RawEvent::AuthorizationRejected
        };
        Self::deposit_event(event(id, acc, auth_id))
    }

    /// Given that `auth_by` is the DID that issued an authorization,
    /// ensure that it matches `from`, or otherwise return an error.
    pub fn ensure_auth_by(auth_by: IdentityId, from: IdentityId) -> DispatchResult {
        ensure!(auth_by == from, AuthorizationError::Unauthorized);
        Ok(())
    }

    /// Accepts an authorization `auth_id` as `target`,
    /// executing `accepter` for case-specific additional validation and storage changes.
    pub fn accept_auth_with(
        target: &Signatory<T::AccountId>,
        auth_id: u64,
        accepter: impl FnOnce(AuthorizationData<T::AccountId>, IdentityId) -> DispatchResult,
    ) -> DispatchResult {
        // Extract authorization.
        let auth = Self::ensure_authorization(target, auth_id)?;

        // Ensure that `auth.expiry`, if provided, is in the future.
        if let Some(expiry) = auth.expiry {
            let now = <pallet_timestamp::Module<T>>::get();
            ensure!(expiry > now, AuthorizationError::Expired);
        }

        // Run custom per-type validation and updates.
        accepter(auth.authorization_data, auth.authorized_by)?;

        // Remove authorization from storage and emit event.
        <Authorizations<T>>::remove(&target, auth_id);
        <AuthorizationsGiven<T>>::remove(auth.authorized_by, auth_id);
        Self::deposit_event(RawEvent::AuthorizationConsumed(
            target.as_identity().cloned(),
            target.as_account().cloned(),
            auth_id,
        ));
        Ok(())
    }

    /// Return and ensure that there's an authorization `auth_id` for `target`.
    fn ensure_authorization(
        target: &Signatory<T::AccountId>,
        auth_id: u64,
    ) -> Result<Authorization<T::AccountId, T::Moment>, DispatchError> {
        Self::maybe_authorization(target, auth_id).ok_or_else(|| AuthorizationError::Invalid.into())
    }

    /// Returns the authorization `auth_id` for `target`, if any.
    fn maybe_authorization(
        target: &Signatory<T::AccountId>,
        auth_id: u64,
    ) -> Option<Authorization<T::AccountId, T::Moment>> {
        <Authorizations<T>>::contains_key(target, auth_id)
            .then(|| <Authorizations<T>>::get(target, auth_id))
    }

    /// Accepts a primary key rotation.
    fn accept_primary_key_rotation(
        origin: T::Origin,
        rotation_auth_id: u64,
        optional_cdd_auth_id: Option<u64>,
    ) -> DispatchResult {
        let sender = ensure_signed(origin)?;
        let signer = Signatory::Account(sender.clone());
        Self::accept_auth_with(&signer, rotation_auth_id, |data, _| {
            let rotation_for_did = extract_auth!(data, RotatePrimaryKey(r));
            Self::unsafe_primary_key_rotation(sender, rotation_for_did, optional_cdd_auth_id)
        })
    }

    /// Processes primary key rotation.
    pub fn unsafe_primary_key_rotation(
        sender: T::AccountId,
        rotation_for_did: IdentityId,
        optional_cdd_auth_id: Option<u64>,
    ) -> DispatchResult {
        // Accept authorization from CDD service provider.
        if Self::cdd_auth_for_primary_key_rotation() {
            let auth_id = optional_cdd_auth_id
                .ok_or_else(|| Error::<T>::InvalidAuthorizationFromCddProvider)?;

            let signer = Signatory::Account(sender.clone());
            Self::accept_auth_with(&signer, auth_id, |data, auth_by| {
                let attestation_for_did = extract_auth!(data, AttestPrimaryKeyRotation(a));
                // Attestor must be a CDD service provider.
                ensure!(
                    T::CddServiceProviders::is_member(&auth_by),
                    Error::<T>::NotCddProviderAttestation
                );
                // Ensure authorizations are for the same DID.
                ensure!(
                    rotation_for_did == attestation_for_did,
                    Error::<T>::AuthorizationsNotForSameDids
                );
                Ok(())
            })?;
        }

        Self::ensure_key_did_unlinked(&sender)?;

        // Get the current DidRecord.
        let mut record = Self::did_records(&rotation_for_did);
        let old_primary_key = record.primary_key;

        // Ensure that it is safe to unlink the primary key from the did.
        Self::ensure_key_unlinkable_from_did(&old_primary_key)?;

        // Replace primary key of the owner that initiated key rotation.
        Self::unlink_account_key_from_did(&old_primary_key, rotation_for_did);
        record.primary_key = sender.clone();
        Self::link_account_key_to_did(&sender, rotation_for_did);
        <DidRecords<T>>::insert(&rotation_for_did, record);

        Self::deposit_event(RawEvent::PrimaryKeyUpdated(
            rotation_for_did,
            old_primary_key,
            sender,
        ));
        Ok(())
    }

    /// Updates permissions of secondary items.
    /// Private and not sanitized function. It is designed to be used internally by
    /// others sanitezed functions.
    fn update_secondary_key_permissions(
        target_did: IdentityId,
        signer: &Signatory<T::AccountId>,
        permissions: Permissions,
    ) -> DispatchResult {
        Self::ensure_perms_length_limited(&permissions)?;

        <DidRecords<T>>::mutate(target_did, |record| {
            if let Some(secondary_key) = (*record)
                .secondary_keys
                .iter_mut()
                .find(|si| si.signer == *signer)
            {
                let old_perms = replace(&mut secondary_key.permissions, permissions.clone());
                Self::deposit_event(RawEvent::SecondaryKeyPermissionsUpdated(
                    target_did,
                    secondary_key.clone().into(),
                    old_perms,
                    permissions,
                ));
            }
        });

        Ok(())
    }

    /// It checks if `signer` is a secondary key of `did` identity.
    /// # IMPORTANT
    /// If secondary keys are frozen this function always returns false.
    /// Primary key cannot be frozen.
    pub fn is_signer_authorized(did: IdentityId, signer: &Signatory<T::AccountId>) -> bool {
        let record = <DidRecords<T>>::get(did);

        // Check primary id or key
        match signer {
            Signatory::Account(ref signer_key) if record.primary_key == *signer_key => true,
            Signatory::Identity(ref signer_id) if did == *signer_id => true,
            _ => {
                // Check secondary items if DID is not frozen.
                !Self::is_did_frozen(did)
                    && record.secondary_keys.iter().any(|si| si.signer == *signer)
            }
        }
    }

    /// It checks if `key` is a secondary key of `did` identity.
    pub fn is_signer(did: IdentityId, signer: &Signatory<T::AccountId>) -> bool {
        let record = <DidRecords<T>>::get(did);
        record.secondary_keys.iter().any(|si| si.signer == *signer)
    }

    /// Use `did` as reference.
    pub fn is_primary_key(did: &IdentityId, key: &T::AccountId) -> bool {
        key == &<DidRecords<T>>::get(did).primary_key
    }

    /// It returns true if `id_claim` is not expired at `moment`.
    #[inline]
    fn is_identity_claim_not_expired_at(id_claim: &IdentityClaim, moment: T::Moment) -> bool {
        if let Some(expiry) = id_claim.expiry {
            expiry > moment.saturated_into::<u64>()
        } else {
            true
        }
    }

    /// It fetches an specific `claim_type` claim type for target identity `id`, which was issued
    /// by `issuer`.
    /// It only returns non-expired claims.
    pub fn fetch_claim(
        id: IdentityId,
        claim_type: ClaimType,
        issuer: IdentityId,
        scope: Option<Scope>,
    ) -> Option<IdentityClaim> {
        let now = <pallet_timestamp::Module<T>>::get();

        Self::fetch_base_claim_with_issuer(id, claim_type, issuer, scope)
            .into_iter()
            .find(|c| Self::is_identity_claim_not_expired_at(c, now))
    }

    /// See `Self::fetch_cdd`.
    #[inline]
    pub fn has_valid_cdd(claim_for: IdentityId) -> bool {
        // It will never happen in production but helpful during testing.
        #[cfg(feature = "no_cdd")]
        if T::CddServiceProviders::get_members().is_empty() {
            return true;
        }

        Self::base_fetch_cdd(claim_for, T::Moment::zero(), None).is_some()
    }

    /// It returns the CDD identity which issued the current valid CDD claim for `claim_for`
    /// identity.
    /// # Parameters
    /// * `leeway` : This leeway is added to now() before check if claim is expired.
    ///
    /// # Safety
    ///
    /// No state change is allowed in this function because this function is used within the RPC
    /// calls.
    pub fn fetch_cdd(claim_for: IdentityId, leeway: T::Moment) -> Option<IdentityId> {
        Self::base_fetch_cdd(claim_for, leeway, None)
    }

    fn base_fetch_cdd(
        claim_for: IdentityId,
        leeway: T::Moment,
        filter_cdd_id: Option<CddId>,
    ) -> Option<IdentityId> {
        Self::base_fetch_valid_cdd_claims(claim_for, leeway, filter_cdd_id)
            .map(|id_claim| id_claim.claim_issuer)
            .next()
    }

    pub fn base_fetch_valid_cdd_claims(
        claim_for: IdentityId,
        leeway: T::Moment,
        filter_cdd_id: Option<CddId>,
    ) -> impl Iterator<Item = IdentityClaim> {
        let exp_with_leeway = <pallet_timestamp::Module<T>>::get()
            .checked_add(&leeway)
            .unwrap_or_default();

        // Supressing `mut` warning since we need mut in `runtime-benchmarks` feature but not otherwise.
        #[allow(unused_mut)]
        let mut active_cdds_temp = T::CddServiceProviders::get_active_members();

        // For the benchmarks, self cdd claims are allowed and hence the claim target is added to the cdd providers list.
        #[cfg(feature = "runtime-benchmarks")]
        active_cdds_temp.push(claim_for);

        let active_cdds = active_cdds_temp;
        let inactive_not_expired_cdds = T::CddServiceProviders::get_inactive_members()
            .into_iter()
            .filter(|cdd| !T::CddServiceProviders::is_member_expired(cdd, exp_with_leeway))
            .collect::<Vec<_>>();

        Self::fetch_base_claims(claim_for, ClaimType::CustomerDueDiligence).filter(
            move |id_claim| {
                if let Some(cdd_id) = &filter_cdd_id {
                    if let Claim::CustomerDueDiligence(claim_cdd_id) = &id_claim.claim {
                        if claim_cdd_id != cdd_id {
                            return false;
                        }
                    }
                }

                Self::is_identity_cdd_claim_valid(
                    id_claim,
                    exp_with_leeway,
                    &active_cdds,
                    &inactive_not_expired_cdds,
                )
            },
        )
    }

    /// A CDD claims is considered valid if:
    /// * Claim is not expired at `exp_with_leeway` moment.
    /// * Its issuer is valid, that means:
    ///   * Issuer is an active CDD provider, or
    ///   * Issuer is an inactive CDD provider but claim was updated/created before that it was
    ///   deactivated.
    fn is_identity_cdd_claim_valid(
        id_claim: &IdentityClaim,
        exp_with_leeway: T::Moment,
        active_cdds: &[IdentityId],
        inactive_not_expired_cdds: &[InactiveMember<T::Moment>],
    ) -> bool {
        Self::is_identity_claim_not_expired_at(id_claim, exp_with_leeway)
            && (active_cdds.contains(&id_claim.claim_issuer)
                || SYSTEMATIC_ISSUERS
                    .iter()
                    .any(|si| si.as_id() == id_claim.claim_issuer)
                || inactive_not_expired_cdds
                    .iter()
                    .filter(|cdd| cdd.id == id_claim.claim_issuer)
                    .any(|cdd| {
                        id_claim.last_update_date < cdd.deactivated_at.saturated_into::<u64>()
                    }))
    }

    /// It iterates over all claims of type `claim_type` for target `id` identity.
    /// Please note that it could return expired claims.
    fn fetch_base_claims<'a>(
        target: IdentityId,
        claim_type: ClaimType,
    ) -> impl Iterator<Item = IdentityClaim> + 'a {
        Claims::iter_prefix_values(Claim1stKey { target, claim_type })
    }

    /// It fetches an specific `claim_type` claim type for target identity `id`, which was issued
    /// by `issuer`.
    fn fetch_base_claim_with_issuer(
        target: IdentityId,
        claim_type: ClaimType,
        issuer: IdentityId,
        scope: Option<Scope>,
    ) -> Option<IdentityClaim> {
        let pk = Claim1stKey { target, claim_type };
        let sk = Claim2ndKey { issuer, scope };
        Claims::contains_key(&pk, &sk).then(|| Claims::get(&pk, &sk))
    }

    /// It checks that `sender` is the primary key of `did` Identifier and that
    /// did exists.
    /// # Return
    /// A result object containing the `DidRecord` of `did`.
    pub fn grant_check_only_primary_key(
        sender: &T::AccountId,
        did: IdentityId,
    ) -> Result<DidRecord<T::AccountId>, DispatchError> {
        Self::ensure_id_record_exists(did)?;
        let record = <DidRecords<T>>::get(did);
        ensure!(*sender == record.primary_key, Error::<T>::KeyNotAllowed);
        Ok(record)
    }

    /// It checks if `key` is the primary key or secondary key of any IdentityId.
    /// Please note that _frozen secondary keys_ are not lined to the frozen identity temporary.
    ///
    /// # Return
    ///
    /// An Option object containing the `IdentityId` that belongs to the key.
    pub fn get_identity(key: &T::AccountId) -> Option<IdentityId> {
        if <KeyToIdentityIds<T>>::contains_key(key) {
            let did = <KeyToIdentityIds<T>>::get(key);
            if !Self::is_did_frozen(did) || Self::is_primary_key(&did, key) {
                return Some(did);
            }
        }
        None
    }

    /// It freezes/unfreezes the target `did` identity.
    ///
    /// # Errors
    /// Only primary key can freeze/unfreeze an identity.
    fn set_frozen_secondary_key_flags(origin: T::Origin, freeze: bool) -> DispatchResult {
        let data = Self::ensure_origin_call_permissions(origin)?;
        let did = data.primary_did;
        let _ = Self::grant_check_only_primary_key(&data.sender, did)?;

        let event = if freeze {
            IsDidFrozen::insert(&did, true);
            RawEvent::SecondaryKeysFrozen
        } else {
            IsDidFrozen::remove(&did);
            RawEvent::SecondaryKeysUnfrozen
        };
        Self::deposit_event(event(did));
        Ok(())
    }

    /// Checks that a key is not linked to any identity or multisig.
    pub fn can_link_account_key_to_did(key: &T::AccountId) -> bool {
        !<KeyToIdentityIds<T>>::contains_key(key) && !T::MultiSig::is_signer(key)
    }

    /// Links a primary or secondary `AccountId` key `key` to an identity `did`.
    ///
    /// This function applies the change if `can_link_account_key_to_did` returns `true`.
    /// Otherwise, it does nothing.
    pub fn link_account_key_to_did(key: &T::AccountId, did: IdentityId) {
        if !<KeyToIdentityIds<T>>::contains_key(key) {
            // `key` is not yet linked to any identity, so no constraints.
            <KeyToIdentityIds<T>>::insert(key, did);
        }
    }

    /// Unlinks an `AccountId` key `key` from an identity `did`.
    fn unlink_account_key_from_did(key: &T::AccountId, did: IdentityId) {
        if <KeyToIdentityIds<T>>::contains_key(key) && <KeyToIdentityIds<T>>::get(key) == did {
            <KeyToIdentityIds<T>>::remove(key)
        }
    }

    /// IMPORTANT: No state change is allowed in this function
    /// because this function is used within the RPC calls
    /// It is a helper function that can be used to get did for any asset
    pub fn get_token_did(ticker: &Ticker) -> Result<IdentityId, &'static str> {
        let mut buf = SECURITY_TOKEN.encode();
        buf.append(&mut ticker.encode());
        IdentityId::try_from(T::Hashing::hash(&buf[..]).as_ref())
    }

    /// Registers a did without adding a CDD claim for it.
    pub fn _register_did(
        sender: T::AccountId,
        secondary_keys: Vec<SecondaryKey<T::AccountId>>,
        protocol_fee_data: Option<ProtocolOp>,
    ) -> Result<IdentityId, DispatchError> {
        // Adding extrensic count to did nonce for some unpredictability
        // NB: this does not guarantee randomness
        let new_nonce =
            Self::multi_purpose_nonce() + u64::from(<system::Module<T>>::extrinsic_count()) + 7u64;
        // Even if this transaction fails, nonce should be increased for added unpredictability of dids
        MultiPurposeNonce::put(&new_nonce);

        // 1 Check constraints.
        // Primary key is not linked to any identity.
        Self::ensure_key_did_unlinked(&sender)?;
        // Primary key is not part of secondary keys.
        ensure!(
            !secondary_keys
                .iter()
                .any(|sk| sk.signer.as_account() == Some(&sender)),
            Error::<T>::SecondaryKeysContainPrimaryKey
        );

        let block_hash = <system::Module<T>>::block_hash(<system::Module<T>>::block_number());
        let did = IdentityId(blake2_256(&(USER, block_hash, new_nonce).encode()));

        // Make sure there's no pre-existing entry for the DID
        // This should never happen but just being defensive here
        Self::ensure_no_id_record(did)?;

        // Secondary keys can be linked to the new identity.
        for sk in &secondary_keys {
            if let Signatory::Account(ref key) = sk.signer {
                Self::ensure_key_did_unlinked(key)?;
            }
        }

        // Charge the given fee.
        if let Some(op) = protocol_fee_data {
            T::ProtocolFee::charge_fee(op)?;
        }

        // 2. Apply changes to our extrinsic.
        // 2.1. Link primary key and add pre-authorized secondary keys.
        Self::link_account_key_to_did(&sender, did);
        secondary_keys.iter().for_each(|sk| {
            let data = AuthorizationData::JoinIdentity(sk.permissions.clone().into());
            Self::add_auth(did, sk.signer.clone(), data, None);
        });

        // 2.2. Create a new identity record.
        let record = DidRecord {
            primary_key: sender.clone(),
            ..Default::default()
        };
        <DidRecords<T>>::insert(&did, record);

        // 2.3. Give 100k POLYX to the primary key for testing.
        // TODO: Remove before mainnet.
        T::Balances::deposit_creating(&sender, T::InitialPOLYX::get().into());

        Self::deposit_event(RawEvent::DidCreated(
            did,
            sender,
            secondary_keys
                .into_iter()
                .map(secondary_key::api::SecondaryKey::from)
                .collect(),
        ));
        Ok(did)
    }

    /// Ensures length limits are enforced in `perms`.
    fn ensure_perms_length_limited(perms: &Permissions) -> DispatchResult {
        ensure_length_ok::<T>(perms.asset.complexity())?;
        ensure_length_ok::<T>(perms.portfolio.complexity())?;
        Self::ensure_extrinsic_perms_length_limited(&perms.extrinsic)
    }

    /// Ensures length limits are enforced in `perms`.
    pub fn ensure_extrinsic_perms_length_limited(perms: &ExtrinsicPermissions) -> DispatchResult {
        if let Some(set) = perms.inner() {
            ensure_length_ok::<T>(set.len())?;
            for elem in set {
                ensure_string_limited::<T>(&elem.pallet_name)?;
                if let Some(set) = elem.dispatchable_names.inner() {
                    ensure_length_ok::<T>(set.len())?;
                    for elem in set {
                        ensure_string_limited::<T>(elem)?;
                    }
                }
            }
        }
        Ok(())
    }

    /// It adds a new claim without any previous security check.
    pub fn base_add_claim(
        target: IdentityId,
        claim: Claim,
        issuer: IdentityId,
        expiry: Option<T::Moment>,
    ) {
        let inner_scope = claim.as_scope().cloned();
        Self::base_add_claim_with_scope(target, claim, inner_scope, issuer, expiry)
    }

    /// Adds claims with no inner scope.
    fn base_add_claim_with_scope(
        target: IdentityId,
        claim: Claim,
        scope: Option<Scope>,
        issuer: IdentityId,
        expiry: Option<T::Moment>,
    ) {
        let claim_type = claim.claim_type();
        let last_update_date = <pallet_timestamp::Module<T>>::get().saturated_into::<u64>();
        let issuance_date = Self::fetch_claim(target, claim_type, issuer, scope.clone())
            .map_or(last_update_date, |id_claim| id_claim.issuance_date);

        let expiry = expiry.map(|m| m.saturated_into::<u64>());
        let (pk, sk) = Self::get_claim_keys(target, claim_type, issuer, scope);
        let id_claim = IdentityClaim {
            claim_issuer: issuer,
            issuance_date,
            last_update_date,
            expiry,
            claim,
        };

        Claims::insert(&pk, &sk, id_claim.clone());
        Self::deposit_event(RawEvent::ClaimAdded(target, id_claim));
    }

    /// Returns claim keys.
    pub fn get_claim_keys(
        target: IdentityId,
        claim_type: ClaimType,
        issuer: IdentityId,
        scope: Option<Scope>,
    ) -> (Claim1stKey, Claim2ndKey) {
        let pk = Claim1stKey { target, claim_type };
        let sk = Claim2ndKey { issuer, scope };
        (pk, sk)
    }

    /// It ensures that CDD claim issuer is a valid CDD provider before add the claim.
    ///
    /// # Errors
    /// - 'UnAuthorizedCddProvider' is returned if `issuer` is not a CDD provider.
    fn base_add_cdd_claim(
        target: IdentityId,
        claim: Claim,
        issuer: IdentityId,
        expiry: Option<T::Moment>,
    ) -> DispatchResult {
        Self::ensure_authorized_cdd_provider(issuer)?;
        // Ensure cdd_id uniqueness for a given target DID.
        Self::ensure_cdd_id_validness(&claim, issuer, target)?;

        Self::base_add_claim(target, claim, issuer, expiry);
        Ok(())
    }

    /// Enforce CDD_ID uniqueness for a given target DID and make sure only Systematic CDD providers can use default CDDId.
    ///
    /// # Errors
    /// - `CDDIdNotUniqueForIdentity` is returned when new cdd claim's cdd_id doesn't match the existing cdd claim's cdd_id.
    /// - `InvalidCDDId` is returned when a non Systematic CDD provider adds the default cdd_id claim.
    fn ensure_cdd_id_validness(
        claim: &Claim,
        issuer: IdentityId,
        target: IdentityId,
    ) -> DispatchResult {
        if let Claim::CustomerDueDiligence(cdd_id) = claim {
            if cdd_id.is_default_cdd() {
                ensure!(
                    SYSTEMATIC_ISSUERS.iter().any(|si| si.as_id() == issuer),
                    Error::<T>::InvalidCDDId
                );
            } else {
                ensure!(
                    !Self::base_fetch_valid_cdd_claims(target, 0u32.into(), None).any(|id_claim| {
                        if let Claim::CustomerDueDiligence(c_id) = id_claim.claim {
                            return !c_id.is_default_cdd() && c_id != *cdd_id;
                        }
                        true
                    }),
                    Error::<T>::CDDIdNotUniqueForIdentity
                );
            }
        }
        Ok(())
    }

    /// Decodes needed fields from `claim` and `proof`, and ensures that both are in the same
    /// version.
    ///
    /// # Errors
    /// - `ClaimVariantNotAllowed` if `claim` is not a `Claim::InvestorUniqueness` neither
    /// `Claim::InvestorUniquenessV2`.
    /// - `ClaimAndProofVersionsDoNotMatch` if `claim` and `proof` are different versions.
    fn decode_investor_uniqueness_claim<'a>(
        claim: &'a Claim,
        proof: &'_ InvestorZKProof,
        scope: Option<&'a Scope>,
    ) -> Result<(&'a Scope, ScopeId, &'a CddId), DispatchError> {
        let decode = match &claim {
            Claim::InvestorUniqueness(scope, scope_id, cdd_id) => {
                ensure!(
                    matches!(proof, InvestorZKProof::V1(..)),
                    Error::<T>::ClaimAndProofVersionsDoNotMatch
                );
                (scope, scope_id.clone(), cdd_id)
            }
            Claim::InvestorUniquenessV2(cdd_id) => match proof {
                InvestorZKProof::V2(inner_proof) => (
                    scope.ok_or(Error::<T>::InvalidScopeClaim)?,
                    inner_proof.0.scope_id.compress().to_bytes().into(),
                    cdd_id,
                ),
                _ => fail!(Error::<T>::ClaimAndProofVersionsDoNotMatch),
            },
            _ => fail!(Error::<T>::ClaimVariantNotAllowed),
        };

        Ok(decode)
    }

    /// # Errors
    /// - 'ConfidentialScopeClaimNotAllowed` if :
    ///     - Sender is not the issuer. That claim can be only added by your-self.
    ///     - You are not the owner of that CDD_ID.
    ///     - If claim is not valid.
    ///
    fn base_add_investor_uniqueness_claim(
        origin: T::Origin,
        target: IdentityId,
        claim: Claim,
        scope_opt: Option<Scope>,
        proof: InvestorZKProof,
        expiry: Option<T::Moment>,
    ) -> DispatchResult {
        // Decode needed fields and ensures `claim` is `InvestorUniqueness*`.
        let (scope, scope_id, cdd_id) =
            Self::decode_investor_uniqueness_claim(&claim, &proof, scope_opt.as_ref())?;

        // Only owner of the identity can add that confidential claim.
        let issuer = Self::ensure_signed_and_validate_claim_target(origin, target)?;
        ensure!(
            issuer == target,
            Error::<T>::ConfidentialScopeClaimNotAllowed
        );
        // Verify the owner of that CDD_ID.
        ensure!(
            Self::base_fetch_cdd(target, T::Moment::zero(), Some(*cdd_id)).is_some(),
            Error::<T>::ConfidentialScopeClaimNotAllowed
        );

        // Verify the confidential claim.
        ensure!(
            valid_proof_of_investor::evaluate_claim(scope, &claim, &target, &proof),
            Error::<T>::InvalidScopeClaim
        );

        if let Scope::Ticker(ticker) = scope {
            // Update the balance of the IdentityId under the ScopeId provided in claim data.
            T::AssetSubTraitTarget::update_balance_of_scope_id(scope_id, target, *ticker);
        }

        let scope = Some(scope.clone());
        Self::base_add_claim_with_scope(target, claim, scope, issuer, expiry);
        Ok(())
    }

    /// Does the identity given by `did` exist?
    pub fn is_identity_exists(did: &IdentityId) -> bool {
        <DidRecords<T>>::contains_key(did)
    }

    /// Returns the record corresponding to `id`, if it exists.
    fn identity_record_of(did: IdentityId) -> Option<DidRecord<T::AccountId>> {
        Self::is_identity_exists(&did).then(|| <DidRecords<T>>::get(did))
    }

    /// It removes a claim from `target` which was issued by `issuer` without any security check.
    fn base_revoke_claim(
        target: IdentityId,
        claim_type: ClaimType,
        issuer: IdentityId,
        scope: Option<Scope>,
    ) -> DispatchResult {
        let (pk, sk) = Self::get_claim_keys(target, claim_type, issuer, scope);

        let investor_unique_scope_id = match Claims::get(&pk, &sk).claim {
            Claim::InvestorUniqueness(_, scope_id, _) => Some(scope_id),
            Claim::InvestorUniquenessV2(..) => match &sk.scope {
                Some(Scope::Ticker(ticker)) => {
                    Some(T::AssetSubTraitTarget::scope_id_of(ticker, &target))
                }
                _ => None,
            },
            _ => None,
        };

        // Only if claim is a `InvestorUniqueness*`.
        if let Some(scope_id) = investor_unique_scope_id {
            // Ensure the target is the issuer of the claim.
            ensure!(
                target == issuer,
                Error::<T>::ConfidentialScopeClaimNotAllowed
            );

            // Ensure that the target has balance at scope = 0.
            ensure!(
                T::AssetSubTraitTarget::balance_of_at_scope(&scope_id, &target) == Zero::zero(),
                Error::<T>::TargetHasNonZeroBalanceAtScopeId
            );
        }

        let claim = Claims::take(&pk, &sk);
        Self::deposit_event(RawEvent::ClaimRevoked(target, claim));
        Ok(())
    }

    /// Returns an auth id if it is present and not expired.
    pub fn get_non_expired_auth(
        target: &Signatory<T::AccountId>,
        auth_id: &u64,
    ) -> Option<Authorization<T::AccountId, T::Moment>> {
        Self::maybe_authorization(target, *auth_id).filter(|auth| {
            auth.expiry
                .filter(|&expiry| <pallet_timestamp::Module<T>>::get() > expiry)
                .is_none()
        })
    }

    /// Returns identity of a signatory
    pub fn get_identity_of_signatory(signer: &Signatory<T::AccountId>) -> Option<IdentityId> {
        match signer {
            Signatory::Account(key) => Self::get_identity(&key),
            Signatory::Identity(did) => Some(*did),
        }
    }

    fn leave_identity(signer: Signatory<T::AccountId>, did: IdentityId) -> DispatchResult {
        ensure!(Self::is_signer(did, &signer), Error::<T>::NotASigner);

        if let Signatory::Account(key) = &signer {
            // Ensure that it is safe to unlink the account key from the did.
            Self::ensure_key_unlinkable_from_did(&key)?;

            // Unlink multisig signers.
            if T::MultiSig::is_multisig(key) {
                ensure!(
                    T::Balances::total_balance(key).is_zero(),
                    Error::<T>::MultiSigHasBalance
                );
                // Unlink multisig signers from the identity.
                Self::unlink_multisig_signers_from_did(T::MultiSig::get_key_signers(key), did);
            }
            Self::unlink_account_key_from_did(key, did);
        }
        // Update secondary keys at Identity.
        <DidRecords<T>>::mutate(did, |record| {
            record.remove_secondary_keys(&[signer.clone()]);
        });
        Self::deposit_event(RawEvent::SignerLeft(did, signer));
        Ok(())
    }

    fn unlink_multisig_signers_from_did(signers: Vec<T::AccountId>, did: IdentityId) {
        for signer in signers {
            Self::unlink_account_key_from_did(&signer, did)
        }
    }

    /// Ensure that the origin is signed and that the given `target` is already in the system.
    fn ensure_signed_and_validate_claim_target(
        origin: T::Origin,
        target: IdentityId,
    ) -> Result<IdentityId, DispatchError> {
        let primary_did = Self::ensure_perms(origin)?;
        ensure!(
            <DidRecords<T>>::contains_key(target),
            Error::<T>::DidMustAlreadyExist
        );
        Ok(primary_did)
    }

    /// Checks whether the sender and the receiver of a transfer have valid investor uniqueness claims for a given ticker
    pub fn verify_iu_claims_for_transfer(
        ticker: Ticker,
        from_did: IdentityId,
        to_did: IdentityId,
    ) -> bool {
        let asset_scope = Some(Scope::from(ticker));
        Self::base_verify_iu_claim(asset_scope.clone(), from_did)
            && Self::base_verify_iu_claim(asset_scope, to_did)
    }

    /// Checks whether the identity has a valid investor uniqueness claim for a given ticker
    pub fn verify_iu_claim(ticker: Ticker, did: IdentityId) -> bool {
        let asset_scope = Some(Scope::from(ticker));
        Self::base_verify_iu_claim(asset_scope, did)
    }

    fn base_verify_iu_claim(scope: Option<Scope>, did: IdentityId) -> bool {
        Self::fetch_claim(did, ClaimType::InvestorUniqueness, did, scope.clone()).is_some()
            || Self::fetch_claim(did, ClaimType::InvestorUniquenessV2, did, scope).is_some()
    }
}

impl<T: Config> Module<T> {
    /// RPC call to fetch some aggregate account data for fewer round trips.
    pub fn get_key_identity_data(acc: T::AccountId) -> Option<types::KeyIdentityData<IdentityId>> {
        let identity = Self::get_identity(&acc)?;
        let record = <DidRecords<T>>::get(identity);
        let permissions = if acc == record.primary_key {
            None
        } else {
            Some(record.secondary_keys.into_iter().find_map(|sk| {
                sk.signer.as_account().filter(|&a| a == &acc)?;
                Some(sk.permissions)
            })?)
        };
        Some(types::KeyIdentityData {
            identity,
            permissions,
        })
    }

    /// RPC call to know whether the given did has valid cdd claim or not
    pub fn is_identity_has_valid_cdd(
        target: IdentityId,
        leeway: Option<T::Moment>,
    ) -> Option<IdentityId> {
        Self::fetch_cdd(target, leeway.unwrap_or_default())
    }

    /// RPC call to query the given ticker did
    pub fn get_asset_did(ticker: Ticker) -> Result<IdentityId, &'static str> {
        Self::get_token_did(&ticker)
    }

    /// Retrieve DidRecords for `did`
    pub fn get_did_records(
        did: IdentityId,
    ) -> RpcDidRecords<T::AccountId, SecondaryKey<T::AccountId>> {
        if let Some(record) = Self::identity_record_of(did) {
            RpcDidRecords::Success {
                primary_key: record.primary_key,
                secondary_keys: record.secondary_keys,
            }
        } else {
            RpcDidRecords::IdNotFound
        }
    }

    /// Use to get the filtered authorization data for a given signatory
    /// - if auth_type is None then return authorizations data on the basis of the `allow_expired` boolean
    /// - if auth_type is Some(value) then return filtered authorizations on the value basis type in conjunction
    ///   with `allow_expired` boolean condition
    pub fn get_filtered_authorizations(
        signatory: Signatory<T::AccountId>,
        allow_expired: bool,
        auth_type: Option<AuthorizationType>,
    ) -> Vec<Authorization<T::AccountId, T::Moment>> {
        let now = <pallet_timestamp::Module<T>>::get();
        let auths = <Authorizations<T>>::iter_prefix_values(signatory)
            .filter(|auth| allow_expired || auth.expiry.filter(|&e| e < now).is_none());
        if let Some(auth_type) = auth_type {
            auths
                .filter(|auth| Self::get_type(auth.authorization_data.clone(), auth_type.clone()))
                .collect()
        } else {
            auths.collect()
        }
    }

    pub fn get_type(
        authorization_data: AuthorizationData<T::AccountId>,
        type_of_auth: AuthorizationType,
    ) -> bool {
        type_of_auth == authorization_data.auth_type()
    }

    pub fn get_did_status(dids: Vec<IdentityId>) -> Vec<DidStatus> {
        dids.into_iter()
            .map(|did| {
                // Does DID exist in the ecosystem?
                if !<DidRecords<T>>::contains_key(did) {
                    DidStatus::Unknown
                }
                // DID exists, but does it have a valid CDD?
                else if Self::fetch_cdd(did, T::Moment::zero()).is_some() {
                    DidStatus::CddVerified
                } else {
                    DidStatus::Exists
                }
            })
            .collect()
    }

    /// Registers the systematic issuer with its DID.
    #[allow(dead_code)]
    fn register_systematic_id(issuer: SystematicIssuers)
    where
        <T as frame_system::Config>::AccountId: core::fmt::Display,
    {
        let acc = issuer.as_module_id().into_account();
        let id = issuer.as_id();
        debug::info!(
            "Register Systematic id {} with account {} as {}",
            issuer,
            acc,
            id
        );

        Self::do_register_id(acc, id, vec![]);
    }

    /// Registers `primary_key` as `id` identity.
    #[allow(dead_code)]
    fn do_register_id(
        primary_key: T::AccountId,
        id: IdentityId,
        secondary_keys: Vec<SecondaryKey<T::AccountId>>,
    ) {
        <Module<T>>::link_account_key_to_did(&primary_key, id);
        for sk in &secondary_keys {
            if let Signatory::Account(key) = &sk.signer {
                Self::link_account_key_to_did(key, id);
            }
        }

        let record = DidRecord {
            primary_key: primary_key.clone(),
            secondary_keys,
            ..Default::default()
        };
        <DidRecords<T>>::insert(&id, record);

        Self::deposit_event(RawEvent::DidCreated(id, primary_key, vec![]));
    }

    /// It returns the list of flatten identities of the given identity.
    /// It runs recursively over all secondary items.
    pub fn flatten_identities(id: IdentityId, max_depth: u8) -> Vec<IdentityId> {
        Self::identity_record_of(id)
            .map(|identity| {
                identity
                    .secondary_keys
                    .into_iter()
                    .flat_map(|si| match si.signer {
                        Signatory::Identity(sub_id) if max_depth > 0 => {
                            Self::flatten_identities(sub_id, max_depth - 1)
                        }
                        _ => vec![],
                    })
                    .chain(core::iter::once(id))
                    .collect::<Vec<_>>()
            })
            .unwrap_or_default()
    }

    /// Checks call permissions and, if successful, returns the caller's account, primary and secondary identities.
    pub fn ensure_origin_call_permissions(
        origin: <T as frame_system::Config>::Origin,
    ) -> Result<PermissionedCallOriginData<T::AccountId>, DispatchError> {
        let sender = ensure_signed(origin)?;
        let AccountCallPermissionsData {
            primary_did,
            secondary_key,
        } = CallPermissions::<T>::ensure_call_permissions(&sender)?;
        Ok(PermissionedCallOriginData {
            sender,
            primary_did,
            secondary_key,
        })
    }

    /// Ensure `origin` is signed and permissioned for this call, returning its DID.
    pub fn ensure_perms(origin: T::Origin) -> Result<IdentityId, DispatchError> {
        Self::ensure_origin_call_permissions(origin).map(|x| x.primary_did)
    }

    /// Ensures that the did is an active CDD Provider.
    fn ensure_authorized_cdd_provider(did: IdentityId) -> DispatchResult {
        ensure!(
            T::CddServiceProviders::get_members().contains(&did),
            Error::<T>::UnAuthorizedCddProvider
        );
        Ok(())
    }

    /// Ensures that the caller is an active CDD provider and creates a new did for the target.
    /// This function returns the new did of the target.
    ///
    /// # Failure
    /// - `origin` has to be a active CDD provider. Inactive CDD providers cannot add new
    /// claims.
    /// - `target_account` (primary key of the new Identity) can be linked to just one and only
    /// one identity.
    /// - External secondary keys can be linked to just one identity.
    pub fn base_cdd_register_did(
        caller_did: IdentityId,
        target_account: T::AccountId,
        secondary_keys: Vec<SecondaryKey<T::AccountId>>,
    ) -> Result<IdentityId, DispatchError> {
        // Sender has to be part of CDDProviders
        Self::ensure_authorized_cdd_provider(caller_did)?;

        // Register Identity
        Self::_register_did(
            target_account,
            secondary_keys,
            Some(ProtocolOp::IdentityCddRegisterDid),
        )
    }

    #[cfg(feature = "runtime-benchmarks")]
    /// Links a did with an identity
    pub fn link_did(account: T::AccountId, did: IdentityId) {
        let record = DidRecord {
            primary_key: account.clone(),
            ..Default::default()
        };
        KeyToIdentityIds::<T>::insert(&account, did);
        DidRecords::<T>::insert(&did, record);
    }

    #[cfg(feature = "runtime-benchmarks")]
    /// Sets the current did in the context
    pub fn set_context_did(did: Option<IdentityId>) {
        Context::set_current_identity::<Self>(did);
    }
}

impl<T: Config> IdentityFnTrait<T::AccountId> for Module<T> {
    /// Fetches identity of a key.
    fn get_identity(key: &T::AccountId) -> Option<IdentityId> {
        Self::get_identity(key)
    }

    /// Fetches the caller's identity from the context.
    fn current_identity() -> Option<IdentityId> {
        CurrentDid::get()
    }

    /// Sets the caller's identity in the context.
    fn set_current_identity(id: Option<IdentityId>) {
        if let Some(id) = id {
            CurrentDid::put(id);
        } else {
            CurrentDid::kill();
        }
    }

    /// Fetches the fee payer from the context.
    fn current_payer() -> Option<T::AccountId> {
        <CurrentPayer<T>>::get()
    }

    /// Sets the fee payer in the context.
    fn set_current_payer(payer: Option<T::AccountId>) {
        if let Some(payer) = payer {
            <CurrentPayer<T>>::put(payer);
        } else {
            <CurrentPayer<T>>::kill();
        }
    }

    /// Checks if the signer is authorized.
    fn is_signer_authorized(did: IdentityId, signer: &Signatory<T::AccountId>) -> bool {
        Self::is_signer_authorized(did, signer)
    }

    /// Checks if the keys is the primary key of the identity.
    fn is_primary_key(did: &IdentityId, key: &T::AccountId) -> bool {
        Self::is_primary_key(did, key)
    }

    /// Adds systematic CDD claims.
    fn add_systematic_cdd_claims(targets: &[IdentityId], issuer: SystematicIssuers) {
        for new_member in targets {
            let cdd_id = CddId::new_v1(new_member.clone(), InvestorUid::from(new_member.as_ref()));
            let cdd_claim = Claim::CustomerDueDiligence(cdd_id);
            Self::base_add_claim(*new_member, cdd_claim, issuer.as_id(), None);
        }
    }

    /// Removes systematic CDD claims.
    fn revoke_systematic_cdd_claims(targets: &[IdentityId], issuer: SystematicIssuers) {
        targets.iter().for_each(|removed_member| {
            let _ = Self::base_revoke_claim(
                *removed_member,
                ClaimType::CustomerDueDiligence,
                issuer.as_id(),
                None,
            );
        });
    }

    /// Provides the DID status for the given DID
    fn has_valid_cdd(target_did: IdentityId) -> bool {
        Self::has_valid_cdd(target_did)
    }
}

impl<T: Config> ChangeMembers<IdentityId> for Module<T> {
    /// Updates systematic CDDs of members of a group.
    fn change_members_sorted(
        incoming: &[IdentityId],
        outgoing: &[IdentityId],
        _new: &[IdentityId],
    ) {
        // Add/remove Systematic CDD claims for new/removed members.
        let issuer = SystematicIssuers::CDDProvider;
        Self::add_systematic_cdd_claims(incoming, issuer);
        Self::revoke_systematic_cdd_claims(outgoing, issuer);
    }
}

impl<T: Config> InitializeMembers<IdentityId> for Module<T> {
    /// Initializes members of a group by adding systematic claims for them.
    fn initialize_members(members: &[IdentityId]) {
        Self::add_systematic_cdd_claims(members, SystematicIssuers::CDDProvider);
    }
}

impl<T: Config> CheckAccountCallPermissions<T::AccountId> for Module<T> {
    // For weighting purposes, the function reads 4 storage values.
    fn check_account_call_permissions(
        who: &T::AccountId,
        pallet_name: &PalletName,
        function_name: &DispatchableName,
    ) -> Option<AccountCallPermissionsData<T::AccountId>> {
        // `who` is the original origin (signer) of the original extrinsic
        // context::current_identity is the target did against which the calling key must have permissions
        // if `who`'s identity does not match context::current_identity we have a forwarded call. In this case the
        // key for which we check permissions is `who`'s identity rather than `who`. This assumes that recursive forwarded calls
        // are not allowed (which are prevented in `forwarded_call`)

        if !<KeyToIdentityIds<T>>::contains_key(who) {
            // Caller has no Identity
            return None;
        }

        let key_did = <KeyToIdentityIds<T>>::get(who);

        if !<DidRecords<T>>::contains_key(&key_did) {
            // The DID record is missing.
            return None;
        }

        if let Some(target_did) = Context::current_identity_or::<Self>(who).ok() {
            let target_did_record = <DidRecords<T>>::get(&target_did);

            // NB: Doing this check here since `get_sk_data` moves `target_did_record`
            let is_direct_call = target_did == key_did;
            if is_direct_call && who == &target_did_record.primary_key {
                // It is a direct call and `who` is the primary key.
                return Some(AccountCallPermissionsData {
                    primary_did: target_did,
                    secondary_key: None,
                });
            }

            let get_sk_data = |who_sk| {
                // DIDs with frozen secondary keys (aka frozen DIDs) are not permitted to call extrinsics.
                if Self::is_did_frozen(&target_did) {
                    // `target_did` has its secondary keys frozen.
                    return None;
                }
                target_did_record
                    .secondary_keys
                    .into_iter()
                    .find(|sk| sk.signer == who_sk)
                    .filter(|sk| sk.has_extrinsic_permission(pallet_name, function_name))
                    .map(|sk| AccountCallPermissionsData {
                        primary_did: target_did,
                        secondary_key: Some(sk),
                    })
            };

            return get_sk_data(if is_direct_call {
                // Check the permissions of `who`'s key in `target_did` as it is a direct call.
                Signatory::Account(who.clone())
            } else {
                // Check the permissions of `who`'s Identity in `target_did` as it is a forwarded call.
                Signatory::Identity(key_did)
            });
        }
        // `who` doesn't have an identity.
        None
    }
}

/// A `revoke_claim` or `revoke_claim_by_index` TX is operational iff `claim_type` is a `Claim::CustomerDueDiligence`.
/// Otherwise, it will be a normal transaction.
fn revoke_claim_class(claim_type: ClaimType) -> frame_support::weights::DispatchClass {
    match claim_type {
        ClaimType::CustomerDueDiligence => Operational,
        _ => Normal,
    }
}
