// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_nft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-24, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-hel1-5`, CPU: `AMD EPYC Processor`

// Executed Command:
// target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=*
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_nft using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_nft::WeightInfo for SubstrateWeight {
    // Storage: Asset Tokens (r:1 w:1)
    // Proof Skipped: Asset Tokens (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT CollectionTicker (r:1 w:1)
    // Proof Skipped: NFT CollectionTicker (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset AssetMetadataGlobalKeyToName (r:255 w:0)
    // Proof Skipped: Asset AssetMetadataGlobalKeyToName (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset TickerConfig (r:1 w:0)
    // Proof Skipped: Asset TickerConfig (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Asset Tickers (r:1 w:1)
    // Proof Skipped: Asset Tickers (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity DidRecords (r:1 w:1)
    // Proof Skipped: Identity DidRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Proof Skipped: Portfolio PortfolioCustodian (max_values: None, max_size: None, mode: Measured)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Proof Skipped: ProtocolFee Coefficient (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ProtocolFee BaseFees (r:2 w:0)
    // Proof Skipped: ProtocolFee BaseFees (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity CurrentPayer (r:1 w:0)
    // Proof Skipped: Identity CurrentPayer (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    // Proof Skipped: ExternalAgents NumFullAgents (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NextCollectionId (r:1 w:1)
    // Proof Skipped: NFT NextCollectionId (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: NFT Collection (r:0 w:1)
    // Proof Skipped: NFT Collection (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT CollectionKeys (r:0 w:1)
    // Proof Skipped: NFT CollectionKeys (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset AssetOwnershipRelations (r:0 w:1)
    // Proof Skipped: Asset AssetOwnershipRelations (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset AssetNames (r:0 w:1)
    // Proof Skipped: Asset AssetNames (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset Identifiers (r:0 w:1)
    // Proof Skipped: Asset Identifiers (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents AgentOf (r:0 w:1)
    // Proof Skipped: ExternalAgents AgentOf (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:0 w:1)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 255]`.
    fn create_nft_collection(n: u32) -> Weight {
        // Minimum execution time: 247_864 nanoseconds.
        Weight::from_ref_time(223_070_325)
            // Standard Error: 155_652
            .saturating_add(Weight::from_ref_time(5_102_490).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(13))
    }
    // Storage: NFT CollectionTicker (r:1 w:0)
    // Proof Skipped: NFT CollectionTicker (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: NFT CollectionKeys (r:1 w:0)
    // Proof Skipped: NFT CollectionKeys (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NFTsInCollection (r:1 w:1)
    // Proof Skipped: NFT NFTsInCollection (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NumberOfNFTs (r:1 w:1)
    // Proof Skipped: NFT NumberOfNFTs (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NextNFTId (r:1 w:1)
    // Proof Skipped: NFT NextNFTId (max_values: None, max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioNFT (r:0 w:1)
    // Proof Skipped: Portfolio PortfolioNFT (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT MetadataValue (r:0 w:255)
    // Proof Skipped: NFT MetadataValue (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 255]`.
    fn issue_nft(n: u32) -> Weight {
        // Minimum execution time: 93_094 nanoseconds.
        Weight::from_ref_time(94_209_062)
            // Standard Error: 74_707
            .saturating_add(Weight::from_ref_time(5_216_435).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(n.into())))
    }
    // Storage: NFT CollectionTicker (r:1 w:0)
    // Proof Skipped: NFT CollectionTicker (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Proof Skipped: Portfolio PortfolioCustodian (max_values: None, max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioNFT (r:1 w:1)
    // Proof Skipped: Portfolio PortfolioNFT (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NFTsInCollection (r:1 w:1)
    // Proof Skipped: NFT NFTsInCollection (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NumberOfNFTs (r:1 w:1)
    // Proof Skipped: NFT NumberOfNFTs (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT MetadataValue (r:255 w:255)
    // Proof Skipped: NFT MetadataValue (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 255]`.
    fn redeem_nft(n: u32) -> Weight {
        // Minimum execution time: 107_301 nanoseconds.
        Weight::from_ref_time(122_523_796)
            // Standard Error: 39_701
            .saturating_add(Weight::from_ref_time(2_129_048).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(3))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(n.into())))
    }
    // Storage: NFT CollectionTicker (r:1 w:0)
    // Proof Skipped: NFT CollectionTicker (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset Frozen (r:1 w:0)
    // Proof Skipped: Asset Frozen (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NumberOfNFTs (r:2 w:2)
    // Proof Skipped: NFT NumberOfNFTs (max_values: None, max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioNFT (r:10 w:20)
    // Proof Skipped: Portfolio PortfolioNFT (max_values: None, max_size: None, mode: Measured)
    // Storage: ComplianceManager AssetCompliances (r:1 w:0)
    // Proof Skipped: ComplianceManager AssetCompliances (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 10]`.
    fn base_nft_transfer(n: u32) -> Weight {
        // Minimum execution time: 146_785 nanoseconds.
        Weight::from_ref_time(179_954_877)
            // Standard Error: 639_783
            .saturating_add(Weight::from_ref_time(14_367_143).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(n.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Proof Skipped: Portfolio Portfolios (max_values: None, max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Proof Skipped: Portfolio PortfolioCustodian (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT CollectionTicker (r:1 w:0)
    // Proof Skipped: NFT CollectionTicker (max_values: None, max_size: None, mode: Measured)
    // Storage: NFT NumberOfNFTs (r:2 w:2)
    // Proof Skipped: NFT NumberOfNFTs (max_values: None, max_size: None, mode: Measured)
    // Storage: Portfolio PortfolioNFT (r:10 w:20)
    // Proof Skipped: Portfolio PortfolioNFT (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[1, 10]`.
    fn controller_transfer(n: u32) -> Weight {
        // Minimum execution time: 99_105 nanoseconds.
        Weight::from_ref_time(103_660_031)
            // Standard Error: 451_525
            .saturating_add(Weight::from_ref_time(13_628_325).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(n.into())))
    }
}
