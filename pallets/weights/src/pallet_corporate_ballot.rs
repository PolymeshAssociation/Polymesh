// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_corporate_ballot
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-21, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-nbg1-1-bench2`, CPU: `AMD EPYC-Milan Processor`

// Executed Command:
// ./polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=*
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./Polymesh/pallets/weights/src/
// --template
// ./Polymesh/.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_corporate_ballot using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_corporate_actions::ballot::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Proof Skipped: CorporateAction CorporateActions (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: CorporateBallot TimeRanges (r:1 w:1)
    // Proof Skipped: CorporateBallot TimeRanges (max_values: None, max_size: None, mode: Measured)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Proof Skipped: ProtocolFee Coefficient (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Proof Skipped: ProtocolFee BaseFees (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot MotionNumChoices (r:0 w:1)
    // Proof Skipped: CorporateBallot MotionNumChoices (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot Metas (r:0 w:1)
    // Proof Skipped: CorporateBallot Metas (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot RCV (r:0 w:1)
    // Proof Skipped: CorporateBallot RCV (max_values: None, max_size: None, mode: Measured)
    /// The range of component `c` is `[0, 1000]`.
    fn attach_ballot(c: u32) -> Weight {
        // Minimum execution time: 69_024 nanoseconds.
        Weight::from_ref_time(73_860_279)
            // Standard Error: 1_798
            .saturating_add(Weight::from_ref_time(40_954).saturating_mul(c.into()))
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot TimeRanges (r:1 w:0)
    // Proof Skipped: CorporateBallot TimeRanges (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Proof Skipped: CorporateAction CorporateActions (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot MotionNumChoices (r:1 w:0)
    // Proof Skipped: CorporateBallot MotionNumChoices (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot RCV (r:1 w:0)
    // Proof Skipped: CorporateBallot RCV (max_values: None, max_size: None, mode: Measured)
    // Storage: Checkpoint SchedulePoints (r:1 w:0)
    // Proof Skipped: Checkpoint SchedulePoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Asset BalanceOf (r:1 w:0)
    // Proof Skipped: Asset BalanceOf (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot Votes (r:1 w:1)
    // Proof Skipped: CorporateBallot Votes (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot Results (r:1 w:1)
    // Proof Skipped: CorporateBallot Results (max_values: None, max_size: None, mode: Measured)
    /// The range of component `c` is `[0, 1000]`.
    /// The range of component `t` is `[0, 1000]`.
    fn vote(c: u32, t: u32) -> Weight {
        // Minimum execution time: 118_528 nanoseconds.
        Weight::from_ref_time(72_686_219)
            // Standard Error: 1_482
            .saturating_add(Weight::from_ref_time(60_312).saturating_mul(c.into()))
            // Standard Error: 1_482
            .saturating_add(Weight::from_ref_time(73_427).saturating_mul(t.into()))
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: CorporateBallot TimeRanges (r:1 w:1)
    // Proof Skipped: CorporateBallot TimeRanges (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn change_end() -> Weight {
        // Minimum execution time: 43_956 nanoseconds.
        Weight::from_ref_time(44_467_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: CorporateBallot TimeRanges (r:1 w:0)
    // Proof Skipped: CorporateBallot TimeRanges (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: CorporateBallot MotionNumChoices (r:0 w:1)
    // Proof Skipped: CorporateBallot MotionNumChoices (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot Metas (r:0 w:1)
    // Proof Skipped: CorporateBallot Metas (max_values: None, max_size: None, mode: Measured)
    /// The range of component `c` is `[0, 1000]`.
    fn change_meta(c: u32) -> Weight {
        // Minimum execution time: 50_467 nanoseconds.
        Weight::from_ref_time(54_880_462)
            // Standard Error: 1_530
            .saturating_add(Weight::from_ref_time(39_184).saturating_mul(c.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: CorporateBallot TimeRanges (r:1 w:0)
    // Proof Skipped: CorporateBallot TimeRanges (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: CorporateBallot RCV (r:0 w:1)
    // Proof Skipped: CorporateBallot RCV (max_values: None, max_size: None, mode: Measured)
    fn change_rcv() -> Weight {
        // Minimum execution time: 43_546 nanoseconds.
        Weight::from_ref_time(44_508_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Proof Skipped: ExternalAgents GroupOfAgent (max_values: None, max_size: None, mode: Measured)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Proof Skipped: Permissions CurrentPalletName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Proof Skipped: Permissions CurrentDispatchableName (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: CorporateBallot TimeRanges (r:1 w:1)
    // Proof Skipped: CorporateBallot TimeRanges (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: CorporateBallot MotionNumChoices (r:0 w:1)
    // Proof Skipped: CorporateBallot MotionNumChoices (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot Metas (r:0 w:1)
    // Proof Skipped: CorporateBallot Metas (max_values: None, max_size: None, mode: Measured)
    // Storage: CorporateBallot RCV (r:0 w:1)
    // Proof Skipped: CorporateBallot RCV (max_values: None, max_size: None, mode: Measured)
    fn remove_ballot() -> Weight {
        // Minimum execution time: 49_766 nanoseconds.
        Weight::from_ref_time(50_497_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(4))
    }
}
