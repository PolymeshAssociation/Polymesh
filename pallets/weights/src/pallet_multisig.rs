// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_multisig
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_multisig::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: MultiSig MultiSigNonce (r:1 w:1)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity Authorizations (r:0 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:0 w:1)
    // Storage: MultiSig MultiSigSignsRequired (r:0 w:1)
    /// The range of component `i` is `[1, 256]`.
    fn create_multisig(i: u32) -> Weight {
        // Minimum execution time: 51_255 nanoseconds.
        Weight::from_ref_time(51_635_000 as u64)
            // Standard Error: 113_982
            .saturating_add(Weight::from_ref_time(10_247_213 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(4 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
            .saturating_add(DbWeight::get().writes((2 as u64).saturating_mul(i as u64)))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig ProposalIds (r:1 w:1)
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: MultiSig MultiSigTxDone (r:1 w:1)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:0 w:1)
    // Storage: MultiSig Proposals (r:0 w:1)
    fn create_or_approve_proposal_as_identity() -> Weight {
        // Minimum execution time: 94_124 nanoseconds.
        Weight::from_ref_time(94_605_000 as u64)
            .saturating_add(DbWeight::get().reads(10 as u64))
            .saturating_add(DbWeight::get().writes(7 as u64))
    }
    // Storage: MultiSig ProposalIds (r:1 w:1)
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: MultiSig MultiSigTxDone (r:1 w:1)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:0 w:1)
    // Storage: MultiSig Proposals (r:0 w:1)
    fn create_or_approve_proposal_as_key() -> Weight {
        // Minimum execution time: 97_380 nanoseconds.
        Weight::from_ref_time(98_372_000 as u64)
            .saturating_add(DbWeight::get().reads(11 as u64))
            .saturating_add(DbWeight::get().writes(7 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: MultiSig MultiSigTxDone (r:1 w:1)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:0 w:1)
    // Storage: MultiSig Proposals (r:0 w:1)
    fn create_proposal_as_identity() -> Weight {
        // Minimum execution time: 86_971 nanoseconds.
        Weight::from_ref_time(88_022_000 as u64)
            .saturating_add(DbWeight::get().reads(9 as u64))
            .saturating_add(DbWeight::get().writes(6 as u64))
    }
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: MultiSig MultiSigTxDone (r:1 w:1)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:0 w:1)
    // Storage: MultiSig Proposals (r:0 w:1)
    fn create_proposal_as_key() -> Weight {
        // Minimum execution time: 92_842 nanoseconds.
        Weight::from_ref_time(93_142_000 as u64)
            .saturating_add(DbWeight::get().reads(10 as u64))
            .saturating_add(DbWeight::get().writes(6 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: MultiSig Proposals (r:1 w:0)
    // Storage: MultiSig ProposalDetail (r:1 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    fn approve_as_identity() -> Weight {
        // Minimum execution time: 78_305 nanoseconds.
        Weight::from_ref_time(79_727_000 as u64)
            .saturating_add(DbWeight::get().reads(9 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
    }
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: MultiSig Proposals (r:1 w:0)
    // Storage: MultiSig ProposalDetail (r:1 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    fn approve_as_key() -> Weight {
        // Minimum execution time: 71_803 nanoseconds.
        Weight::from_ref_time(72_313_000 as u64)
            .saturating_add(DbWeight::get().reads(8 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: MultiSig NumberOfSigners (r:1 w:0)
    fn reject_as_identity() -> Weight {
        // Minimum execution time: 60_402 nanoseconds.
        Weight::from_ref_time(61_554_000 as u64)
            .saturating_add(DbWeight::get().reads(7 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: MultiSig MultiSigSigners (r:1 w:0)
    // Storage: MultiSig Votes (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: MultiSig NumberOfSigners (r:1 w:0)
    fn reject_as_key() -> Weight {
        // Minimum execution time: 55_883 nanoseconds.
        Weight::from_ref_time(56_153_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:1)
    // Storage: MultiSig NumberOfSigners (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    fn accept_multisig_signer_as_identity() -> Weight {
        // Minimum execution time: 60_050 nanoseconds.
        Weight::from_ref_time(60_642_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
    }
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:1)
    // Storage: MultiSig NumberOfSigners (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    fn accept_multisig_signer_as_key() -> Weight {
        // Minimum execution time: 63_868 nanoseconds.
        Weight::from_ref_time(64_719_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity Authorizations (r:0 w:1)
    fn add_multisig_signer() -> Weight {
        // Minimum execution time: 43_991 nanoseconds.
        Weight::from_ref_time(44_442_000 as u64)
            .saturating_add(DbWeight::get().reads(2 as u64))
            .saturating_add(DbWeight::get().writes(3 as u64))
    }
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:1)
    // Storage: MultiSig NumberOfSigners (r:1 w:1)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn remove_multisig_signer() -> Weight {
        // Minimum execution time: 49_481 nanoseconds.
        Weight::from_ref_time(49_842_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity Authorizations (r:0 w:1)
    /// The range of component `i` is `[1, 256]`.
    fn add_multisig_signers_via_creator(i: u32) -> Weight {
        // Minimum execution time: 55_993 nanoseconds.
        Weight::from_ref_time(30_436_528 as u64)
            // Standard Error: 18_213
            .saturating_add(Weight::from_ref_time(13_122_879 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
            .saturating_add(DbWeight::get().writes((2 as u64).saturating_mul(i as u64)))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:2 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: MultiSig NumberOfSigners (r:1 w:1)
    // Storage: MultiSig MultiSigSignsRequired (r:1 w:0)
    // Storage: MultiSig MultiSigSigners (r:1 w:1)
    /// The range of component `i` is `[1, 256]`.
    fn remove_multisig_signers_via_creator(i: u32) -> Weight {
        // Minimum execution time: 62_685 nanoseconds.
        Weight::from_ref_time(48_581_468 as u64)
            // Standard Error: 31_534
            .saturating_add(Weight::from_ref_time(13_775_780 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(7 as u64))
            .saturating_add(DbWeight::get().reads((2 as u64).saturating_mul(i as u64)))
            .saturating_add(DbWeight::get().writes(1 as u64))
            .saturating_add(DbWeight::get().writes((2 as u64).saturating_mul(i as u64)))
    }
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: MultiSig NumberOfSigners (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: MultiSig MultiSigSignsRequired (r:0 w:1)
    fn change_sigs_required() -> Weight {
        // Minimum execution time: 36_387 nanoseconds.
        Weight::from_ref_time(36_898_000 as u64)
            .saturating_add(DbWeight::get().reads(4 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:2 w:1)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:1)
    fn make_multisig_secondary() -> Weight {
        // Minimum execution time: 43_300 nanoseconds.
        Weight::from_ref_time(44_382_000 as u64)
            .saturating_add(DbWeight::get().reads(3 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:2 w:2)
    // Storage: MultiSig MultiSigToIdentity (r:2 w:0)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:2)
    fn make_multisig_primary() -> Weight {
        // Minimum execution time: 59_369 nanoseconds.
        Weight::from_ref_time(60_131_000 as u64)
            .saturating_add(DbWeight::get().reads(8 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: MultiSig Proposals (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:1)
    // Storage: Permissions CurrentDispatchableName (r:1 w:1)
    // Storage: MultiSig ProposalDetail (r:1 w:1)
    // Storage: Identity CurrentDid (r:0 w:1)
    // Storage: Identity CurrentPayer (r:0 w:1)
    fn execute_scheduled_proposal() -> Weight {
        // Minimum execution time: 70_601 nanoseconds.
        Weight::from_ref_time(71_322_000 as u64)
            .saturating_add(DbWeight::get().reads(10 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
}
