// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-17, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-hel1-1`, CPU: `Intel Xeon Processor (Skylake, IBRS)`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_scheduler
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_scheduler::WeightInfo for SubstrateWeight {
    // Storage: Scheduler IncompleteSince (r:1 w:1)
    fn service_agendas_base() -> Weight {
        // Minimum execution time: 16_646 nanoseconds.
        Weight::from_ref_time(17_007_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 50]`.
    fn service_agenda_base(s: u32) -> Weight {
        // Minimum execution time: 14_789 nanoseconds.
        Weight::from_ref_time(27_599_955)
            // Standard Error: 44_437
            .saturating_add(Weight::from_ref_time(728_633).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    fn service_task_base() -> Weight {
        // Minimum execution time: 23_835 nanoseconds.
        Weight::from_ref_time(24_590_000)
    }
    // Storage: Preimage PreimageFor (r:1 w:1)
    // Storage: Preimage StatusFor (r:1 w:1)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32) -> Weight {
        // Minimum execution time: 51_287 nanoseconds.
        Weight::from_ref_time(51_946_000)
            // Standard Error: 15
            .saturating_add(Weight::from_ref_time(2_444).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Scheduler Lookup (r:0 w:1)
    fn service_task_named() -> Weight {
        // Minimum execution time: 26_931 nanoseconds.
        Weight::from_ref_time(27_900_000).saturating_add(DbWeight::get().writes(1))
    }
    fn service_task_periodic() -> Weight {
        // Minimum execution time: 23_020 nanoseconds.
        Weight::from_ref_time(23_302_000)
    }
    fn execute_dispatch_signed() -> Weight {
        // Minimum execution time: 10_159 nanoseconds.
        Weight::from_ref_time(10_630_000)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Minimum execution time: 9_987 nanoseconds.
        Weight::from_ref_time(10_295_000)
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 49]`.
    fn schedule(s: u32) -> Weight {
        // Minimum execution time: 41_739 nanoseconds.
        Weight::from_ref_time(69_740_969)
            // Standard Error: 86_157
            .saturating_add(Weight::from_ref_time(864_562).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: Scheduler Lookup (r:0 w:1)
    /// The range of component `s` is `[1, 50]`.
    fn cancel(s: u32) -> Weight {
        // Minimum execution time: 44_359 nanoseconds.
        Weight::from_ref_time(66_976_678)
            // Standard Error: 82_339
            .saturating_add(Weight::from_ref_time(908_817).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[0, 49]`.
    fn schedule_named(s: u32) -> Weight {
        // Minimum execution time: 48_504 nanoseconds.
        Weight::from_ref_time(59_938_176)
            // Standard Error: 101_908
            .saturating_add(Weight::from_ref_time(1_693_082).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    /// The range of component `s` is `[1, 50]`.
    fn cancel_named(s: u32) -> Weight {
        // Minimum execution time: 49_254 nanoseconds.
        Weight::from_ref_time(56_112_497)
            // Standard Error: 86_889
            .saturating_add(Weight::from_ref_time(1_385_051).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
}
