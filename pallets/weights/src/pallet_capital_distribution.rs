// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_capital_distribution
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-19, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-hel1-1`, CPU: `Intel Xeon Processor (Skylake, IBRS)`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_capital_distribution
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_capital_distribution using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_corporate_actions::distribution::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    fn distribute() -> Weight {
        // Minimum execution time: 170_878 nanoseconds.
        Weight::from_ref_time(175_316_000)
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: CapitalDistribution HolderPaid (r:1 w:1)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Storage: Checkpoint SchedulePoints (r:1 w:0)
    // Storage: Asset BalanceOf (r:3 w:2)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: Asset Frozen (r:1 w:0)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:2 w:2)
    // Storage: Asset AggregateBalance (r:2 w:2)
    // Storage: Statistics AssetTransferCompliances (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:0)
    // Storage: Checkpoint Schedules (r:1 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:0 w:2)
    /// The range of component `t` is `[0, 1000]`.
    /// The range of component `w` is `[0, 1000]`.
    fn claim(t: u32, w: u32) -> Weight {
        // Minimum execution time: 844_478 nanoseconds.
        Weight::from_ref_time(914_306_310)
            // Standard Error: 14_490
            .saturating_add(Weight::from_ref_time(204_286).saturating_mul(t.into()))
            // Standard Error: 14_490
            .saturating_add(Weight::from_ref_time(67_479).saturating_mul(w.into()))
            .saturating_add(DbWeight::get().reads(22))
            .saturating_add(DbWeight::get().writes(11))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CapitalDistribution HolderPaid (r:1 w:1)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Storage: Checkpoint SchedulePoints (r:1 w:0)
    // Storage: Asset BalanceOf (r:3 w:2)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: Asset Frozen (r:1 w:0)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:2 w:2)
    // Storage: Asset AggregateBalance (r:2 w:2)
    // Storage: Statistics AssetTransferCompliances (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:0)
    // Storage: Checkpoint Schedules (r:1 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:0 w:2)
    /// The range of component `t` is `[0, 1000]`.
    /// The range of component `w` is `[0, 1000]`.
    fn push_benefit(t: u32, w: u32) -> Weight {
        // Minimum execution time: 969_049 nanoseconds.
        Weight::from_ref_time(1_081_051_484)
            // Standard Error: 15_145
            .saturating_add(Weight::from_ref_time(189_030).saturating_mul(t.into()))
            // Standard Error: 15_145
            .saturating_add(Weight::from_ref_time(49_399).saturating_mul(w.into()))
            .saturating_add(DbWeight::get().reads(25))
            .saturating_add(DbWeight::get().writes(11))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    fn reclaim() -> Weight {
        // Minimum execution time: 138_223 nanoseconds.
        Weight::from_ref_time(140_009_000)
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    fn remove_distribution() -> Weight {
        // Minimum execution time: 132_481 nanoseconds.
        Weight::from_ref_time(133_090_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(2))
    }
}
