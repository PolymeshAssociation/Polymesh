// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_compliance_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_compliance_manager
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_compliance_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_compliance_manager::WeightInfo for SubstrateWeight {
    /// The range of component `a` is `[1, 10]`.
    /// The range of component `b` is `[1, 10]`.
    /// The range of component `c` is `[1, 10]`.
    /// The range of component `d` is `[1, 10]`.
    fn condition_costs(a: u32, b: u32, c: u32, d: u32) -> Weight {
        // Minimum execution time: 7_874 nanoseconds.
        Weight::from_ref_time(8_095_000 as u64)
            // Standard Error: 39_414
            .saturating_add(Weight::from_ref_time(2_955_380 as u64).saturating_mul(a as u64))
            // Standard Error: 39_414
            .saturating_add(Weight::from_ref_time(476_194 as u64).saturating_mul(b as u64))
            // Standard Error: 39_414
            .saturating_add(Weight::from_ref_time(721_394 as u64).saturating_mul(c as u64))
            // Manually set for `d`
            .saturating_add(Weight::from_ref_time(721_394 as u64).saturating_mul(d as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:1)
    // Storage: ComplianceManager TrustedClaimIssuer (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    /// The range of component `c` is `[1, 6]`.
    fn add_compliance_requirement(c: u32) -> Weight {
        // Minimum execution time: 60_372 nanoseconds.
        Weight::from_ref_time(63_026_589 as u64)
            // Standard Error: 46_582
            .saturating_add(Weight::from_ref_time(540_810 as u64).saturating_mul(c as u64))
            .saturating_add(DbWeight::get().reads(8 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:1)
    fn remove_compliance_requirement() -> Weight {
        // Minimum execution time: 51_265 nanoseconds.
        Weight::from_ref_time(51_766_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:1)
    fn pause_asset_compliance() -> Weight {
        // Minimum execution time: 52_668 nanoseconds.
        Weight::from_ref_time(53_188_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:1)
    fn resume_asset_compliance() -> Weight {
        // Minimum execution time: 49_812 nanoseconds.
        Weight::from_ref_time(54_541_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: ComplianceManager TrustedClaimIssuer (r:1 w:1)
    // Storage: ComplianceManager AssetCompliances (r:1 w:0)
    fn add_default_trusted_claim_issuer() -> Weight {
        // Minimum execution time: 56_625 nanoseconds.
        Weight::from_ref_time(57_235_000 as u64)
            .saturating_add(DbWeight::get().reads(7 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager TrustedClaimIssuer (r:1 w:1)
    fn remove_default_trusted_claim_issuer() -> Weight {
        // Minimum execution time: 49_361 nanoseconds.
        Weight::from_ref_time(49_752_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:1)
    // Storage: ComplianceManager TrustedClaimIssuer (r:1 w:0)
    /// The range of component `c` is `[1, 6]`.
    fn change_compliance_requirement(c: u32) -> Weight {
        // Minimum execution time: 55_863 nanoseconds.
        Weight::from_ref_time(56_861_754 as u64)
            // Standard Error: 30_721
            .saturating_add(Weight::from_ref_time(737_109 as u64).saturating_mul(c as u64))
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager TrustedClaimIssuer (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:1 w:1)
    /// The range of component `c` is `[0, 2]`.
    fn replace_asset_compliance(c: u32) -> Weight {
        // Minimum execution time: 52_056 nanoseconds.
        Weight::from_ref_time(54_555_106 as u64)
            // Standard Error: 62_685
            .saturating_add(Weight::from_ref_time(6_376_676 as u64).saturating_mul(c as u64))
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ComplianceManager AssetCompliances (r:0 w:1)
    fn reset_asset_compliance() -> Weight {
        // Minimum execution time: 43_210 nanoseconds.
        Weight::from_ref_time(43_600_000 as u64)
            .saturating_add(DbWeight::get().reads(4 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
}
