// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-09-22, STEPS: [100, ], REPEAT: 5, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512

// Executed Command:
// ./target/release/polymesh
// benchmark
// -s
// 100
// -r
// 5
// -p=pallet_utility
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs
// --raw


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_utility.
pub trait WeightInfo {
	fn batch(c: u32, ) -> Weight;
	fn batch_transfer(c: u32, ) -> Weight;
	fn batch_atomic(c: u32, ) -> Weight;
	fn batch_atomic_transfer(c: u32, ) -> Weight;
	fn batch_optimistic(c: u32, ) -> Weight;
	fn batch_optimistic_transfer(c: u32, ) -> Weight;
	fn relay_tx() -> Weight;
	fn relay_tx_transfer() -> Weight;
}

/// Weights for pallet_utility using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn batch(c: u32, ) -> Weight {
		(40_168_000 as Weight)
			// Standard Error: 312_000
			.saturating_add((20_667_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn batch_transfer(c: u32, ) -> Weight {
		(104_351_000 as Weight)
			// Standard Error: 917_000
			.saturating_add((89_645_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn batch_atomic(c: u32, ) -> Weight {
		(34_179_000 as Weight)
			// Standard Error: 278_000
			.saturating_add((21_605_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn batch_atomic_transfer(c: u32, ) -> Weight {
		(83_149_000 as Weight)
			// Standard Error: 860_000
			.saturating_add((89_011_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn batch_optimistic(c: u32, ) -> Weight {
		(32_963_000 as Weight)
			// Standard Error: 298_000
			.saturating_add((20_585_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn batch_optimistic_transfer(c: u32, ) -> Weight {
		(74_763_000 as Weight)
			// Standard Error: 905_000
			.saturating_add((89_964_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn relay_tx() -> Weight {
		(191_811_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn relay_tx_transfer() -> Weight {
		(297_223_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn batch(c: u32, ) -> Weight {
		(40_168_000 as Weight)
			// Standard Error: 312_000
			.saturating_add((20_667_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn batch_transfer(c: u32, ) -> Weight {
		(104_351_000 as Weight)
			// Standard Error: 917_000
			.saturating_add((89_645_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn batch_atomic(c: u32, ) -> Weight {
		(34_179_000 as Weight)
			// Standard Error: 278_000
			.saturating_add((21_605_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn batch_atomic_transfer(c: u32, ) -> Weight {
		(83_149_000 as Weight)
			// Standard Error: 860_000
			.saturating_add((89_011_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn batch_optimistic(c: u32, ) -> Weight {
		(32_963_000 as Weight)
			// Standard Error: 298_000
			.saturating_add((20_585_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn batch_optimistic_transfer(c: u32, ) -> Weight {
		(74_763_000 as Weight)
			// Standard Error: 905_000
			.saturating_add((89_964_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn relay_tx() -> Weight {
		(191_811_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn relay_tx_transfer() -> Weight {
		(297_223_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(17 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
}
