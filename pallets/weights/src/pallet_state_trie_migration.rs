// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_state_trie_migration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-30, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: ``, CPU: `Intel(R) Core(TM) i5-10600K CPU @ 4.10GHz`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_state_trie_migration
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_state_trie_migration using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_state_trie_migration::WeightInfo for SubstrateWeight {
    // Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
    // Proof: StateTrieMigration SignedMigrationMaxLimits (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: StateTrieMigration MigrationProcess (r:1 w:1)
    // Proof: StateTrieMigration MigrationProcess (max_values: Some(1), max_size: Some(1042), added: 1537, mode: MaxEncodedLen)
    fn continue_migrate() -> Weight {
        // Minimum execution time: 26_831 nanoseconds.
        Weight::from_ref_time(27_050_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
    // Proof: StateTrieMigration SignedMigrationMaxLimits (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn continue_migrate_wrong_witness() -> Weight {
        // Minimum execution time: 8_550 nanoseconds.
        Weight::from_ref_time(8_926_000).saturating_add(DbWeight::get().reads(1))
    }
    fn migrate_custom_top_success() -> Weight {
        // Minimum execution time: 15_524 nanoseconds.
        Weight::from_ref_time(16_049_000)
    }
    // Storage: unknown `0x666f6f` (r:1 w:1)
    // Proof Skipped: unknown `0x666f6f` (r:1 w:1)
    fn migrate_custom_top_fail() -> Weight {
        // Minimum execution time: 33_428 nanoseconds.
        Weight::from_ref_time(33_925_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    fn migrate_custom_child_success() -> Weight {
        // Minimum execution time: 15_810 nanoseconds.
        Weight::from_ref_time(16_246_000)
    }
    // Storage: unknown `0x666f6f` (r:1 w:1)
    // Proof Skipped: unknown `0x666f6f` (r:1 w:1)
    fn migrate_custom_child_fail() -> Weight {
        // Minimum execution time: 34_286 nanoseconds.
        Weight::from_ref_time(34_700_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: unknown `0x6b6579` (r:1 w:1)
    // Proof Skipped: unknown `0x6b6579` (r:1 w:1)
    /// The range of component `v` is `[1, 4194304]`.
    fn process_top_key(v: u32) -> Weight {
        // Minimum execution time: 10_129 nanoseconds.
        Weight::from_ref_time(10_352_000)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_447).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
}
