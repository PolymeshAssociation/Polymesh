// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_sto
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_sto
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_sto using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_sto::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Settlement VenueInfo (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Sto FundraiserCount (r:1 w:1)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: Sto FundraiserNames (r:0 w:1)
    // Storage: Sto Fundraisers (r:0 w:1)
    /// The range of component `i` is `[1, 10]`.
    fn create_fundraiser(i: u32) -> Weight {
        // Minimum execution time: 80_048 nanoseconds.
        Weight::from_ref_time(84_704_248 as u64)
            // Standard Error: 40_142
            .saturating_add(Weight::from_ref_time(44_496 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(11 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:2 w:0)
    // Storage: Sto Fundraisers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:2 w:2)
    // Storage: Settlement VenueInfo (r:1 w:0)
    // Storage: Settlement VenueFiltering (r:2 w:0)
    // Storage: Settlement InstructionCounter (r:1 w:1)
    // Storage: Settlement InstructionLegs (r:3 w:2)
    // Storage: Asset Tokens (r:2 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:4 w:4)
    // Storage: Asset Frozen (r:2 w:0)
    // Storage: Asset DisableInvestorUniqueness (r:2 w:0)
    // Storage: Identity Claims (r:54 w:0)
    // Storage: Asset ScopeIdOf (r:4 w:0)
    // Storage: Asset AggregateBalance (r:4 w:4)
    // Storage: Statistics AssetTransferCompliances (r:2 w:0)
    // Storage: Statistics AssetStats (r:2 w:2)
    // Storage: Statistics TransferConditionExemptEntities (r:2 w:0)
    // Storage: ComplianceManager AssetCompliances (r:2 w:0)
    // Storage: Asset BalanceOf (r:4 w:4)
    // Storage: Checkpoint Schedules (r:2 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:2 w:0)
    // Storage: Portfolio PortfolioAssetCount (r:2 w:2)
    // Storage: Statistics ActiveAssetStats (r:2 w:0)
    // Storage: Settlement UserAffirmations (r:0 w:2)
    // Storage: Settlement InstructionAffirmsPending (r:0 w:1)
    // Storage: Settlement InstructionDetails (r:0 w:1)
    // Storage: Settlement VenueInstructions (r:0 w:1)
    // Storage: Settlement AffirmsReceived (r:0 w:2)
    // Storage: Settlement InstructionLegStatus (r:0 w:2)
    // Storage: Asset BalanceOfAtScope (r:0 w:2)
    fn invest() -> Weight {
        // Minimum execution time: 1_112_604 nanoseconds.
        Weight::from_ref_time(1_127_803_000 as u64)
            .saturating_add(DbWeight::get().reads(106 as u64))
            .saturating_add(DbWeight::get().writes(33 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Sto Fundraisers (r:1 w:1)
    fn freeze_fundraiser() -> Weight {
        // Minimum execution time: 53_820 nanoseconds.
        Weight::from_ref_time(54_470_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Sto Fundraisers (r:1 w:1)
    fn unfreeze_fundraiser() -> Weight {
        // Minimum execution time: 52_918 nanoseconds.
        Weight::from_ref_time(53_158_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Sto Fundraisers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    fn modify_fundraiser_window() -> Weight {
        // Minimum execution time: 54_571 nanoseconds.
        Weight::from_ref_time(55_272_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Sto Fundraisers (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    fn stop() -> Weight {
        // Minimum execution time: 53_619 nanoseconds.
        Weight::from_ref_time(54_761_000 as u64)
            .saturating_add(DbWeight::get().reads(4 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
}
