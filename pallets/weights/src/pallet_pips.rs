// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_pips
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-26, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_pips
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_pips using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_pips::WeightInfo for SubstrateWeight {
    // Storage: Pips PruneHistoricalPips (r:1 w:1)
    fn set_prune_historical_pips() -> Weight {
        // Minimum execution time: 20_768 nanoseconds.
        Weight::from_ref_time(21_299_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Pips MinimumProposalDeposit (r:1 w:1)
    fn set_min_proposal_deposit() -> Weight {
        // Minimum execution time: 21_691 nanoseconds.
        Weight::from_ref_time(22_692_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Pips DefaultEnactmentPeriod (r:1 w:1)
    fn set_default_enactment_period() -> Weight {
        // Minimum execution time: 22_421 nanoseconds.
        Weight::from_ref_time(22_953_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Pips PendingPipExpiry (r:1 w:1)
    fn set_pending_pip_expiry() -> Weight {
        // Minimum execution time: 22_191 nanoseconds.
        Weight::from_ref_time(22_512_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Pips MaxPipSkipCount (r:1 w:1)
    fn set_max_pip_skip_count() -> Weight {
        // Minimum execution time: 20_658 nanoseconds.
        Weight::from_ref_time(21_279_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Pips ActivePipLimit (r:1 w:1)
    fn set_active_pip_limit() -> Weight {
        // Minimum execution time: 21_720 nanoseconds.
        Weight::from_ref_time(22_100_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Pips PipIdSequence (r:1 w:1)
    // Storage: Pips ActivePipLimit (r:1 w:0)
    // Storage: Pips ActivePipCount (r:1 w:1)
    // Storage: Pips MinimumProposalDeposit (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Pips PendingPipExpiry (r:1 w:0)
    // Storage: Pips ProposalResult (r:1 w:1)
    // Storage: Pips ProposalVotes (r:1 w:1)
    // Storage: Pips LiveQueue (r:1 w:1)
    // Storage: Pips ProposalMetadata (r:0 w:1)
    // Storage: Pips Deposits (r:0 w:1)
    // Storage: Pips Proposals (r:0 w:1)
    // Storage: Pips ProposalStates (r:0 w:1)
    fn propose_from_community() -> Weight {
        // Minimum execution time: 104_993 nanoseconds.
        Weight::from_ref_time(107_659_000)
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().writes(11))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Pips PipIdSequence (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Pips PendingPipExpiry (r:1 w:0)
    // Storage: Pips ActivePipCount (r:1 w:1)
    // Storage: Pips CommitteePips (r:1 w:1)
    // Storage: Pips ProposalMetadata (r:0 w:1)
    // Storage: Pips Proposals (r:0 w:1)
    // Storage: Pips ProposalStates (r:0 w:1)
    fn propose_from_committee() -> Weight {
        // Minimum execution time: 61_213 nanoseconds.
        Weight::from_ref_time(63_227_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Pips Proposals (r:1 w:0)
    // Storage: Pips ProposalStates (r:1 w:0)
    // Storage: Pips ProposalResult (r:1 w:1)
    // Storage: Pips Deposits (r:1 w:1)
    // Storage: Pips ProposalVotes (r:1 w:1)
    // Storage: Pips LiveQueue (r:1 w:1)
    fn vote() -> Weight {
        // Minimum execution time: 173_130 nanoseconds.
        Weight::from_ref_time(181_616_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Pips ProposalStates (r:1 w:1)
    // Storage: Pips Proposals (r:1 w:0)
    // Storage: Pips DefaultEnactmentPeriod (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: Pips PipToSchedule (r:0 w:1)
    fn approve_committee_proposal() -> Weight {
        // Minimum execution time: 54_842 nanoseconds.
        Weight::from_ref_time(55_573_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Pips ProposalStates (r:1 w:1)
    // Storage: Pips LiveQueue (r:1 w:1)
    // Storage: Pips SnapshotMeta (r:1 w:0)
    // Storage: Pips ActivePipCount (r:1 w:1)
    // Storage: Pips PruneHistoricalPips (r:1 w:0)
    // Storage: Pips Deposits (r:2 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Pips Proposals (r:1 w:1)
    // Storage: Pips ProposalVotes (r:0 w:1)
    // Storage: Pips ProposalMetadata (r:0 w:1)
    // Storage: Pips PipSkipCount (r:0 w:1)
    // Storage: Pips ProposalResult (r:0 w:1)
    fn reject_proposal() -> Weight {
        // Minimum execution time: 96_539 nanoseconds.
        Weight::from_ref_time(97_260_000)
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().writes(11))
    }
    // Storage: Pips ProposalStates (r:1 w:1)
    // Storage: Pips Deposits (r:1 w:0)
    // Storage: Pips Proposals (r:1 w:1)
    // Storage: Pips ProposalVotes (r:0 w:1)
    // Storage: Pips ProposalMetadata (r:0 w:1)
    // Storage: Pips PipSkipCount (r:0 w:1)
    // Storage: Pips ProposalResult (r:0 w:1)
    fn prune_proposal() -> Weight {
        // Minimum execution time: 57_476 nanoseconds.
        Weight::from_ref_time(58_217_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Instance1Committee ReleaseCoordinator (r:1 w:0)
    // Storage: Pips ProposalStates (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:2 w:2)
    // Storage: Pips PipToSchedule (r:0 w:1)
    fn reschedule_execution() -> Weight {
        // Minimum execution time: 64_409 nanoseconds.
        Weight::from_ref_time(65_361_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Instance1Committee Members (r:1 w:0)
    // Storage: Pips SnapshotMeta (r:1 w:1)
    // Storage: Pips SnapshotQueue (r:0 w:1)
    fn clear_snapshot() -> Weight {
        // Minimum execution time: 41_196 nanoseconds.
        Weight::from_ref_time(42_048_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Instance1Committee Members (r:1 w:0)
    // Storage: Pips SnapshotIdSequence (r:1 w:1)
    // Storage: Pips LiveQueue (r:1 w:0)
    // Storage: Pips SnapshotQueue (r:0 w:1)
    // Storage: Pips SnapshotMeta (r:0 w:1)
    fn snapshot() -> Weight {
        // Minimum execution time: 5_045_658 nanoseconds.
        Weight::from_ref_time(5_749_538_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Pips MaxPipSkipCount (r:1 w:0)
    // Storage: Pips SnapshotQueue (r:1 w:1)
    // Storage: Pips PipSkipCount (r:33 w:33)
    // Storage: Pips LiveQueue (r:1 w:1)
    // Storage: Pips ProposalStates (r:33 w:33)
    // Storage: Pips ActivePipCount (r:1 w:1)
    // Storage: Pips PruneHistoricalPips (r:1 w:0)
    // Storage: Pips Deposits (r:13233 w:13200)
    // Storage: Balances Locks (r:400 w:400)
    // Storage: System Account (r:400 w:400)
    // Storage: Pips SnapshotMeta (r:1 w:0)
    // Storage: Pips DefaultEnactmentPeriod (r:1 w:0)
    // Storage: Scheduler Lookup (r:1 w:1)
    // Storage: Scheduler Agenda (r:1 w:1)
    // Storage: Pips PipToSchedule (r:0 w:1)
    /// The range of component `a` is `[0, 33]`.
    /// The range of component `r` is `[0, 33]`.
    /// The range of component `s` is `[0, 33]`.
    fn enact_snapshot_results(a: u32, r: u32, s: u32) -> Weight {
        // Minimum execution time: 6_566_096 nanoseconds.
        Weight::from_ref_time(6_957_298_000)
            // Standard Error: 12_544_789
            .saturating_add(Weight::from_ref_time(10_744_149).saturating_mul(a.into()))
            // Standard Error: 12_544_789
            .saturating_add(Weight::from_ref_time(7_854_153_472).saturating_mul(r.into()))
            // Standard Error: 12_544_789
            .saturating_add(Weight::from_ref_time(44_364_707).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(685))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().reads((405_u64).saturating_mul(r.into())))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(s.into())))
            .saturating_add(DbWeight::get().writes(681))
            .saturating_add(DbWeight::get().writes((4_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().writes((404_u64).saturating_mul(r.into())))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(s.into())))
    }
    // Storage: Pips Proposals (r:1 w:1)
    // Storage: Pips ProposalStates (r:1 w:1)
    // Storage: Pips ActivePipCount (r:1 w:1)
    // Storage: Pips PruneHistoricalPips (r:1 w:0)
    // Storage: Pips Deposits (r:401 w:400)
    // Storage: Balances Locks (r:400 w:400)
    // Storage: System Account (r:400 w:400)
    // Storage: Pips ProposalVotes (r:0 w:400)
    // Storage: Pips ProposalMetadata (r:0 w:1)
    // Storage: Pips PipSkipCount (r:0 w:1)
    // Storage: Pips PipToSchedule (r:0 w:1)
    // Storage: Pips ProposalResult (r:0 w:1)
    fn execute_scheduled_pip() -> Weight {
        // Minimum execution time: 17_083_650 nanoseconds.
        Weight::from_ref_time(17_474_763_000)
            .saturating_add(DbWeight::get().reads(1205))
            .saturating_add(DbWeight::get().writes(1607))
    }
    // Storage: Pips ProposalStates (r:1 w:1)
    // Storage: Pips LiveQueue (r:1 w:1)
    // Storage: Pips SnapshotMeta (r:1 w:0)
    // Storage: Pips SnapshotQueue (r:1 w:1)
    // Storage: Pips ActivePipCount (r:1 w:1)
    // Storage: Pips PruneHistoricalPips (r:1 w:0)
    // Storage: Pips Deposits (r:401 w:400)
    // Storage: Balances Locks (r:400 w:400)
    // Storage: System Account (r:400 w:400)
    // Storage: Pips Proposals (r:1 w:1)
    // Storage: Pips ProposalVotes (r:0 w:400)
    // Storage: Pips ProposalMetadata (r:0 w:1)
    // Storage: Pips PipSkipCount (r:0 w:1)
    // Storage: Pips ProposalResult (r:0 w:1)
    fn expire_scheduled_pip() -> Weight {
        // Minimum execution time: 18_138_449 nanoseconds.
        Weight::from_ref_time(18_256_757_000)
            .saturating_add(DbWeight::get().reads(1208))
            .saturating_add(DbWeight::get().writes(1608))
    }
}
