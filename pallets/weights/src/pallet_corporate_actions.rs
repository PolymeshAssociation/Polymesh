// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_corporate_actions
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_corporate_actions
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_corporate_actions using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_corporate_actions::WeightInfo for SubstrateWeight {
    // Storage: CorporateAction MaxDetailsLength (r:0 w:1)
    fn set_max_details_length() -> Weight {
        // Minimum execution time: 18_084 nanoseconds.
        Weight::from_ref_time(18_644_000 as u64).saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction DefaultTargetIdentities (r:1 w:1)
    /// The range of component `t` is `[0, 500]`.
    fn set_default_targets(t: u32) -> Weight {
        // Minimum execution time: 44_452 nanoseconds.
        Weight::from_ref_time(61_539_704 as u64)
            // Standard Error: 3_639
            .saturating_add(Weight::from_ref_time(397_960 as u64).saturating_mul(t as u64))
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction DefaultWithholdingTax (r:1 w:1)
    fn set_default_withholding_tax() -> Weight {
        // Minimum execution time: 43_400 nanoseconds.
        Weight::from_ref_time(44_302_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction DidWithholdingTax (r:1 w:1)
    /// The range of component `w` is `[0, 999]`.
    fn set_did_withholding_tax(w: u32) -> Weight {
        // Minimum execution time: 47_147 nanoseconds.
        Weight::from_ref_time(67_165_215 as u64)
            // Standard Error: 1_849
            .saturating_add(Weight::from_ref_time(205_765 as u64).saturating_mul(w as u64))
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction MaxDetailsLength (r:1 w:0)
    // Storage: CorporateAction CAIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: CorporateAction DefaultTargetIdentities (r:1 w:0)
    // Storage: CorporateAction DefaultWithholdingTax (r:1 w:0)
    // Storage: CorporateAction DidWithholdingTax (r:1 w:0)
    // Storage: Checkpoint ScheduleRefCount (r:0 w:1)
    // Storage: CorporateAction CorporateActions (r:0 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    /// The range of component `w` is `[0, 1000]`.
    /// The range of component `t` is `[0, 500]`.
    fn initiate_corporate_action_use_defaults(w: u32, t: u32) -> Weight {
        // Minimum execution time: 213_725 nanoseconds.
        Weight::from_ref_time(201_311_207 as u64)
            // Standard Error: 2_642
            .saturating_add(Weight::from_ref_time(181_785 as u64).saturating_mul(w as u64))
            // Standard Error: 5_282
            .saturating_add(Weight::from_ref_time(4_618 as u64).saturating_mul(t as u64))
            .saturating_add(DbWeight::get().reads(15 as u64))
            .saturating_add(DbWeight::get().writes(6 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction MaxDetailsLength (r:1 w:0)
    // Storage: CorporateAction CAIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Checkpoint ScheduleRefCount (r:0 w:1)
    // Storage: CorporateAction CorporateActions (r:0 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    /// The range of component `w` is `[0, 1000]`.
    /// The range of component `t` is `[0, 500]`.
    fn initiate_corporate_action_provided(w: u32, t: u32) -> Weight {
        // Minimum execution time: 328_516 nanoseconds.
        Weight::from_ref_time(228_960_175 as u64)
            // Standard Error: 2_737
            .saturating_add(Weight::from_ref_time(265_836 as u64).saturating_mul(w as u64))
            // Standard Error: 5_472
            .saturating_add(Weight::from_ref_time(170_404 as u64).saturating_mul(t as u64))
            .saturating_add(DbWeight::get().reads(12 as u64))
            .saturating_add(DbWeight::get().writes(6 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Storage: CorporateAction CADocLink (r:1 w:1)
    // Storage: Asset AssetDocuments (r:10 w:0)
    /// The range of component `d` is `[0, 1000]`.
    fn link_ca_doc(d: u32) -> Weight {
        // Minimum execution time: 50_022 nanoseconds.
        Weight::from_ref_time(43_234_892 as u64)
            // Standard Error: 10_312
            .saturating_add(Weight::from_ref_time(2_678_891 as u64).saturating_mul(d as u64))
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().reads((1 as u64).saturating_mul(d as u64)))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: CorporateBallot TimeRanges (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    // Storage: CorporateAction CADocLink (r:0 w:1)
    // Storage: CorporateBallot MotionNumChoices (r:0 w:1)
    // Storage: CorporateBallot Metas (r:0 w:1)
    // Storage: CorporateBallot RCV (r:0 w:1)
    fn remove_ca_with_ballot() -> Weight {
        // Minimum execution time: 76_051 nanoseconds.
        Weight::from_ref_time(77_222_000 as u64)
            .saturating_add(DbWeight::get().reads(8 as u64))
            .saturating_add(DbWeight::get().writes(8 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    // Storage: CorporateAction CADocLink (r:0 w:1)
    fn remove_ca_with_dist() -> Weight {
        // Minimum execution time: 82_913 nanoseconds.
        Weight::from_ref_time(83_644_000 as u64)
            .saturating_add(DbWeight::get().reads(9 as u64))
            .saturating_add(DbWeight::get().writes(6 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:2)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: CorporateBallot TimeRanges (r:1 w:0)
    fn change_record_date_with_ballot() -> Weight {
        // Minimum execution time: 92_782 nanoseconds.
        Weight::from_ref_time(93_413_000 as u64)
            .saturating_add(DbWeight::get().reads(13 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:2)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: CapitalDistribution Distributions (r:1 w:0)
    fn change_record_date_with_dist() -> Weight {
        // Minimum execution time: 95_286 nanoseconds.
        Weight::from_ref_time(96_608_000 as u64)
            .saturating_add(DbWeight::get().reads(13 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
}
