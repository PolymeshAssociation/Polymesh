// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_corporate_actions
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-22, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_corporate_actions
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_corporate_actions using the Substrate node and recommended hardware.
pub struct WeightInfo;
impl pallet_corporate_actions::WeightInfo for WeightInfo {
    // Storage: CorporateAction MaxDetailsLength (r:0 w:1)
    fn set_max_details_length() -> Weight {
        (42_777_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction DefaultTargetIdentities (r:1 w:1)
    fn set_default_targets(t: u32) -> Weight {
        (125_321_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((745_000 as Weight).saturating_mul(t as Weight))
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction DefaultWithholdingTax (r:1 w:1)
    fn set_default_withholding_tax() -> Weight {
        (66_114_000 as Weight)
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction DidWithholdingTax (r:1 w:1)
    fn set_did_withholding_tax(w: u32) -> Weight {
        (148_501_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((203_000 as Weight).saturating_mul(w as Weight))
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction MaxDetailsLength (r:1 w:0)
    // Storage: CorporateAction CAIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: CorporateAction DefaultTargetIdentities (r:1 w:0)
    // Storage: CorporateAction DefaultWithholdingTax (r:1 w:0)
    // Storage: CorporateAction DidWithholdingTax (r:1 w:0)
    // Storage: Checkpoint ScheduleRefCount (r:0 w:1)
    // Storage: CorporateAction CorporateActions (r:0 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    fn initiate_corporate_action_use_defaults(w: u32, t: u32) -> Weight {
        (317_619_000 as Weight)
            // Standard Error: 9_000
            .saturating_add((218_000 as Weight).saturating_mul(w as Weight))
            // Standard Error: 19_000
            .saturating_add((155_000 as Weight).saturating_mul(t as Weight))
            .saturating_add(DbWeight::get().reads(16 as Weight))
            .saturating_add(DbWeight::get().writes(7 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction MaxDetailsLength (r:1 w:0)
    // Storage: CorporateAction CAIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Checkpoint ScheduleRefCount (r:0 w:1)
    // Storage: CorporateAction CorporateActions (r:0 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    fn initiate_corporate_action_provided(w: u32, t: u32) -> Weight {
        (320_024_000 as Weight)
            // Standard Error: 13_000
            .saturating_add((443_000 as Weight).saturating_mul(w as Weight))
            // Standard Error: 27_000
            .saturating_add((524_000 as Weight).saturating_mul(t as Weight))
            .saturating_add(DbWeight::get().reads(13 as Weight))
            .saturating_add(DbWeight::get().writes(7 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:0)
    // Storage: CorporateAction CADocLink (r:1 w:1)
    // Storage: Asset AssetDocuments (r:10 w:0)
    fn link_ca_doc(d: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 141_000
            .saturating_add((11_060_000 as Weight).saturating_mul(d as Weight))
            .saturating_add(DbWeight::get().reads(6 as Weight))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(d as Weight)))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: CorporateBallot TimeRanges (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    // Storage: CorporateAction CADocLink (r:0 w:1)
    // Storage: CorporateBallot MotionNumChoices (r:0 w:1)
    // Storage: CorporateBallot Metas (r:0 w:1)
    // Storage: CorporateBallot RCV (r:0 w:1)
    fn remove_ca_with_ballot() -> Weight {
        (148_969_000 as Weight)
            .saturating_add(DbWeight::get().reads(8 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: CapitalDistribution Distributions (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:1)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:1)
    // Storage: CorporateAction Details (r:0 w:1)
    // Storage: CorporateAction CADocLink (r:0 w:1)
    fn remove_ca_with_dist() -> Weight {
        (133_199_000 as Weight)
            .saturating_add(DbWeight::get().reads(9 as Weight))
            .saturating_add(DbWeight::get().writes(6 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:2)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: CorporateBallot TimeRanges (r:1 w:0)
    fn change_record_date_with_ballot() -> Weight {
        (247_549_000 as Weight)
            .saturating_add(DbWeight::get().reads(14 as Weight))
            .saturating_add(DbWeight::get().writes(6 as Weight))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: CorporateAction CorporateActions (r:1 w:1)
    // Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
    // Storage: Checkpoint ScheduleRefCount (r:1 w:2)
    // Storage: Checkpoint Schedules (r:1 w:1)
    // Storage: Checkpoint SchedulesMaxComplexity (r:1 w:0)
    // Storage: Checkpoint ScheduleIdSequence (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: CapitalDistribution Distributions (r:1 w:0)
    fn change_record_date_with_dist() -> Weight {
        (167_270_000 as Weight)
            .saturating_add(DbWeight::get().reads(14 as Weight))
            .saturating_add(DbWeight::get().writes(6 as Weight))
    }
}
