// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-28, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_identity
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_identity using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_identity::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:2 w:1)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: System ParentHash (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:2)
    // Storage: Identity Authorizations (r:0 w:2)
    fn cdd_register_did(i: u32) -> Weight {
        Weight::from_ref_time(87_207_000 as u64)
            // Standard Error: 277_000
            .saturating_add(Weight::from_ref_time(21_687_000 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(8 as u64))
            .saturating_add(DbWeight::get().reads((1 as u64).saturating_mul(i as u64)))
            .saturating_add(DbWeight::get().writes(4 as u64))
            .saturating_add(DbWeight::get().writes((2 as u64).saturating_mul(i as u64)))
    }
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Instance2Group InactiveMembers (r:1 w:1)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn invalidate_cdd_claims() -> Weight {
        Weight::from_ref_time(91_475_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(3 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity AccountKeyRefCount (r:2 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:2 w:0)
    // Storage: Identity Authorizations (r:2 w:0)
    // Storage: Identity DidKeys (r:0 w:2)
    fn remove_secondary_keys(i: u32) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 541_000
            .saturating_add(Weight::from_ref_time(33_882_000 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(1 as u64))
            .saturating_add(DbWeight::get().reads((4 as u64).saturating_mul(i as u64)))
            .saturating_add(DbWeight::get().writes((2 as u64).saturating_mul(i as u64)))
    }
    // Storage: Identity Authorizations (r:2 w:2)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: Identity KeyRecords (r:2 w:2)
    // Storage: Identity AccountKeyRefCount (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Identity AuthorizationsGiven (r:0 w:2)
    // Storage: Identity DidKeys (r:0 w:2)
    fn accept_primary_key() -> Weight {
        Weight::from_ref_time(143_309_000 as u64)
            .saturating_add(DbWeight::get().reads(9 as u64))
            .saturating_add(DbWeight::get().writes(9 as u64))
    }
    // Storage: Identity Authorizations (r:2 w:2)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:2)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Identity AuthorizationsGiven (r:0 w:2)
    // Storage: Identity DidKeys (r:0 w:1)
    fn rotate_primary_key_to_secondary() -> Weight {
        Weight::from_ref_time(127_719_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(8 as u64))
    }
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:0 w:1)
    fn change_cdd_requirement_for_mk_rotation() -> Weight {
        Weight::from_ref_time(21_657_000 as u64).saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity DidKeys (r:0 w:1)
    // Storage: Identity CurrentDid (r:0 w:1)
    fn join_identity_as_key() -> Weight {
        Weight::from_ref_time(115_020_000 as u64)
            .saturating_add(DbWeight::get().reads(10 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:1)
    fn leave_identity_as_key() -> Weight {
        Weight::from_ref_time(63_942_000 as u64)
            .saturating_add(DbWeight::get().reads(4 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    fn add_claim() -> Weight {
        Weight::from_ref_time(74_138_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:1 w:0)
    fn revoke_claim() -> Weight {
        Weight::from_ref_time(93_044_000 as u64)
            .saturating_add(DbWeight::get().reads(3 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset ScopeIdOf (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:1 w:0)
    fn revoke_claim_by_index() -> Weight {
        Weight::from_ref_time(88_241_000 as u64)
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:2 w:1)
    fn set_secondary_key_permissions() -> Weight {
        Weight::from_ref_time(53_854_000 as u64)
            .saturating_add(DbWeight::get().reads(2 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    fn permissions_cost(a: u32, p: u32, l: u32, e: u32) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 60_000
            .saturating_add(Weight::from_ref_time(296_000 as u64).saturating_mul(a as u64))
            // Standard Error: 60_000
            .saturating_add(Weight::from_ref_time(301_000 as u64).saturating_mul(p as u64))
            // Standard Error: 607_000
            .saturating_add(Weight::from_ref_time(37_546_000 as u64).saturating_mul(l as u64))
            // Standard Error: 607_000
            .saturating_add(Weight::from_ref_time(36_844_000 as u64).saturating_mul(e as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity IsDidFrozen (r:0 w:1)
    fn freeze_secondary_keys() -> Weight {
        Weight::from_ref_time(40_657_000 as u64)
            .saturating_add(DbWeight::get().reads(1 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity IsDidFrozen (r:0 w:1)
    fn unfreeze_secondary_keys() -> Weight {
        Weight::from_ref_time(36_631_000 as u64)
            .saturating_add(DbWeight::get().reads(1 as u64))
            .saturating_add(DbWeight::get().writes(1 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity Authorizations (r:0 w:1)
    fn add_authorization() -> Weight {
        Weight::from_ref_time(50_950_000 as u64)
            .saturating_add(DbWeight::get().reads(2 as u64))
            .saturating_add(DbWeight::get().writes(3 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    fn remove_authorization() -> Weight {
        Weight::from_ref_time(51_898_000 as u64)
            .saturating_add(DbWeight::get().reads(2 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity OffChainAuthorizationNonce (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:2)
    fn add_secondary_keys_with_authorization(i: u32) -> Weight {
        Weight::from_ref_time(118_228_000 as u64)
            // Standard Error: 888_000
            .saturating_add(Weight::from_ref_time(98_154_000 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().reads(5 as u64))
            .saturating_add(DbWeight::get().reads((1 as u64).saturating_mul(i as u64)))
            .saturating_add(DbWeight::get().writes(1 as u64))
            .saturating_add(DbWeight::get().writes((2 as u64).saturating_mul(i as u64)))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:3 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset ScopeIdOf (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:1 w:1)
    // Storage: Asset BalanceOf (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    fn add_investor_uniqueness_claim() -> Weight {
        Weight::from_ref_time(2_974_629_000 as u64)
            .saturating_add(DbWeight::get().reads(13 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:3 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset ScopeIdOf (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:1 w:1)
    // Storage: Asset BalanceOf (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    fn add_investor_uniqueness_claim_v2() -> Weight {
        Weight::from_ref_time(4_439_255_000 as u64)
            .saturating_add(DbWeight::get().reads(13 as u64))
            .saturating_add(DbWeight::get().writes(4 as u64))
    }

    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity CustomClaimsInverse (r:1 w:1)
    // Storage: Identity CustomClaimIdSequence (r:1 w:1)
    // Storage: Identity CustomClaims (r:0 w:1)
    fn register_custom_claim_type(n: u32) -> Weight {
        Weight::from_ref_time(44_816_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(8_000 as u64).saturating_mul(n as u64))
            .saturating_add(DbWeight::get().reads(3 as u64))
            .saturating_add(DbWeight::get().writes(3 as u64))
    }
}
