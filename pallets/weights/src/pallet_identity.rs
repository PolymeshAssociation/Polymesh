// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-17, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-hel1-1`, CPU: `Intel Xeon Processor (Skylake, IBRS)`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_identity
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_identity using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_identity::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:2 w:1)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: System ParentHash (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:2)
    // Storage: Identity Authorizations (r:0 w:2)
    /// The range of component `i` is `[0, 200]`.
    fn cdd_register_did(i: u32) -> Weight {
        // Minimum execution time: 111_014 nanoseconds.
        Weight::from_ref_time(19_327_500)
            // Standard Error: 458_413
            .saturating_add(Weight::from_ref_time(22_398_817).saturating_mul(i.into()))
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(i.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(i.into())))
    }
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Instance2Group InactiveMembers (r:1 w:1)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn invalidate_cdd_claims() -> Weight {
        // Minimum execution time: 126_500 nanoseconds.
        Weight::from_ref_time(131_195_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity AccountKeyRefCount (r:2 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:2 w:0)
    // Storage: Identity DidKeys (r:0 w:2)
    /// The range of component `i` is `[0, 200]`.
    fn remove_secondary_keys(i: u32) -> Weight {
        // Minimum execution time: 62_023 nanoseconds.
        Weight::from_ref_time(78_391_638)
            // Standard Error: 296_544
            .saturating_add(Weight::from_ref_time(19_153_288).saturating_mul(i.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(i.into())))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(i.into())))
    }
    // Storage: Identity Authorizations (r:2 w:2)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: Identity KeyRecords (r:2 w:2)
    // Storage: Identity AccountKeyRefCount (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Identity AuthorizationsGiven (r:0 w:2)
    // Storage: Identity DidKeys (r:0 w:2)
    fn accept_primary_key() -> Weight {
        // Minimum execution time: 191_139 nanoseconds.
        Weight::from_ref_time(199_982_000)
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(9))
    }
    // Storage: Identity Authorizations (r:2 w:2)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:2)
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Identity AuthorizationsGiven (r:0 w:2)
    // Storage: Identity DidKeys (r:0 w:1)
    fn rotate_primary_key_to_secondary() -> Weight {
        // Minimum execution time: 164_583 nanoseconds.
        Weight::from_ref_time(169_915_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(8))
    }
    // Storage: Identity CddAuthForPrimaryKeyRotation (r:0 w:1)
    fn change_cdd_requirement_for_mk_rotation() -> Weight {
        // Minimum execution time: 34_772 nanoseconds.
        Weight::from_ref_time(37_541_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity DidKeys (r:0 w:1)
    // Storage: Identity CurrentDid (r:0 w:1)
    fn join_identity_as_key() -> Weight {
        // Minimum execution time: 149_863 nanoseconds.
        Weight::from_ref_time(170_818_000)
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:0)
    // Storage: MultiSig MultiSigToIdentity (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:1)
    fn leave_identity_as_key() -> Weight {
        // Minimum execution time: 95_107 nanoseconds.
        Weight::from_ref_time(99_637_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    fn add_claim() -> Weight {
        // Minimum execution time: 102_976 nanoseconds.
        Weight::from_ref_time(109_131_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:1 w:0)
    fn revoke_claim() -> Weight {
        // Minimum execution time: 108_338 nanoseconds.
        Weight::from_ref_time(112_467_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset ScopeIdOf (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:1 w:0)
    fn revoke_claim_by_index() -> Weight {
        // Minimum execution time: 123_665 nanoseconds.
        Weight::from_ref_time(128_171_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:2 w:1)
    fn set_secondary_key_permissions() -> Weight {
        // Minimum execution time: 80_035 nanoseconds.
        Weight::from_ref_time(85_941_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    /// The range of component `a` is `[0, 1000]`.
    /// The range of component `p` is `[0, 1000]`.
    /// The range of component `l` is `[0, 100]`.
    /// The range of component `e` is `[0, 100]`.
    fn permissions_cost(_a: u32, _p: u32, l: u32, e: u32) -> Weight {
        // Minimum execution time: 261_449 nanoseconds.
        Weight::from_ref_time(263_862_000)
            // Standard Error: 576_752
            .saturating_add(Weight::from_ref_time(24_197_207).saturating_mul(l.into()))
            // Standard Error: 576_752
            .saturating_add(Weight::from_ref_time(23_306_416).saturating_mul(e.into()))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity IsDidFrozen (r:0 w:1)
    fn freeze_secondary_keys() -> Weight {
        // Minimum execution time: 58_055 nanoseconds.
        Weight::from_ref_time(87_254_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity IsDidFrozen (r:0 w:1)
    fn unfreeze_secondary_keys() -> Weight {
        // Minimum execution time: 59_064 nanoseconds.
        Weight::from_ref_time(60_353_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity Authorizations (r:0 w:1)
    fn add_authorization() -> Weight {
        // Minimum execution time: 69_508 nanoseconds.
        Weight::from_ref_time(74_760_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    fn remove_authorization() -> Weight {
        // Minimum execution time: 77_392 nanoseconds.
        Weight::from_ref_time(79_965_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity OffChainAuthorizationNonce (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity DidKeys (r:0 w:2)
    /// The range of component `i` is `[0, 200]`.
    fn add_secondary_keys_with_authorization(i: u32) -> Weight {
        // Minimum execution time: 80_007 nanoseconds.
        Weight::from_ref_time(180_248_614)
            // Standard Error: 1_273_103
            .saturating_add(Weight::from_ref_time(93_817_973).saturating_mul(i.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(i.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(i.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:3 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset ScopeIdOf (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:1 w:1)
    // Storage: Asset BalanceOf (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    fn add_investor_uniqueness_claim() -> Weight {
        // Minimum execution time: 2_173_618 nanoseconds.
        Weight::from_ref_time(2_391_597_000)
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:3 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset ScopeIdOf (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:1 w:1)
    // Storage: Asset BalanceOf (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    fn add_investor_uniqueness_claim_v2() -> Weight {
        // Minimum execution time: 4_101_217 nanoseconds.
        Weight::from_ref_time(4_193_857_000)
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity CustomClaimsInverse (r:1 w:1)
    // Storage: Identity CustomClaimIdSequence (r:1 w:1)
    // Storage: Identity CustomClaims (r:0 w:1)
    /// The range of component `n` is `[1, 2048]`.
    fn register_custom_claim_type(n: u32) -> Weight {
        // Minimum execution time: 71_269 nanoseconds.
        Weight::from_ref_time(98_307_308)
            // Standard Error: 2_591
            .saturating_add(Weight::from_ref_time(7_291).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
}
