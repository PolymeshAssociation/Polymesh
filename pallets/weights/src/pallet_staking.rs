// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-25, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_staking
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct WeightInfo;
impl pallet_staking::WeightInfo for WeightInfo {
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Payee (r:0 w:1)
    fn bond() -> Weight {
        (112_777_000 as Weight)
            .saturating_add(DbWeight::get().reads(6 as Weight))
            .saturating_add(DbWeight::get().writes(4 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Bonded (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    fn bond_extra() -> Weight {
        (95_227_000 as Weight)
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn unbond() -> Weight {
        (92_495_000 as Weight)
            .saturating_add(DbWeight::get().reads(6 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn withdraw_unbonded_update(s: u32) -> Weight {
        (95_979_000 as Weight)
            // Standard Error: 38_000
            .saturating_add((73_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    fn withdraw_unbonded_kill(s: u32) -> Weight {
        (133_202_000 as Weight)
            // Standard Error: 81_000
            .saturating_add((2_352_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Storage: Staking ValidatorCommissionCap (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn validate() -> Weight {
        (66_893_000 as Weight)
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking MinimumBondThreshold (r:0 w:1)
    fn set_min_bond_threshold() -> Weight {
        (21_661_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    fn add_permissioned_validator() -> Weight {
        (79_290_000 as Weight)
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    fn remove_permissioned_validator() -> Weight {
        (40_726_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCommissionCap (r:1 w:1)
    // Storage: Staking Validators (r:2 w:1)
    fn set_commission_cap(m: u32) -> Weight {
        (70_150_000 as Weight)
            // Standard Error: 166_000
            .saturating_add((16_378_000 as Weight).saturating_mul(m as Weight))
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
            .saturating_add(DbWeight::get().writes(2 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Nominators (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Staking Validators (r:2 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    fn nominate(n: u32) -> Weight {
        (147_545_000 as Weight)
            // Standard Error: 911_000
            .saturating_add((10_663_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(11 as Weight))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn chill() -> Weight {
        (37_337_000 as Weight)
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Payee (r:0 w:1)
    fn set_payee() -> Weight {
        (48_978_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking Ledger (r:2 w:2)
    fn set_controller() -> Weight {
        (48_764_000 as Weight)
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking ValidatorCount (r:0 w:1)
    fn set_validator_count(c: u32) -> Weight {
        (3_184_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_no_eras() -> Weight {
        (3_245_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_new_era() -> Weight {
        (3_161_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_new_era_always() -> Weight {
        (5_301_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking Invulnerables (r:0 w:1)
    fn set_invulnerables(v: u32) -> Weight {
        (5_572_000 as Weight)
            // Standard Error: 0
            .saturating_add((18_000 as Weight).saturating_mul(v as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Ledger (r:0 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    fn force_unstake(s: u32) -> Weight {
        (85_526_000 as Weight)
            // Standard Error: 60_000
            .saturating_add((2_232_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Staking UnappliedSlashes (r:1 w:1)
    fn cancel_deferred_slash(s: u32) -> Weight {
        (1_611_610_000 as Weight)
            // Standard Error: 169_000
            .saturating_add((8_614_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:2 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:2 w:0)
    // Storage: System Account (r:3 w:3)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Identity KeyRecords (r:4 w:0)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    fn payout_stakers(n: u32) -> Weight {
        (1_802_272_000 as Weight)
            // Standard Error: 867_000
            .saturating_add((116_865_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(15 as Weight))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(4 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:2 w:0)
    // Storage: Staking Ledger (r:2 w:2)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:2 w:0)
    // Storage: System Account (r:3 w:3)
    // Storage: Balances Locks (r:2 w:2)
    // Storage: Identity KeyRecords (r:3 w:0)
    fn payout_stakers_alive_controller(n: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 1_074_000
            .saturating_add((134_736_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(15 as Weight))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(4 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn rebond(u: u32) -> Weight {
        (78_101_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((1_000 as Weight).saturating_mul(u as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:1)
    // Storage: Staking ErasStakersClipped (r:0 w:2)
    // Storage: Staking ErasValidatorPrefs (r:0 w:2)
    // Storage: Staking ErasValidatorReward (r:0 w:1)
    // Storage: Staking ErasRewardPoints (r:0 w:1)
    // Storage: Staking ErasStakers (r:0 w:2)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    fn set_history_depth(e: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 762_000
            .saturating_add((49_163_000 as Weight).saturating_mul(e as Weight))
            .saturating_add(DbWeight::get().reads(2 as Weight))
            .saturating_add(DbWeight::get().writes(4 as Weight))
            .saturating_add(DbWeight::get().writes((7 as Weight).saturating_mul(e as Weight)))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Ledger (r:0 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    fn reap_stash(s: u32) -> Weight {
        (86_714_000 as Weight)
            // Standard Error: 72_000
            .saturating_add((2_368_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Staking CurrentEra (r:1 w:1)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking QueuedElected (r:1 w:0)
    // Storage: Staking Validators (r:2 w:0)
    // Storage: Staking Bonded (r:101 w:0)
    // Storage: Staking Ledger (r:101 w:0)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Storage: Identity KeyRecords (r:101 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:202 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:0)
    // Storage: Staking Nominators (r:101 w:0)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: Staking MinimumValidatorCount (r:1 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking ErasStakersClipped (r:0 w:1)
    // Storage: Staking ErasValidatorPrefs (r:0 w:1)
    // Storage: Staking SnapshotValidators (r:0 w:1)
    // Storage: Staking ErasStakers (r:0 w:1)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Storage: Staking IsCurrentSessionFinal (r:0 w:1)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    // Storage: Staking QueuedScore (r:0 w:1)
    // Storage: Staking EraElectionStatus (r:0 w:1)
    // Storage: Staking SnapshotNominators (r:0 w:1)
    fn new_era(v: u32, n: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 24_540_000
            .saturating_add((619_606_000 as Weight).saturating_mul(v as Weight))
            // Standard Error: 1_233_000
            .saturating_add((122_105_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(11 as Weight))
            .saturating_add(DbWeight::get().reads((8 as Weight).saturating_mul(v as Weight)))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(v as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:101 w:0)
    // Storage: Staking Ledger (r:101 w:101)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:101 w:0)
    // Storage: System Account (r:102 w:102)
    // Storage: Balances Locks (r:101 w:101)
    // Storage: Identity KeyRecords (r:102 w:0)
    fn payout_all(v: u32, n: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 312_039_000
            .saturating_add((4_884_874_000 as Weight).saturating_mul(v as Weight))
            // Standard Error: 15_678_000
            .saturating_add((527_158_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().reads((8 as Weight).saturating_mul(v as Weight)))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(1 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(v as Weight)))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
    }
    // Storage: Staking Bonded (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn do_slash(l: u32) -> Weight {
        (97_397_000 as Weight)
            // Standard Error: 242_000
            .saturating_add((712_000 as Weight).saturating_mul(l as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking QueuedScore (r:1 w:1)
    // Storage: Staking SnapshotValidators (r:1 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking SnapshotNominators (r:1 w:0)
    // Storage: Staking Validators (r:500 w:0)
    // Storage: Staking Nominators (r:500 w:0)
    // Storage: Staking SlashingSpans (r:100 w:0)
    // Storage: Staking Bonded (r:500 w:0)
    // Storage: Staking Ledger (r:500 w:0)
    // Storage: Staking QueuedElected (r:0 w:1)
    fn submit_solution_better(v: u32, n: u32, a: u32, w: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 315_000
            .saturating_add((1_422_000 as Weight).saturating_mul(v as Weight))
            // Standard Error: 315_000
            .saturating_add((698_000 as Weight).saturating_mul(n as Weight))
            // Standard Error: 1_053_000
            .saturating_add((88_161_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 3_953_000
            .saturating_add((8_812_000 as Weight).saturating_mul(w as Weight))
            .saturating_add(DbWeight::get().reads(6 as Weight))
            .saturating_add(DbWeight::get().reads((4 as Weight).saturating_mul(a as Weight)))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(w as Weight)))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking SlashingAllowedFor (r:0 w:1)
    fn change_slashing_allowed_for() -> Weight {
        (23_375_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    fn update_permissioned_validator_intended_count() -> Weight {
        (26_164_000 as Weight)
            .saturating_add(DbWeight::get().reads(2 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    fn increase_validator_count() -> Weight {
        (8_676_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    fn scale_validator_count() -> Weight {
        (9_012_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
}
