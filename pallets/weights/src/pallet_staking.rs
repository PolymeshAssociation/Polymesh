// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-16, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: ``, CPU: `Intel(R) Core(TM) i5-10600K CPU @ 4.10GHz`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_staking
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_staking::WeightInfo for SubstrateWeight {
    // Storage: Staking Bonded (r:1 w:1)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:2 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    fn bond() -> Weight {
        // Minimum execution time: 78_842 nanoseconds.
        Weight::from_ref_time(79_168_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking Bonded (r:1 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:1 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    fn bond_extra() -> Weight {
        // Minimum execution time: 78_725 nanoseconds.
        Weight::from_ref_time(81_274_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking Ledger (r:1 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:1 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    // Proof Skipped: Identity IsDidFrozen (max_values: None, max_size: None, mode: Measured)
    fn unbond() -> Weight {
        // Minimum execution time: 80_824 nanoseconds.
        Weight::from_ref_time(86_371_000)
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking Ledger (r:1 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_update(s: u32, ) -> Weight {
        // Minimum execution time: 51_805 nanoseconds.
        Weight::from_ref_time(55_531_803)
            // Standard Error: 6_980
            .saturating_add(Weight::from_ref_time(21_396).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking Ledger (r:1 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:1 w:1)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Payee (r:0 w:1)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    // Storage: Staking SpanSlash (r:0 w:99)
    // Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_kill(s: u32, ) -> Weight {
        // Minimum execution time: 80_833 nanoseconds.
        Weight::from_ref_time(91_456_810)
            // Standard Error: 20_887
            .saturating_add(Weight::from_ref_time(1_728_844).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(6))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking MinValidatorBond (r:1 w:0)
    // Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: Staking MinCommission (r:1 w:0)
    // Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking ValidatorCommissionCap (r:1 w:0)
    // Proof: Staking ValidatorCommissionCap (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:1)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking MaxValidatorsCount (r:1 w:0)
    // Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Proof Skipped: Identity AccountKeyRefCount (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:1 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking CounterForValidators (r:1 w:1)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn validate() -> Weight {
        // Minimum execution time: 88_469 nanoseconds.
        Weight::from_ref_time(91_729_000)
            .saturating_add(DbWeight::get().reads(12))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:128 w:128)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    /// The range of component `k` is `[1, 128]`.
    fn kick(k: u32, ) -> Weight {
        // Minimum execution time: 58_464 nanoseconds.
        Weight::from_ref_time(52_189_085)
            // Standard Error: 27_061
            .saturating_add(Weight::from_ref_time(10_452_250).saturating_mul(k.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(k.into())))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking MinNominatorBond (r:1 w:0)
    // Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:1)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking MaxNominatorsCount (r:1 w:0)
    // Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:17 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Proof Skipped: Instance2Group ActiveMembers (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity Claims (r:2 w:0)
    // Proof Skipped: Identity Claims (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:1 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking CounterForNominators (r:1 w:1)
    // Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 16]`.
    fn nominate(n: u32, ) -> Weight {
        // Minimum execution time: 108_032 nanoseconds.
        Weight::from_ref_time(100_290_221)
            // Standard Error: 83_641
            .saturating_add(Weight::from_ref_time(6_321_196).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:1 w:1)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Proof Skipped: Identity AccountKeyRefCount (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CounterForValidators (r:1 w:1)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    fn chill() -> Weight {
        // Minimum execution time: 74_584 nanoseconds.
        Weight::from_ref_time(76_318_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Payee (r:0 w:1)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    fn set_payee() -> Weight {
        // Minimum execution time: 24_080 nanoseconds.
        Weight::from_ref_time(24_759_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:3 w:2)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    fn set_controller() -> Weight {
        // Minimum execution time: 38_272 nanoseconds.
        Weight::from_ref_time(38_777_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking ValidatorCount (r:0 w:1)
    // Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_validator_count() -> Weight {
        // Minimum execution time: 6_013 nanoseconds.
        Weight::from_ref_time(6_131_000)
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    // Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    fn force_no_eras() -> Weight {
        // Minimum execution time: 20_137 nanoseconds.
        Weight::from_ref_time(20_517_000)
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    // Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    fn force_new_era() -> Weight {
        // Minimum execution time: 20_784 nanoseconds.
        Weight::from_ref_time(21_423_000)
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    // Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    fn force_new_era_always() -> Weight {
        // Minimum execution time: 19_867 nanoseconds.
        Weight::from_ref_time(21_442_000)
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Invulnerables (r:0 w:1)
    // Proof Skipped: Staking Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn set_invulnerables(v: u32, ) -> Weight {
        // Minimum execution time: 6_074 nanoseconds.
        Weight::from_ref_time(7_116_742)
            // Standard Error: 668
            .saturating_add(Weight::from_ref_time(14_720).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:1)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking CounterForValidators (r:1 w:1)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:0 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Payee (r:0 w:1)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    // Storage: Staking SpanSlash (r:0 w:99)
    // Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 100]`.
    fn force_unstake(s: u32, ) -> Weight {
        // Minimum execution time: 71_466 nanoseconds.
        Weight::from_ref_time(81_091_574)
            // Standard Error: 5_902
            .saturating_add(Weight::from_ref_time(1_681_876).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking UnappliedSlashes (r:1 w:1)
    // Proof Skipped: Staking UnappliedSlashes (max_values: None, max_size: None, mode: Measured)
    /// The range of component `s` is `[1, 1000]`.
    fn cancel_deferred_slash(s: u32, ) -> Weight {
        // Minimum execution time: 141_343 nanoseconds.
        Weight::from_ref_time(1_042_306_828)
            // Standard Error: 84_550
            .saturating_add(Weight::from_ref_time(5_388_720).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Proof: Staking ErasValidatorReward (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:2049 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:1 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
    // Storage: Staking Payee (r:2049 w:0)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    // Storage: System Account (r:2050 w:2050)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:4098 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity IsDidFrozen (r:2048 w:0)
    // Proof Skipped: Identity IsDidFrozen (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[0, 2048]`.
    fn payout_stakers_dead_controller(n: u32, ) -> Weight {
        // Minimum execution time: 210_810 nanoseconds.
        Weight::from_ref_time(978_246_844)
            // Standard Error: 30_311
            .saturating_add(Weight::from_ref_time(52_685_434).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(12))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(3))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(n.into())))
    }
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Proof: Staking ErasValidatorReward (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:2049 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:2049 w:2049)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
    // Storage: Staking Payee (r:2049 w:0)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    // Storage: System Account (r:2050 w:2050)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:2049 w:2049)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:2050 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    /// The range of component `n` is `[0, 2048]`.
    fn payout_stakers_alive_staked(n: u32, ) -> Weight {
        // Minimum execution time: 236_817 nanoseconds.
        Weight::from_ref_time(800_685_316)
            // Standard Error: 32_250
            .saturating_add(Weight::from_ref_time(61_964_173).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(13))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(n.into())))
    }
    // Storage: Staking Ledger (r:1 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:1 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    /// The range of component `l` is `[1, 32]`.
    fn rebond(l: u32, ) -> Weight {
        // Minimum execution time: 59_718 nanoseconds.
        Weight::from_ref_time(60_976_755)
            // Standard Error: 5_568
            .saturating_add(Weight::from_ref_time(45_012).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: System Account (r:1 w:1)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:1 w:1)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:1 w:1)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking CounterForValidators (r:1 w:1)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:1 w:1)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Ledger (r:0 w:1)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Payee (r:0 w:1)
    // Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    // Storage: Staking SpanSlash (r:0 w:100)
    // Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 100]`.
    fn reap_stash(s: u32, ) -> Weight {
        // Minimum execution time: 106_281 nanoseconds.
        Weight::from_ref_time(105_157_620)
            // Standard Error: 3_868
            .saturating_add(Weight::from_ref_time(1_748_626).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: ElectionProviderMultiPhase SignedSubmissionIndices (r:1 w:1)
    // Proof Skipped: ElectionProviderMultiPhase SignedSubmissionIndices (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ElectionProviderMultiPhase SignedSubmissionNextIndex (r:1 w:1)
    // Proof Skipped: ElectionProviderMultiPhase SignedSubmissionNextIndex (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ElectionProviderMultiPhase SnapshotMetadata (r:1 w:1)
    // Proof Skipped: ElectionProviderMultiPhase SnapshotMetadata (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ElectionProviderMultiPhase SignedSubmissionsMap (r:1 w:0)
    // Proof Skipped: ElectionProviderMultiPhase SignedSubmissionsMap (max_values: None, max_size: None, mode: Measured)
    // Storage: System BlockWeight (r:1 w:1)
    // Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
    // Storage: ElectionProviderMultiPhase QueuedSolution (r:1 w:0)
    // Proof Skipped: ElectionProviderMultiPhase QueuedSolution (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking CounterForNominators (r:1 w:0)
    // Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking CounterForValidators (r:1 w:0)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:11 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:110 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:109 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:109 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: ElectionProviderMultiPhase Round (r:1 w:1)
    // Proof Skipped: ElectionProviderMultiPhase Round (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ElectionProviderMultiPhase CurrentPhase (r:1 w:1)
    // Proof Skipped: ElectionProviderMultiPhase CurrentPhase (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Staking MinimumValidatorCount (r:1 w:0)
    // Proof: Staking MinimumValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking CurrentEra (r:1 w:1)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking ErasStakersClipped (r:0 w:10)
    // Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasValidatorPrefs (r:0 w:10)
    // Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
    // Storage: Staking ErasStakers (r:0 w:10)
    // Proof Skipped: Staking ErasStakers (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Proof: Staking ErasTotalStake (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    // Proof: Staking ErasStartSessionIndex (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
    // Storage: Staking MinimumActiveStake (r:0 w:1)
    // Proof: Staking MinimumActiveStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: ElectionProviderMultiPhase DesiredTargets (r:0 w:1)
    // Proof Skipped: ElectionProviderMultiPhase DesiredTargets (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ElectionProviderMultiPhase Snapshot (r:0 w:1)
    // Proof Skipped: ElectionProviderMultiPhase Snapshot (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `v` is `[1, 10]`.
    /// The range of component `n` is `[0, 100]`.
    fn new_era(v: u32, n: u32, ) -> Weight {
        // Minimum execution time: 506_030 nanoseconds.
        Weight::from_ref_time(507_068_000)
            // Standard Error: 2_493_401
            .saturating_add(Weight::from_ref_time(56_636_705).saturating_mul(v.into()))
            // Standard Error: 257_176
            .saturating_add(Weight::from_ref_time(19_911_648).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(15))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(12))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(v.into())))
    }
    // Storage: Staking CounterForNominators (r:1 w:0)
    // Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking CounterForValidators (r:1 w:0)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:101 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:201 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking Bonded (r:200 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:200 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: System BlockWeight (r:1 w:1)
    // Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
    // Storage: Staking MinimumActiveStake (r:0 w:1)
    // Proof: Staking MinimumActiveStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// The range of component `v` is `[50, 100]`.
    /// The range of component `n` is `[50, 100]`.
    fn get_npos_voters(v: u32, n: u32, ) -> Weight {
        // Minimum execution time: 2_676_359 nanoseconds.
        Weight::from_ref_time(2_696_236_000)
            // Standard Error: 324_718
            .saturating_add(Weight::from_ref_time(3_531_256).saturating_mul(v.into()))
            // Standard Error: 324_718
            .saturating_add(Weight::from_ref_time(2_385_751).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking CounterForValidators (r:1 w:0)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:101 w:0)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: System BlockWeight (r:1 w:1)
    // Proof: System BlockWeight (max_values: Some(1), max_size: Some(48), added: 543, mode: MaxEncodedLen)
    /// The range of component `v` is `[50, 100]`.
    fn get_npos_targets(v: u32, ) -> Weight {
        // Minimum execution time: 352_383 nanoseconds.
        Weight::from_ref_time(64_055_721)
            // Standard Error: 30_155
            .saturating_add(Weight::from_ref_time(5_809_704).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking MinCommission (r:0 w:1)
    // Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking MinValidatorBond (r:0 w:1)
    // Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: Staking MaxValidatorsCount (r:0 w:1)
    // Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking ChillThreshold (r:0 w:1)
    // Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    // Storage: Staking MaxNominatorsCount (r:0 w:1)
    // Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking MinNominatorBond (r:0 w:1)
    // Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    fn set_staking_configs_all_set() -> Weight {
        // Minimum execution time: 11_725 nanoseconds.
        Weight::from_ref_time(12_248_000)
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Staking MinCommission (r:0 w:1)
    // Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking MinValidatorBond (r:0 w:1)
    // Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: Staking MaxValidatorsCount (r:0 w:1)
    // Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking ChillThreshold (r:0 w:1)
    // Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    // Storage: Staking MaxNominatorsCount (r:0 w:1)
    // Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking MinNominatorBond (r:0 w:1)
    // Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    fn set_staking_configs_all_remove() -> Weight {
        // Minimum execution time: 11_513 nanoseconds.
        Weight::from_ref_time(11_888_000)
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:1 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Staking ChillThreshold (r:1 w:0)
    // Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:1 w:1)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Staking MaxValidatorsCount (r:1 w:0)
    // Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking CounterForValidators (r:1 w:1)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking MinValidatorBond (r:1 w:0)
    // Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Proof Skipped: Identity AccountKeyRefCount (max_values: None, max_size: None, mode: Measured)
    fn chill_other() -> Weight {
        // Minimum execution time: 95_697 nanoseconds.
        Weight::from_ref_time(96_226_000)
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking MinCommission (r:1 w:0)
    // Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:1 w:1)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    fn force_apply_min_commission() -> Weight {
        // Minimum execution time: 23_102 nanoseconds.
        Weight::from_ref_time(23_332_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking MinCommission (r:0 w:1)
    // Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_min_commission() -> Weight {
        // Minimum execution time: 6_385 nanoseconds.
        Weight::from_ref_time(6_472_000)
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Proof Skipped: Instance2Group ActiveMembers (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity Claims (r:2 w:0)
    // Proof Skipped: Identity Claims (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn add_permissioned_validator() -> Weight {
        // Minimum execution time: 56_687 nanoseconds.
        Weight::from_ref_time(57_031_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    fn remove_permissioned_validator() -> Weight {
        // Minimum execution time: 30_016 nanoseconds.
        Weight::from_ref_time(30_461_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking SlashingAllowedFor (r:0 w:1)
    // Proof: Staking SlashingAllowedFor (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    fn change_slashing_allowed_for() -> Weight {
        // Minimum execution time: 14_212 nanoseconds.
        Weight::from_ref_time(14_798_000)
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    fn update_permissioned_validator_intended_count() -> Weight {
        // Minimum execution time: 22_622 nanoseconds.
        Weight::from_ref_time(23_193_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Proof Skipped: Staking PermissionedIdentity (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity KeyRecords (r:100 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    // Proof Skipped: Identity IsDidFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Validators (r:100 w:100)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    // Storage: Identity AccountKeyRefCount (r:100 w:100)
    // Proof Skipped: Identity AccountKeyRefCount (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CounterForValidators (r:1 w:1)
    // Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Nominators (r:100 w:0)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 100]`.
    fn chill_from_governance(s: u32, ) -> Weight {
        // Minimum execution time: 85_720 nanoseconds.
        Weight::from_ref_time(64_804_121)
            // Standard Error: 22_544
            .saturating_add(Weight::from_ref_time(35_318_178).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(s.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(s.into())))
    }
    // Storage: Staking ValidatorCommissionCap (r:1 w:1)
    // Proof: Staking ValidatorCommissionCap (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Staking Validators (r:152 w:151)
    // Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 150]`.
    fn set_commission_cap(m: u32, ) -> Weight {
        // Minimum execution time: 42_961 nanoseconds.
        Weight::from_ref_time(50_056_294)
            // Standard Error: 8_439
            .saturating_add(Weight::from_ref_time(5_194_706).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(m.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(m.into())))
    }
    // Storage: Staking Nominators (r:16 w:16)
    // Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
    // Storage: Identity KeyRecords (r:32 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: Timestamp Now (r:1 w:0)
    // Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Proof Skipped: Instance2Group ActiveMembers (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Identity Claims (r:16 w:0)
    // Proof Skipped: Identity Claims (max_values: None, max_size: None, mode: Measured)
    // Storage: Identity ParentDid (r:16 w:0)
    // Proof Skipped: Identity ParentDid (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking Bonded (r:16 w:0)
    // Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
    // Storage: Staking Ledger (r:16 w:16)
    // Proof: Staking Ledger (max_values: None, max_size: Some(1091), added: 3566, mode: MaxEncodedLen)
    // Storage: Staking MinNominatorBond (r:1 w:0)
    // Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    // Storage: Balances Locks (r:16 w:16)
    // Proof Skipped: Balances Locks (max_values: None, max_size: None, mode: Measured)
    // Storage: System Account (r:16 w:16)
    // Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    // Storage: Identity IsDidFrozen (r:16 w:0)
    // Proof Skipped: Identity IsDidFrozen (max_values: None, max_size: None, mode: Measured)
    // Storage: Staking CounterForNominators (r:1 w:1)
    // Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 16]`.
    fn validate_cdd_expiry_nominators(n: u32, ) -> Weight {
        // Minimum execution time: 226_117 nanoseconds.
        Weight::from_ref_time(140_401_544)
            // Standard Error: 128_633
            .saturating_add(Weight::from_ref_time(107_261_253).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((10_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((4_u64).saturating_mul(n.into())))
    }
}
