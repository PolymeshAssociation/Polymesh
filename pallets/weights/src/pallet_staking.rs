// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-25, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_staking
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_staking::WeightInfo for SubstrateWeight {
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Payee (r:0 w:1)
    fn bond() -> Weight {
        // Minimum execution time: 63_979 nanoseconds.
        Weight::from_ref_time(64_590_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Bonded (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    fn bond_extra() -> Weight {
        // Minimum execution time: 60_962 nanoseconds.
        Weight::from_ref_time(61_874_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking Validators (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn unbond() -> Weight {
        // Minimum execution time: 58_888 nanoseconds.
        Weight::from_ref_time(59_409_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_update(s: u32) -> Weight {
        // Minimum execution time: 52_698 nanoseconds.
        Weight::from_ref_time(55_473_095)
            // Standard Error: 10_384
            .saturating_add(Weight::from_ref_time(37_791).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_kill(s: u32) -> Weight {
        // Minimum execution time: 70_239 nanoseconds.
        Weight::from_ref_time(75_825_109)
            // Standard Error: 14_661
            .saturating_add(Weight::from_ref_time(1_506_254).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Storage: Staking ValidatorCommissionCap (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn validate() -> Weight {
        // Minimum execution time: 50_413 nanoseconds.
        Weight::from_ref_time(50_854_000)
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Staking MinimumBondThreshold (r:0 w:1)
    fn set_min_bond_threshold() -> Weight {
        // Minimum execution time: 17_182 nanoseconds.
        Weight::from_ref_time(17_332_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    fn add_permissioned_validator() -> Weight {
        // Minimum execution time: 49_461 nanoseconds.
        Weight::from_ref_time(50_152_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    fn remove_permissioned_validator() -> Weight {
        // Minimum execution time: 29_975 nanoseconds.
        Weight::from_ref_time(30_777_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCommissionCap (r:1 w:1)
    // Storage: Staking Validators (r:2 w:1)
    /// The range of component `m` is `[0, 150]`.
    fn set_commission_cap(m: u32) -> Weight {
        // Minimum execution time: 33_963 nanoseconds.
        Weight::from_ref_time(23_510_002)
            // Standard Error: 18_380
            .saturating_add(Weight::from_ref_time(7_623_018).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(m.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(m.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Nominators (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Staking Validators (r:2 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    /// The range of component `n` is `[1, 16]`.
    fn nominate(n: u32) -> Weight {
        // Minimum execution time: 76_912 nanoseconds.
        Weight::from_ref_time(75_251_141)
            // Standard Error: 23_061
            .saturating_add(Weight::from_ref_time(3_896_516).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(11))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn chill() -> Weight {
        // Minimum execution time: 28_182 nanoseconds.
        Weight::from_ref_time(28_923_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Payee (r:0 w:1)
    fn set_payee() -> Weight {
        // Minimum execution time: 21_490 nanoseconds.
        Weight::from_ref_time(21_831_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking Ledger (r:2 w:2)
    fn set_controller() -> Weight {
        // Minimum execution time: 31_969 nanoseconds.
        Weight::from_ref_time(32_259_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking ValidatorCount (r:0 w:1)
    /// The range of component `c` is `[0, 1000]`.
    fn set_validator_count(c: u32) -> Weight {
        // Minimum execution time: 6_743 nanoseconds.
        Weight::from_ref_time(7_404_924)
            // Standard Error: 70
            .saturating_add(Weight::from_ref_time(4).saturating_mul(c.into()))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_no_eras() -> Weight {
        // Minimum execution time: 7_113 nanoseconds.
        Weight::from_ref_time(7_374_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_new_era() -> Weight {
        // Minimum execution time: 6_792 nanoseconds.
        Weight::from_ref_time(7_013_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_new_era_always() -> Weight {
        // Minimum execution time: 6_853 nanoseconds.
        Weight::from_ref_time(7_033_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Invulnerables (r:0 w:1)
    /// The range of component `v` is `[0, 1000]`.
    fn set_invulnerables(v: u32) -> Weight {
        // Minimum execution time: 7_514 nanoseconds.
        Weight::from_ref_time(7_638_784)
            // Standard Error: 102
            .saturating_add(Weight::from_ref_time(8_329).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Ledger (r:0 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    /// The range of component `s` is `[0, 100]`.
    fn force_unstake(s: u32) -> Weight {
        // Minimum execution time: 50_323 nanoseconds.
        Weight::from_ref_time(52_904_075)
            // Standard Error: 4_324
            .saturating_add(Weight::from_ref_time(1_515_165).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking UnappliedSlashes (r:1 w:1)
    /// The range of component `s` is `[1, 1000]`.
    fn cancel_deferred_slash(s: u32) -> Weight {
        // Minimum execution time: 97_870 nanoseconds.
        Weight::from_ref_time(884_214_773)
            // Standard Error: 73_183
            .saturating_add(Weight::from_ref_time(4_668_406).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:2 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:2 w:0)
    // Storage: System Account (r:3 w:3)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Identity KeyRecords (r:4 w:0)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    /// The range of component `n` is `[1, 2048]`.
    fn payout_stakers(n: u32) -> Weight {
        // Minimum execution time: 1_003_723 nanoseconds.
        Weight::from_ref_time(1_483_152_965)
            // Standard Error: 152_019
            .saturating_add(Weight::from_ref_time(48_944_980).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(15))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(n.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:2 w:0)
    // Storage: Staking Ledger (r:2 w:2)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:2 w:0)
    // Storage: System Account (r:3 w:3)
    // Storage: Balances Locks (r:2 w:2)
    // Storage: Identity KeyRecords (r:3 w:0)
    /// The range of component `n` is `[1, 2048]`.
    fn payout_stakers_alive_controller(n: u32) -> Weight {
        // Minimum execution time: 1_106_463 nanoseconds.
        Weight::from_ref_time(1_328_865_997)
            // Standard Error: 120_768
            .saturating_add(Weight::from_ref_time(57_264_608).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(15))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(n.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    /// The range of component `u` is `[0, 1000]`.
    /// The range of component `l` is `[1, 32]`.
    fn rebond(u: u32) -> Weight {
        // Minimum execution time: 47_949 nanoseconds.
        Weight::from_ref_time(49_739_043)
            // Standard Error: 5_104
            .saturating_add(Weight::from_ref_time(1_000).saturating_mul(u.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:1)
    // Storage: Staking ErasStakersClipped (r:0 w:2)
    // Storage: Staking ErasValidatorPrefs (r:0 w:2)
    // Storage: Staking ErasValidatorReward (r:0 w:1)
    // Storage: Staking ErasRewardPoints (r:0 w:1)
    // Storage: Staking ErasStakers (r:0 w:2)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    /// The range of component `e` is `[1, 100]`.
    fn set_history_depth(e: u32) -> Weight {
        // Minimum execution time: 42_097 nanoseconds.
        Weight::from_ref_time(42_479_000)
            // Standard Error: 71_075
            .saturating_add(Weight::from_ref_time(23_670_060).saturating_mul(e.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((7_u64).saturating_mul(e.into())))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Ledger (r:0 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    /// The range of component `s` is `[1, 100]`.
    fn reap_stash(s: u32) -> Weight {
        // Minimum execution time: 60_181 nanoseconds.
        Weight::from_ref_time(62_880_483)
            // Standard Error: 2_922
            .saturating_add(Weight::from_ref_time(1_565_560).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Staking CurrentEra (r:1 w:1)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking QueuedElected (r:1 w:0)
    // Storage: Staking Validators (r:2 w:0)
    // Storage: Staking Bonded (r:101 w:0)
    // Storage: Staking Ledger (r:101 w:0)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Storage: Identity KeyRecords (r:101 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:202 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:0)
    // Storage: Staking Nominators (r:101 w:0)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: Staking MinimumValidatorCount (r:1 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking ErasStakersClipped (r:0 w:1)
    // Storage: Staking ErasValidatorPrefs (r:0 w:1)
    // Storage: Staking SnapshotValidators (r:0 w:1)
    // Storage: Staking ErasStakers (r:0 w:1)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Storage: Staking IsCurrentSessionFinal (r:0 w:1)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    // Storage: Staking QueuedScore (r:0 w:1)
    // Storage: Staking EraElectionStatus (r:0 w:1)
    // Storage: Staking SnapshotNominators (r:0 w:1)
    /// The range of component `v` is `[1, 10]`.
    /// The range of component `n` is `[1, 100]`.
    fn new_era(v: u32, n: u32) -> Weight {
        // Minimum execution time: 612_651 nanoseconds.
        Weight::from_ref_time(613_213_000)
            // Standard Error: 3_914_944
            .saturating_add(Weight::from_ref_time(85_170_068).saturating_mul(v.into()))
            // Standard Error: 402_138
            .saturating_add(Weight::from_ref_time(35_397_639).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(11))
            .saturating_add(DbWeight::get().reads((8_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(8))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(v.into())))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:101 w:0)
    // Storage: Staking Ledger (r:101 w:101)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:101 w:0)
    // Storage: System Account (r:102 w:102)
    // Storage: Balances Locks (r:101 w:101)
    // Storage: Identity KeyRecords (r:102 w:0)
    /// The range of component `v` is `[1, 10]`.
    /// The range of component `n` is `[1, 100]`.
    fn payout_all(v: u32, n: u32) -> Weight {
        // Minimum execution time: 1_027_959 nanoseconds.
        Weight::from_ref_time(1_028_740_000)
            // Standard Error: 46_424_607
            .saturating_add(Weight::from_ref_time(1_008_136_990).saturating_mul(v.into()))
            // Standard Error: 4_768_680
            .saturating_add(Weight::from_ref_time(130_031_197).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().reads((8_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().reads((6_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(v.into())))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(n.into())))
    }
    // Storage: Staking Bonded (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    /// The range of component `l` is `[1, 32]`.
    fn do_slash(l: u32) -> Weight {
        // Minimum execution time: 57_176 nanoseconds.
        Weight::from_ref_time(59_802_895)
            // Standard Error: 11_466
            .saturating_add(Weight::from_ref_time(32_868).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking QueuedScore (r:1 w:1)
    // Storage: Staking SnapshotValidators (r:1 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking SnapshotNominators (r:1 w:0)
    // Storage: Staking Validators (r:500 w:0)
    // Storage: Staking Nominators (r:500 w:0)
    // Storage: Staking SlashingSpans (r:100 w:0)
    // Storage: Staking Bonded (r:500 w:0)
    // Storage: Staking Ledger (r:500 w:0)
    // Storage: Staking QueuedElected (r:0 w:1)
    /// The range of component `v` is `[1000, 2000]`.
    /// The range of component `n` is `[1000, 2000]`.
    /// The range of component `a` is `[200, 500]`.
    /// The range of component `w` is `[16, 100]`.
    fn submit_solution_better(v: u32, _n: u32, a: u32, w: u32) -> Weight {
        // Minimum execution time: 14_586_378 nanoseconds.
        Weight::from_ref_time(14_875_622_000)
            // Standard Error: 93_923
            .saturating_add(Weight::from_ref_time(355_707).saturating_mul(v.into()))
            // Standard Error: 336_506
            .saturating_add(Weight::from_ref_time(27_529_904).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(w.into())))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Staking SlashingAllowedFor (r:0 w:1)
    fn change_slashing_allowed_for() -> Weight {
        // Minimum execution time: 18_825 nanoseconds.
        Weight::from_ref_time(19_806_000).saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    fn update_permissioned_validator_intended_count() -> Weight {
        // Minimum execution time: 24_676 nanoseconds.
        Weight::from_ref_time(25_327_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    fn increase_validator_count() -> Weight {
        // Minimum execution time: 17_052 nanoseconds.
        Weight::from_ref_time(17_312_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    fn scale_validator_count() -> Weight {
        // Minimum execution time: 16_821 nanoseconds.
        Weight::from_ref_time(17_493_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    /// The range of component `s` is `[1, 100]`.
    fn chill_from_governance(s: u32) -> Weight {
        // Minimum execution time: 54_241 nanoseconds.
        Weight::from_ref_time(60_823_853)
            // Standard Error: 45_698
            .saturating_add(Weight::from_ref_time(17_368_108).saturating_mul(s.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(s.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((3_u64).saturating_mul(s.into())))
    }
}
