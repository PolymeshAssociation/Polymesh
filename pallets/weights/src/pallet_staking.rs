// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-20, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_staking
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct WeightInfo;
impl pallet_staking::WeightInfo for WeightInfo {
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Payee (r:0 w:1)
    fn bond() -> Weight {
        (96_134_000 as Weight)
            .saturating_add(DbWeight::get().reads(6 as Weight))
            .saturating_add(DbWeight::get().writes(4 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Bonded (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    fn bond_extra() -> Weight {
        (179_045_000 as Weight)
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking Validators (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn unbond() -> Weight {
        (86_189_000 as Weight)
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn withdraw_unbonded_update(s: u32) -> Weight {
        (100_962_000 as Weight)
            // Standard Error: 71_000
            .saturating_add((47_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(5 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    fn withdraw_unbonded_kill(s: u32) -> Weight {
        (146_196_000 as Weight)
            // Standard Error: 177_000
            .saturating_add((2_414_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Storage: Staking ValidatorCommissionCap (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn validate() -> Weight {
        (69_332_000 as Weight)
            .saturating_add(DbWeight::get().reads(8 as Weight))
            .saturating_add(DbWeight::get().writes(4 as Weight))
    }
    // Storage: Staking MinimumBondThreshold (r:0 w:1)
    fn set_min_bond_threshold() -> Weight {
        (19_903_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    fn add_permissioned_validator() -> Weight {
        (86_141_000 as Weight)
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    fn remove_permissioned_validator() -> Weight {
        (39_823_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCommissionCap (r:1 w:1)
    // Storage: Staking Validators (r:2 w:1)
    fn set_commission_cap(m: u32) -> Weight {
        (76_025_000 as Weight)
            // Standard Error: 87_000
            .saturating_add((15_329_000 as Weight).saturating_mul(m as Weight))
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
            .saturating_add(DbWeight::get().writes(2 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Nominators (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:2 w:0)
    // Storage: Staking Validators (r:2 w:1)
    // Storage: Staking CurrentEra (r:1 w:0)
    fn nominate(n: u32) -> Weight {
        (112_277_000 as Weight)
            // Standard Error: 628_000
            .saturating_add((10_806_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(11 as Weight))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn chill() -> Weight {
        (35_621_000 as Weight)
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking Ledger (r:1 w:0)
    // Storage: Staking Payee (r:0 w:1)
    fn set_payee() -> Weight {
        (38_059_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking Ledger (r:2 w:2)
    fn set_controller() -> Weight {
        (49_866_000 as Weight)
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking ValidatorCount (r:0 w:1)
    fn set_validator_count(_c: u32) -> Weight {
        (5_416_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_no_eras() -> Weight {
        (4_299_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_new_era() -> Weight {
        (8_515_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ForceEra (r:0 w:1)
    fn force_new_era_always() -> Weight {
        (3_579_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking Invulnerables (r:0 w:1)
    fn set_invulnerables(v: u32) -> Weight {
        (5_203_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((24_000 as Weight).saturating_mul(v as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Ledger (r:0 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    fn force_unstake(s: u32) -> Weight {
        (111_066_000 as Weight)
            // Standard Error: 127_000
            .saturating_add((1_901_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Staking UnappliedSlashes (r:1 w:1)
    fn cancel_deferred_slash(s: u32) -> Weight {
        (2_240_651_000 as Weight)
            // Standard Error: 246_000
            .saturating_add((6_448_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:2 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:2 w:0)
    // Storage: System Account (r:3 w:3)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Identity KeyRecords (r:4 w:0)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    fn payout_stakers(n: u32) -> Weight {
        (504_191_000 as Weight)
            // Standard Error: 279_000
            .saturating_add((102_713_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(15 as Weight))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(4 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:2 w:0)
    // Storage: Staking Ledger (r:2 w:2)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:2 w:0)
    // Storage: System Account (r:3 w:3)
    // Storage: Balances Locks (r:2 w:2)
    // Storage: Identity KeyRecords (r:3 w:0)
    fn payout_stakers_alive_controller(n: u32) -> Weight {
        (604_608_000 as Weight)
            // Standard Error: 369_000
            .saturating_add((113_211_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(15 as Weight))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(4 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn rebond(_u: u32) -> Weight {
        (76_450_000 as Weight)
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:1)
    // Storage: Staking ErasStakersClipped (r:0 w:2)
    // Storage: Staking ErasValidatorPrefs (r:0 w:2)
    // Storage: Staking ErasValidatorReward (r:0 w:1)
    // Storage: Staking ErasRewardPoints (r:0 w:1)
    // Storage: Staking ErasStakers (r:0 w:2)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    fn set_history_depth(e: u32) -> Weight {
        (107_179_000 as Weight)
            // Standard Error: 826_000
            .saturating_add((40_214_000 as Weight).saturating_mul(e as Weight))
            .saturating_add(DbWeight::get().reads(2 as Weight))
            .saturating_add(DbWeight::get().writes(4 as Weight))
            .saturating_add(DbWeight::get().writes((7 as Weight).saturating_mul(e as Weight)))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: Staking Bonded (r:1 w:1)
    // Storage: Staking SlashingSpans (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: Staking Ledger (r:0 w:1)
    // Storage: Staking Validators (r:0 w:1)
    // Storage: Staking Payee (r:0 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    // Storage: Staking SpanSlash (r:0 w:1)
    fn reap_stash(s: u32) -> Weight {
        (103_480_000 as Weight)
            // Standard Error: 128_000
            .saturating_add((2_241_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Staking CurrentEra (r:1 w:1)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking QueuedElected (r:1 w:0)
    // Storage: Staking Validators (r:2 w:0)
    // Storage: Staking Bonded (r:101 w:0)
    // Storage: Staking Ledger (r:101 w:0)
    // Storage: Staking MinimumBondThreshold (r:1 w:0)
    // Storage: Identity KeyRecords (r:101 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:0)
    // Storage: Identity Claims (r:202 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:0)
    // Storage: Staking Nominators (r:101 w:0)
    // Storage: Staking SlashingSpans (r:1 w:0)
    // Storage: Staking MinimumValidatorCount (r:1 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking ErasStakersClipped (r:0 w:1)
    // Storage: Staking ErasValidatorPrefs (r:0 w:1)
    // Storage: Staking SnapshotValidators (r:0 w:1)
    // Storage: Staking ErasStakers (r:0 w:1)
    // Storage: Staking ErasTotalStake (r:0 w:1)
    // Storage: Staking IsCurrentSessionFinal (r:0 w:1)
    // Storage: Staking ErasStartSessionIndex (r:0 w:1)
    // Storage: Staking QueuedScore (r:0 w:1)
    // Storage: Staking EraElectionStatus (r:0 w:1)
    // Storage: Staking SnapshotNominators (r:0 w:1)
    fn new_era(v: u32, n: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 10_531_000
            .saturating_add((535_457_000 as Weight).saturating_mul(v as Weight))
            // Standard Error: 529_000
            .saturating_add((108_940_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(11 as Weight))
            .saturating_add(DbWeight::get().reads((8 as Weight).saturating_mul(v as Weight)))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(8 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(v as Weight)))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking HistoryDepth (r:1 w:0)
    // Storage: Staking ErasValidatorReward (r:1 w:0)
    // Storage: Staking Bonded (r:101 w:0)
    // Storage: Staking Ledger (r:101 w:101)
    // Storage: Staking ErasStakersClipped (r:1 w:0)
    // Storage: Staking ErasRewardPoints (r:1 w:0)
    // Storage: Staking ErasValidatorPrefs (r:1 w:0)
    // Storage: Staking Payee (r:101 w:0)
    // Storage: System Account (r:102 w:102)
    // Storage: Balances Locks (r:101 w:101)
    // Storage: Identity KeyRecords (r:102 w:0)
    fn payout_all(v: u32, n: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 249_996_000
            .saturating_add((4_259_711_000 as Weight).saturating_mul(v as Weight))
            // Standard Error: 12_561_000
            .saturating_add((464_874_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(DbWeight::get().reads(7 as Weight))
            .saturating_add(DbWeight::get().reads((8 as Weight).saturating_mul(v as Weight)))
            .saturating_add(DbWeight::get().reads((6 as Weight).saturating_mul(n as Weight)))
            .saturating_add(DbWeight::get().writes(1 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(v as Weight)))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
    }
    // Storage: Staking Bonded (r:1 w:0)
    // Storage: Staking Ledger (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn do_slash(l: u32) -> Weight {
        (100_876_000 as Weight)
            // Standard Error: 569_000
            .saturating_add((780_000 as Weight).saturating_mul(l as Weight))
            .saturating_add(DbWeight::get().reads(4 as Weight))
            .saturating_add(DbWeight::get().writes(3 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking CurrentEra (r:1 w:0)
    // Storage: Staking QueuedScore (r:1 w:1)
    // Storage: Staking SnapshotValidators (r:1 w:0)
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking SnapshotNominators (r:1 w:0)
    // Storage: Staking Validators (r:500 w:0)
    // Storage: Staking Nominators (r:500 w:0)
    // Storage: Staking SlashingSpans (r:100 w:0)
    // Storage: Staking Bonded (r:500 w:0)
    // Storage: Staking Ledger (r:500 w:0)
    // Storage: Staking QueuedElected (r:0 w:1)
    fn submit_solution_better(v: u32, n: u32, a: u32, w: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 150_000
            .saturating_add((1_566_000 as Weight).saturating_mul(v as Weight))
            // Standard Error: 150_000
            .saturating_add((751_000 as Weight).saturating_mul(n as Weight))
            // Standard Error: 500_000
            .saturating_add((76_838_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 1_877_000
            .saturating_add((11_420_000 as Weight).saturating_mul(w as Weight))
            .saturating_add(DbWeight::get().reads(6 as Weight))
            .saturating_add(DbWeight::get().reads((4 as Weight).saturating_mul(a as Weight)))
            .saturating_add(DbWeight::get().reads((1 as Weight).saturating_mul(w as Weight)))
            .saturating_add(DbWeight::get().writes(2 as Weight))
    }
    // Storage: Staking SlashingAllowedFor (r:0 w:1)
    fn change_slashing_allowed_for() -> Weight {
        (43_547_000 as Weight).saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCount (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    fn update_permissioned_validator_intended_count() -> Weight {
        (28_091_000 as Weight)
            .saturating_add(DbWeight::get().reads(2 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    fn increase_validator_count() -> Weight {
        (8_205_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking ValidatorCount (r:1 w:1)
    fn scale_validator_count() -> Weight {
        (8_981_000 as Weight)
            .saturating_add(DbWeight::get().reads(1 as Weight))
            .saturating_add(DbWeight::get().writes(1 as Weight))
    }
    // Storage: Staking EraElectionStatus (r:1 w:0)
    // Storage: Staking PermissionedIdentity (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity IsDidFrozen (r:1 w:0)
    // Storage: Staking Validators (r:1 w:1)
    // Storage: Identity AccountKeyRefCount (r:1 w:1)
    // Storage: Staking Nominators (r:0 w:1)
    fn chill_from_governance(s: u32) -> Weight {
        (58_999_000 as Weight)
            // Standard Error: 230_000
            .saturating_add((35_387_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(DbWeight::get().reads(3 as Weight))
            .saturating_add(DbWeight::get().reads((3 as Weight).saturating_mul(s as Weight)))
            .saturating_add(DbWeight::get().writes(1 as Weight))
            .saturating_add(DbWeight::get().writes((3 as Weight).saturating_mul(s as Weight)))
    }
}
