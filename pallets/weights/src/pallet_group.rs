// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_group
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-hel1-1`, CPU: `Intel Xeon Processor (Skylake, IBRS)`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_group
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_group using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_group::WeightInfo for SubstrateWeight {
    // Storage: Instance2Group ActiveMembersLimit (r:1 w:1)
    fn set_active_members_limit() -> Weight {
        // Minimum execution time: 42_270 nanoseconds.
        Weight::from_ref_time(47_980_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Instance2Group ActiveMembersLimit (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn add_member() -> Weight {
        // Minimum execution time: 2_146_437 nanoseconds.
        Weight::from_ref_time(2_273_666_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Instance2Group ActiveMembers (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn remove_member() -> Weight {
        // Minimum execution time: 734_188 nanoseconds.
        Weight::from_ref_time(874_644_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Identity Claims (r:1 w:1)
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Instance2Group InactiveMembers (r:1 w:1)
    fn disable_member() -> Weight {
        // Minimum execution time: 1_049_065 nanoseconds.
        Weight::from_ref_time(1_189_229_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity Claims (r:2 w:2)
    // Storage: Identity CurrentDid (r:1 w:0)
    fn swap_member() -> Weight {
        // Minimum execution time: 2_085_044 nanoseconds.
        Weight::from_ref_time(2_249_380_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Instance2Group ActiveMembersLimit (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Identity Claims (r:2 w:2)
    // Storage: Identity CurrentDid (r:1 w:0)
    /// The range of component `m` is `[1, 1000]`.
    fn reset_members(m: u32) -> Weight {
        // Minimum execution time: 1_250_289 nanoseconds.
        Weight::from_ref_time(1_280_635_000)
            // Standard Error: 2_796_700
            .saturating_add(Weight::from_ref_time(1_250_881_562).saturating_mul(m.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((1_u64).saturating_mul(m.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(m.into())))
    }
    // Storage: Identity CurrentDid (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity DidRecords (r:1 w:0)
    // Storage: Instance2Group ActiveMembers (r:1 w:1)
    // Storage: Identity Claims (r:1 w:1)
    fn abdicate_membership() -> Weight {
        // Minimum execution time: 1_096_610 nanoseconds.
        Weight::from_ref_time(1_130_686_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
}
