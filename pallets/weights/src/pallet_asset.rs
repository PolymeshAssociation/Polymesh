// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_asset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-29, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_asset
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_asset using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_asset::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Asset TickerConfig (r:1 w:0)
    // Storage: Asset Tickers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Identity CurrentPayer (r:1 w:0)
    // Storage: Asset AssetOwnershipRelations (r:0 w:1)
    // Storage: Asset ClassicTickers (r:0 w:1)
    fn register_ticker() -> Weight {
        // Minimum execution time: 53_809 nanoseconds.
        Weight::from_ref_time(86_666_000)
            .saturating_add(DbWeight::get().reads(8))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Asset Tickers (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Asset AssetOwnershipRelations (r:0 w:2)
    // Storage: Asset ClassicTickers (r:0 w:1)
    fn accept_ticker_transfer() -> Weight {
        // Minimum execution time: 59_149 nanoseconds.
        Weight::from_ref_time(113_044_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Asset Tokens (r:1 w:1)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset Tickers (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Asset AssetOwnershipRelations (r:0 w:2)
    fn accept_asset_ownership_transfer() -> Weight {
        // Minimum execution time: 72_134 nanoseconds.
        Weight::from_ref_time(125_338_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:1)
    // Storage: Asset TickerConfig (r:1 w:0)
    // Storage: Asset Tickers (r:1 w:1)
    // Storage: Identity DidRecords (r:1 w:1)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:2 w:0)
    // Storage: Identity CurrentPayer (r:1 w:0)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    // Storage: Asset FundingRound (r:0 w:1)
    // Storage: Asset AssetOwnershipRelations (r:0 w:1)
    // Storage: Asset AssetNames (r:0 w:1)
    // Storage: Asset ClassicTickers (r:0 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:0 w:1)
    // Storage: Asset Identifiers (r:0 w:1)
    // Storage: ExternalAgents AgentOf (r:0 w:1)
    // Storage: ExternalAgents GroupOfAgent (r:0 w:1)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `i` is `[1, 512]`.
    /// The range of component `f` is `[1, 128]`.
    fn create_asset(_n: u32, i: u32, _f: u32) -> Weight {
        // Minimum execution time: 98_963 nanoseconds.
        Weight::from_ref_time(206_807_000)
            // Manually set weight for `i`
            .saturating_add(Weight::from_ref_time(158_000).saturating_mul(i.into()))
            .saturating_add(DbWeight::get().reads(11))
            .saturating_add(DbWeight::get().writes(12))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Asset Frozen (r:1 w:1)
    fn freeze() -> Weight {
        // Minimum execution time: 45_164 nanoseconds.
        Weight::from_ref_time(69_060_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Asset Frozen (r:1 w:1)
    fn unfreeze() -> Weight {
        // Minimum execution time: 46_366 nanoseconds.
        Weight::from_ref_time(83_098_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetNames (r:0 w:1)
    /// The range of component `n` is `[1, 128]`.
    fn rename_asset(_n: u32) -> Weight {
        // Minimum execution time: 43_360 nanoseconds.
        Weight::from_ref_time(80_111_000)
            // Standard Error: 924
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:1)
    // Storage: Asset BalanceOf (r:1 w:1)
    // Storage: Portfolio PortfolioAssetBalances (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Checkpoint Schedules (r:1 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:1 w:0)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    // Storage: Statistics ActiveAssetStats (r:1 w:0)
    // Storage: Asset FundingRound (r:1 w:0)
    // Storage: Asset IssuedInFundingRound (r:1 w:1)
    // Storage: Asset BalanceOfAtScope (r:0 w:1)
    fn issue() -> Weight {
        // Minimum execution time: 93_723 nanoseconds.
        Weight::from_ref_time(163_187_000)
            .saturating_add(DbWeight::get().reads(18))
            .saturating_add(DbWeight::get().writes(7))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:1)
    // Storage: Portfolio PortfolioAssetBalances (r:1 w:1)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:0)
    // Storage: Asset BalanceOf (r:1 w:1)
    // Storage: Checkpoint Schedules (r:1 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:1 w:0)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    // Storage: Statistics ActiveAssetStats (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:0 w:1)
    fn redeem() -> Weight {
        // Minimum execution time: 90_156 nanoseconds.
        Weight::from_ref_time(185_602_000)
            .saturating_add(DbWeight::get().reads(15))
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:1)
    fn make_divisible() -> Weight {
        // Minimum execution time: 43_921 nanoseconds.
        Weight::from_ref_time(63_399_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetDocumentsIdSequence (r:1 w:1)
    // Storage: ProtocolFee Coefficient (r:1 w:0)
    // Storage: ProtocolFee BaseFees (r:1 w:0)
    // Storage: Asset AssetDocuments (r:0 w:1)
    /// The range of component `d` is `[1, 64]`.
    fn add_documents(d: u32) -> Weight {
        // Minimum execution time: 56_915 nanoseconds.
        Weight::from_ref_time(41_245_000)
            // Standard Error: 18_514
            .saturating_add(Weight::from_ref_time(22_617_000).saturating_mul(d.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(d.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetDocuments (r:0 w:1)
    /// The range of component `d` is `[1, 64]`.
    fn remove_documents(d: u32) -> Weight {
        // Minimum execution time: 31_147 nanoseconds.
        Weight::from_ref_time(65_487_000)
            // Standard Error: 14_496
            .saturating_add(Weight::from_ref_time(9_167_000).saturating_mul(d.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(d.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset FundingRound (r:0 w:1)
    /// The range of component `f` is `[1, 128]`.
    fn set_funding_round(f: u32) -> Weight {
        // Minimum execution time: 38_311 nanoseconds.
        Weight::from_ref_time(67_236_000)
            // Standard Error: 7_975
            .saturating_add(Weight::from_ref_time(59_000).saturating_mul(f.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset Identifiers (r:0 w:1)
    /// The range of component `i` is `[1, 512]`.
    fn update_identifiers(i: u32) -> Weight {
        // Minimum execution time: 39_563 nanoseconds.
        Weight::from_ref_time(73_881_000)
            // Standard Error: 684
            .saturating_add(Weight::from_ref_time(121_000).saturating_mul(i.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Asset ClassicTickers (r:1 w:0)
    // Storage: Asset Tickers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Asset AssetOwnershipRelations (r:0 w:2)
    fn claim_classic_ticker() -> Weight {
        // Minimum execution time: 90_747 nanoseconds.
        Weight::from_ref_time(163_459_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Asset Tickers (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: Asset AssetOwnershipRelations (r:0 w:1)
    // Storage: Asset ClassicTickers (r:0 w:1)
    fn reserve_classic_ticker() -> Weight {
        // Minimum execution time: 40_935 nanoseconds.
        Weight::from_ref_time(60_606_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Asset BalanceOf (r:2 w:2)
    // Storage: Checkpoint Schedules (r:1 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:2 w:2)
    // Storage: Portfolio PortfolioAssetCount (r:1 w:1)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset AggregateBalance (r:2 w:2)
    // Storage: Statistics ActiveAssetStats (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:0 w:2)
    fn controller_transfer() -> Weight {
        // Minimum execution time: 111_636 nanoseconds.
        Weight::from_ref_time(191_837_000)
            .saturating_add(DbWeight::get().reads(17))
            .saturating_add(DbWeight::get().writes(9))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Asset CustomTypesInverse (r:1 w:1)
    // Storage: Asset CustomTypeIdSequence (r:1 w:1)
    // Storage: Asset CustomTypes (r:0 w:1)
    /// The range of component `n` is `[1, 2048]`.
    fn register_custom_asset_type(n: u32) -> Weight {
        // Minimum execution time: 35_405 nanoseconds.
        Weight::from_ref_time(62_766_000)
            // Standard Error: 76
            .saturating_add(Weight::from_ref_time(12_000).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetMetadataGlobalKeyToName (r:1 w:0)
    // Storage: Asset AssetMetadataValueDetails (r:1 w:1)
    // Storage: Asset AssetMetadataValues (r:0 w:1)
    fn set_asset_metadata() -> Weight {
        // Minimum execution time: 57_917 nanoseconds.
        Weight::from_ref_time(91_527_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetMetadataGlobalKeyToName (r:1 w:0)
    // Storage: Asset AssetMetadataValueDetails (r:1 w:1)
    fn set_asset_metadata_details() -> Weight {
        // Minimum execution time: 47_959 nanoseconds.
        Weight::from_ref_time(77_824_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetMetadataLocalNameToKey (r:1 w:1)
    // Storage: Asset AssetMetadataNextLocalKey (r:1 w:1)
    // Storage: Asset AssetMetadataValueDetails (r:1 w:1)
    // Storage: Asset AssetMetadataValues (r:0 w:1)
    // Storage: Asset AssetMetadataLocalKeyToName (r:0 w:1)
    // Storage: Asset AssetMetadataLocalSpecs (r:0 w:1)
    fn register_and_set_local_asset_metadata() -> Weight {
        // Minimum execution time: 89_555 nanoseconds.
        Weight::from_ref_time(164_952_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(6))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetMetadataLocalNameToKey (r:1 w:1)
    // Storage: Asset AssetMetadataNextLocalKey (r:1 w:1)
    // Storage: Asset AssetMetadataLocalKeyToName (r:0 w:1)
    // Storage: Asset AssetMetadataLocalSpecs (r:0 w:1)
    fn register_asset_metadata_local_type() -> Weight {
        // Minimum execution time: 69_048 nanoseconds.
        Weight::from_ref_time(117_218_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Asset AssetMetadataGlobalNameToKey (r:1 w:1)
    // Storage: Asset AssetMetadataNextGlobalKey (r:1 w:1)
    // Storage: Asset AssetMetadataGlobalKeyToName (r:0 w:1)
    // Storage: Asset AssetMetadataGlobalSpecs (r:0 w:1)
    fn register_asset_metadata_global_type() -> Weight {
        // Minimum execution time: 44_132 nanoseconds.
        Weight::from_ref_time(121_855_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(4))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:1)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:1 w:1)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:0)
    // Storage: Portfolio PortfolioAssetCount (r:1 w:1)
    // Storage: Asset BalanceOf (r:1 w:1)
    // Storage: Checkpoint Schedules (r:1 w:0)
    // Storage: Checkpoint CheckpointIdSequence (r:1 w:0)
    // Storage: Asset DisableInvestorUniqueness (r:1 w:0)
    // Storage: Asset AggregateBalance (r:1 w:1)
    // Storage: Statistics ActiveAssetStats (r:1 w:0)
    // Storage: Asset BalanceOfAtScope (r:0 w:1)
    fn redeem_from_portfolio() -> Weight {
        // Minimum execution time: 100_245 nanoseconds.
        Weight::from_ref_time(173_158_000)
            .saturating_add(DbWeight::get().reads(17))
            .saturating_add(DbWeight::get().writes(7))
    }
    // Storage: Asset Tokens (r:1 w:1)
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    fn update_asset_type() -> Weight {
        // Minimum execution time: 46_175 nanoseconds.
        Weight::from_ref_time(65_857_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetMetadataLocalNameToKey (r:1 w:1)
    // Storage: Asset AssetMetadataValueDetails (r:1 w:1)
    // Storage: NFT CollectionTicker (r:1 w:0)
    // Storage: NFT CollectionKeys (r:1 w:0)
    // Storage: Asset AssetMetadataValues (r:0 w:1)
    // Storage: Asset AssetMetadataLocalKeyToName (r:0 w:1)
    // Storage: Asset AssetMetadataLocalSpecs (r:0 w:1)
    fn remove_local_metadata_key() -> Weight {
        Weight::from_ref_time(52_321_000 as u64)
            .saturating_add(DbWeight::get().reads(8 as u64))
            .saturating_add(DbWeight::get().writes(5 as u64))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: Asset AssetMetadataLocalNameToKey (r:1 w:0)
    // Storage: Asset AssetMetadataValueDetails (r:1 w:1)
    // Storage: Asset AssetMetadataValues (r:0 w:1)
    fn remove_metadata_value() -> Weight {
        Weight::from_ref_time(36_579_000 as u64)
            .saturating_add(DbWeight::get().reads(6 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
}
