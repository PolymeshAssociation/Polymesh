// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_external_agents
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-26, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_external_agents
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_external_agents using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_external_agents::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents AGIdSequence (r:1 w:1)
    // Storage: ExternalAgents GroupPermissions (r:0 w:1)
    /// The range of component `p` is `[0, 19]`.
    fn create_group(p: u32) -> Weight {
        // Minimum execution time: 46_175 nanoseconds.
        Weight::from_ref_time(48_062_130)
            // Standard Error: 12_473
            .saturating_add(Weight::from_ref_time(349_596).saturating_mul(p.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents AGIdSequence (r:1 w:0)
    // Storage: ExternalAgents GroupPermissions (r:0 w:1)
    /// The range of component `p` is `[0, 19]`.
    fn set_group_permissions(p: u32) -> Weight {
        // Minimum execution time: 46_866 nanoseconds.
        Weight::from_ref_time(48_212_988)
            // Standard Error: 15_613
            .saturating_add(Weight::from_ref_time(468_628).saturating_mul(p.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:2 w:1)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    // Storage: ExternalAgents AgentOf (r:0 w:1)
    fn remove_agent() -> Weight {
        // Minimum execution time: 52_147 nanoseconds.
        Weight::from_ref_time(52_507_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:1)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    // Storage: ExternalAgents AgentOf (r:0 w:1)
    fn abdicate() -> Weight {
        // Minimum execution time: 44_623 nanoseconds.
        Weight::from_ref_time(45_233_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:2 w:1)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents AGIdSequence (r:1 w:0)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    fn change_group_custom() -> Weight {
        // Minimum execution time: 52_827 nanoseconds.
        Weight::from_ref_time(53_058_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:2 w:1)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    fn change_group_builtin() -> Weight {
        // Minimum execution time: 50_102 nanoseconds.
        Weight::from_ref_time(50_854_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: ExternalAgents GroupOfAgent (r:2 w:1)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: ExternalAgents AgentOf (r:0 w:1)
    fn accept_become_agent() -> Weight {
        // Minimum execution time: 64_479 nanoseconds.
        Weight::from_ref_time(64_809_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:1 w:0)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents AGIdSequence (r:1 w:1)
    // Storage: Identity MultiPurposeNonce (r:1 w:1)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    // Storage: Identity Authorizations (r:0 w:1)
    // Storage: ExternalAgents GroupPermissions (r:0 w:1)
    /// The range of component `p` is `[0, 19]`.
    fn create_group_and_add_auth(p: u32) -> Weight {
        // Minimum execution time: 58_188 nanoseconds.
        Weight::from_ref_time(60_640_539)
            // Standard Error: 11_297
            .saturating_add(Weight::from_ref_time(340_691).saturating_mul(p.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ExternalAgents GroupOfAgent (r:2 w:1)
    // Storage: Permissions CurrentPalletName (r:1 w:0)
    // Storage: Permissions CurrentDispatchableName (r:1 w:0)
    // Storage: ExternalAgents AGIdSequence (r:1 w:1)
    // Storage: ExternalAgents NumFullAgents (r:1 w:1)
    // Storage: ExternalAgents GroupPermissions (r:0 w:1)
    /// The range of component `p` is `[0, 19]`.
    fn create_and_change_custom_group(p: u32) -> Weight {
        // Minimum execution time: 62_776 nanoseconds.
        Weight::from_ref_time(65_101_749)
            // Standard Error: 13_101
            .saturating_add(Weight::from_ref_time(421_147).saturating_mul(p.into()))
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(4))
    }
}
