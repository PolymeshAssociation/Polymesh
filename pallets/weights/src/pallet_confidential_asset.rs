// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_confidential_asset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-11, STEPS: `10`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `comp002`, CPU: `Intel(R) Xeon(R) CPU E5-2697 v2 @ 2.70GHz`

// Executed Command:
// target/release/polymesh
// benchmark
// pallet
// -p=pallet_confidential_asset
// -e=*
// -s
// 10
// -r
// 5
// --db-cache
// 512
// --heap-pages
// 4096
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_confidential_asset using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_confidential_asset::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset MercatAccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:1)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    fn validate_mercat_account() -> Weight {
        // Minimum execution time: 2_828_258 nanoseconds.
        Weight::from_ref_time(2_898_127_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MediatorMercatAccounts (r:0 w:1)
    // Proof Skipped: ConfidentialAsset MediatorMercatAccounts (max_values: None, max_size: None, mode: Measured)
    fn add_mediator_mercat_account() -> Weight {
        // Minimum execution time: 102_965 nanoseconds.
        Weight::from_ref_time(104_982_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    fn create_confidential_asset() -> Weight {
        // Minimum execution time: 100_431 nanoseconds.
        Weight::from_ref_time(123_705_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset MercatAccountBalance (max_values: None, max_size: None, mode: Measured)
    fn mint_confidential_asset() -> Weight {
        // Minimum execution time: 5_574_943 nanoseconds.
        Weight::from_ref_time(5_632_710_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:0)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    fn apply_incoming_balance() -> Weight {
        // Minimum execution time: 75_127 nanoseconds.
        Weight::from_ref_time(77_966_000).saturating_add(DbWeight::get().reads(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCounter (r:1 w:1)
    // Proof Skipped: ConfidentialAsset VenueCounter (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCreator (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueCreator (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IdentityVenues (r:0 w:1)
    // Proof Skipped: ConfidentialAsset IdentityVenues (max_values: None, max_size: None, mode: Measured)
    fn create_venue() -> Weight {
        // Minimum execution time: 78_423 nanoseconds.
        Weight::from_ref_time(91_697_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:100)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn allow_venues(v: u32) -> Weight {
        // Minimum execution time: 74_235 nanoseconds.
        Weight::from_ref_time(77_588_539)
            // Standard Error: 168_523
            .saturating_add(Weight::from_ref_time(5_196_314).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Proof Skipped: ConfidentialAsset Details (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:100)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    /// The range of component `v` is `[0, 100]`.
    fn disallow_venues(v: u32) -> Weight {
        // Minimum execution time: 96_014 nanoseconds.
        Weight::from_ref_time(100_666_436)
            // Standard Error: 31_171
            .saturating_add(Weight::from_ref_time(5_900_249).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueCreator (r:1 w:0)
    // Proof Skipped: ConfidentialAsset VenueCreator (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionCounter (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TransactionCounter (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueAllowList (r:1 w:0)
    // Proof Skipped: ConfidentialAsset VenueAllowList (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:0 w:30)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:0 w:10)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset VenueTransactions (r:0 w:1)
    // Proof Skipped: ConfidentialAsset VenueTransactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:0 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[0, 10]`.
    fn add_transaction(l: u32) -> Weight {
        // Minimum execution time: 131_238 nanoseconds.
        Weight::from_ref_time(159_518_462)
            // Standard Error: 878_509
            .saturating_add(Weight::from_ref_time(137_765_624).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(5))
            .saturating_add(DbWeight::get().writes((4_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset MercatAccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Proof Skipped: ConfidentialAsset RngNonce (max_values: Some(1), max_size: None, mode: Measured)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    // Storage: Babe EpochStart (r:1 w:0)
    // Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegSenderAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:1)
    // Proof Skipped: ConfidentialAsset SenderProofs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegReceiverAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegSenderBalance (max_values: None, max_size: None, mode: Measured)
    fn sender_affirm_transaction() -> Weight {
        // Minimum execution time: 72_901_310 nanoseconds.
        Weight::from_ref_time(73_029_727_000)
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(8))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn receiver_affirm_transaction() -> Weight {
        // Minimum execution time: 140_438 nanoseconds.
        Weight::from_ref_time(143_015_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn mediator_affirm_transaction() -> Weight {
        // Minimum execution time: 125_847 nanoseconds.
        Weight::from_ref_time(130_853_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:3 w:3)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:1 w:1)
    // Proof Skipped: ConfidentialAsset TxLegSenderAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset MercatAccountBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:1)
    // Proof Skipped: ConfidentialAsset SenderProofs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegReceiverAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TxLegSenderBalance (max_values: None, max_size: None, mode: Measured)
    fn sender_unaffirm_transaction() -> Weight {
        // Minimum execution time: 667_629 nanoseconds.
        Weight::from_ref_time(687_602_000)
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().writes(9))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn receiver_unaffirm_transaction() -> Weight {
        // Minimum execution time: 141_614 nanoseconds.
        Weight::from_ref_time(143_734_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    fn mediator_unaffirm_transaction() -> Weight {
        // Minimum execution time: 123_164 nanoseconds.
        Weight::from_ref_time(128_442_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:11 w:10)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:30 w:30)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:10 w:10)
    // Proof Skipped: ConfidentialAsset TxLegReceiverAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:0 w:10)
    // Proof Skipped: ConfidentialAsset TxLegSenderAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:10)
    // Proof Skipped: ConfidentialAsset SenderProofs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:10)
    // Proof Skipped: ConfidentialAsset TxLegSenderBalance (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[0, 10]`.
    fn execute_transaction(l: u32) -> Weight {
        // Minimum execution time: 138_543 nanoseconds.
        Weight::from_ref_time(152_219_639)
            // Standard Error: 1_846_641
            .saturating_add(Weight::from_ref_time(527_975_795).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((5_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((8_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Proof Skipped: Identity KeyRecords (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionLegs (r:11 w:10)
    // Proof Skipped: ConfidentialAsset TransactionLegs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset Transactions (r:1 w:1)
    // Proof Skipped: ConfidentialAsset Transactions (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Proof Skipped: ConfidentialAsset MercatAccountDid (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset UserAffirmations (r:10 w:30)
    // Proof Skipped: ConfidentialAsset UserAffirmations (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:10 w:10)
    // Proof Skipped: ConfidentialAsset TxLegSenderAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:1)
    // Proof Skipped: ConfidentialAsset IncomingBalance (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Proof Skipped: ConfidentialAsset PendingAffirms (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Proof Skipped: ConfidentialAsset TransactionStatuses (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:10)
    // Proof Skipped: ConfidentialAsset SenderProofs (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:0 w:10)
    // Proof Skipped: ConfidentialAsset TxLegReceiverAmount (max_values: None, max_size: None, mode: Measured)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:10)
    // Proof Skipped: ConfidentialAsset TxLegSenderBalance (max_values: None, max_size: None, mode: Measured)
    /// The range of component `l` is `[0, 10]`.
    fn revert_transaction(l: u32) -> Weight {
        // Minimum execution time: 133_383 nanoseconds.
        Weight::from_ref_time(119_266_722)
            // Standard Error: 1_962_585
            .saturating_add(Weight::from_ref_time(520_410_944).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((8_u64).saturating_mul(l.into())))
    }
}
