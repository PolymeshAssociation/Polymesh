// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_confidential_asset
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-26, STEPS: `10`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `comp002`, CPU: `Intel(R) Xeon(R) CPU E5-2697 v2 @ 2.70GHz`

// Executed Command:
// target/release/polymesh
// benchmark
// pallet
// -p=pallet_confidential_asset
// -e=*
// -s
// 10
// -r
// 5
// --db-cache
// 512
// --heap-pages
// 4096
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_confidential_asset using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_confidential_asset::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:1)
    fn validate_mercat_account() -> Weight {
        // Minimum execution time: 3_027_134 nanoseconds.
        Weight::from_ref_time(3_056_127_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset MediatorMercatAccounts (r:0 w:1)
    fn add_mediator_mercat_account() -> Weight {
        // Minimum execution time: 119_322 nanoseconds.
        Weight::from_ref_time(124_123_000)
            .saturating_add(DbWeight::get().reads(1))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    fn create_confidential_asset() -> Weight {
        // Minimum execution time: 91_268 nanoseconds.
        Weight::from_ref_time(107_557_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(1))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset Details (r:1 w:1)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    fn mint_confidential_asset() -> Weight {
        // Minimum execution time: 5_866_949 nanoseconds.
        Weight::from_ref_time(5_950_130_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:0)
    fn apply_incoming_balance() -> Weight {
        // Minimum execution time: 79_596 nanoseconds.
        Weight::from_ref_time(84_439_000).saturating_add(DbWeight::get().reads(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset VenueCounter (r:1 w:1)
    // Storage: ConfidentialAsset VenueCreator (r:0 w:1)
    // Storage: ConfidentialAsset IdentityVenues (r:0 w:1)
    fn create_venue() -> Weight {
        // Minimum execution time: 64_759 nanoseconds.
        Weight::from_ref_time(65_253_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:11)
    /// The range of component `v` is `[0, 100]`.
    fn allow_venues(v: u32) -> Weight {
        // Minimum execution time: 61_138 nanoseconds.
        Weight::from_ref_time(69_569_852)
            // Standard Error: 94_128
            .saturating_add(Weight::from_ref_time(3_838_771).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset Details (r:1 w:0)
    // Storage: ConfidentialAsset VenueAllowList (r:0 w:11)
    /// The range of component `v` is `[0, 100]`.
    fn disallow_venues(v: u32) -> Weight {
        // Minimum execution time: 62_852 nanoseconds.
        Weight::from_ref_time(44_218_483)
            // Standard Error: 122_399
            .saturating_add(Weight::from_ref_time(4_989_137).saturating_mul(v.into()))
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes((1_u64).saturating_mul(v.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset VenueCreator (r:1 w:0)
    // Storage: ConfidentialAsset TransactionCounter (r:1 w:1)
    // Storage: ConfidentialAsset VenueFiltering (r:1 w:0)
    // Storage: ConfidentialAsset VenueAllowList (r:1 w:0)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Storage: ConfidentialAsset UserAffirmations (r:0 w:3)
    // Storage: ConfidentialAsset TransactionLegs (r:0 w:1)
    // Storage: ConfidentialAsset VenueTransactions (r:0 w:1)
    // Storage: ConfidentialAsset Transactions (r:0 w:1)
    fn add_transaction() -> Weight {
        // Minimum execution time: 322_622 nanoseconds.
        Weight::from_ref_time(324_697_000)
            .saturating_add(DbWeight::get().reads(7))
            .saturating_add(DbWeight::get().writes(9))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Storage: ConfidentialAsset RngNonce (r:1 w:1)
    // Storage: Babe NextRandomness (r:1 w:0)
    // Storage: Babe EpochStart (r:1 w:0)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:0 w:1)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:1)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:0 w:1)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:1)
    fn sender_affirm_transaction() -> Weight {
        // Minimum execution time: 76_741_527 nanoseconds.
        Weight::from_ref_time(76_947_618_000)
            .saturating_add(DbWeight::get().reads(9))
            .saturating_add(DbWeight::get().writes(8))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    fn receiver_affirm_transaction() -> Weight {
        // Minimum execution time: 139_295 nanoseconds.
        Weight::from_ref_time(141_965_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    fn mediator_affirm_transaction() -> Weight {
        // Minimum execution time: 130_716 nanoseconds.
        Weight::from_ref_time(135_990_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:3 w:3)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:1 w:1)
    // Storage: ConfidentialAsset MercatAccountBalance (r:1 w:1)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:1)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:0 w:1)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:1)
    fn sender_unaffirm_transaction() -> Weight {
        // Minimum execution time: 542_125 nanoseconds.
        Weight::from_ref_time(560_523_000)
            .saturating_add(DbWeight::get().reads(10))
            .saturating_add(DbWeight::get().writes(9))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Storage: ConfidentialAsset MercatAccountDid (r:1 w:0)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    fn receiver_unaffirm_transaction() -> Weight {
        // Minimum execution time: 140_647 nanoseconds.
        Weight::from_ref_time(146_114_000)
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:1)
    // Storage: ConfidentialAsset TransactionLegs (r:1 w:0)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    fn mediator_unaffirm_transaction() -> Weight {
        // Minimum execution time: 130_856 nanoseconds.
        Weight::from_ref_time(140_088_000)
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset TransactionLegs (r:2 w:1)
    // Storage: ConfidentialAsset PendingAffirms (r:1 w:1)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:3 w:3)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:1 w:1)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:1)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:0 w:1)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:1)
    // Storage: ConfidentialAsset Transactions (r:0 w:1)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:1)
    /// The range of component `l` is `[1, 4]`.
    fn execute_transaction(l: u32) -> Weight {
        // Minimum execution time: 468_838 nanoseconds.
        Weight::from_ref_time(77_148_187)
            // Standard Error: 3_632_759
            .saturating_add(Weight::from_ref_time(427_104_354).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().reads((5_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((8_u64).saturating_mul(l.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: ConfidentialAsset TransactionLegs (r:2 w:1)
    // Storage: ConfidentialAsset MercatAccountDid (r:2 w:0)
    // Storage: ConfidentialAsset UserAffirmations (r:1 w:3)
    // Storage: ConfidentialAsset TxLegSenderAmount (r:1 w:1)
    // Storage: ConfidentialAsset IncomingBalance (r:1 w:1)
    // Storage: ConfidentialAsset PendingAffirms (r:0 w:1)
    // Storage: ConfidentialAsset TransactionStatuses (r:0 w:1)
    // Storage: ConfidentialAsset SenderProofs (r:0 w:1)
    // Storage: ConfidentialAsset TxLegReceiverAmount (r:0 w:1)
    // Storage: ConfidentialAsset Transactions (r:0 w:1)
    // Storage: ConfidentialAsset TxLegSenderBalance (r:0 w:1)
    /// The range of component `l` is `[1, 4]`.
    fn revert_transaction(l: u32) -> Weight {
        // Minimum execution time: 450_175 nanoseconds.
        Weight::from_ref_time(59_583_826)
            // Standard Error: 2_501_750
            .saturating_add(Weight::from_ref_time(416_384_048).saturating_mul(l.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((3_u64).saturating_mul(l.into())))
            .saturating_add(DbWeight::get().writes(4))
            .saturating_add(DbWeight::get().writes((8_u64).saturating_mul(l.into())))
    }
}
