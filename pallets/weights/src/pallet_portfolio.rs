// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_portfolio
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-17, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `ubuntu-8gb-hel1-1`, CPU: `Intel Xeon Processor (Skylake, IBRS)`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=pallet_portfolio
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for pallet_portfolio using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl pallet_portfolio::WeightInfo for SubstrateWeight {
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio NameToNumber (r:1 w:1)
    // Storage: Portfolio NextPortfolioNumber (r:1 w:1)
    // Storage: Portfolio Portfolios (r:0 w:1)
    fn create_portfolio() -> Weight {
        // Minimum execution time: 85_364 nanoseconds.
        Weight::from_ref_time(90_630_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio PortfolioAssetCount (r:1 w:1)
    // Storage: Portfolio PortfolioNFT (r:1 w:0)
    // Storage: Portfolio PortfolioLockedNFT (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:1)
    // Storage: Portfolio PortfolioCustodian (r:1 w:1)
    // Storage: Portfolio PortfoliosInCustody (r:0 w:1)
    // Storage: Portfolio NameToNumber (r:0 w:1)
    fn delete_portfolio() -> Weight {
        // Minimum execution time: 131_549 nanoseconds.
        Weight::from_ref_time(142_541_000)
            .saturating_add(DbWeight::get().reads(6))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:2 w:2)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:0)
    // Storage: Portfolio PortfolioAssetCount (r:2 w:2)
    /// The range of component `a` is `[1, 500]`.
    fn move_portfolio_funds(a: u32) -> Weight {
        // Minimum execution time: 125_909 nanoseconds.
        Weight::from_ref_time(130_335_000)
            // Standard Error: 231_646
            .saturating_add(Weight::from_ref_time(46_395_866).saturating_mul(a.into()))
            .saturating_add(DbWeight::get().reads(5))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(a.into())))
            .saturating_add(DbWeight::get().writes(2))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(a.into())))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:1)
    // Storage: Portfolio NameToNumber (r:1 w:2)
    /// The range of component `i` is `[1, 500]`.
    fn rename_portfolio(i: u32) -> Weight {
        // Minimum execution time: 91_407 nanoseconds.
        Weight::from_ref_time(109_453_348)
            // Standard Error: 9_932
            .saturating_add(Weight::from_ref_time(31_346).saturating_mul(i.into()))
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(3))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:1)
    // Storage: Portfolio PortfoliosInCustody (r:0 w:1)
    fn quit_portfolio_custody() -> Weight {
        // Minimum execution time: 88_981 nanoseconds.
        Weight::from_ref_time(91_408_000)
            .saturating_add(DbWeight::get().reads(2))
            .saturating_add(DbWeight::get().writes(2))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Identity Authorizations (r:1 w:1)
    // Storage: Portfolio PortfolioCustodian (r:1 w:1)
    // Storage: Portfolio PortfoliosInCustody (r:0 w:2)
    // Storage: Identity AuthorizationsGiven (r:0 w:1)
    fn accept_portfolio_custody() -> Weight {
        // Minimum execution time: 110_878 nanoseconds.
        Weight::from_ref_time(117_653_000)
            .saturating_add(DbWeight::get().reads(3))
            .saturating_add(DbWeight::get().writes(5))
    }
    // Storage: Identity KeyRecords (r:1 w:0)
    // Storage: Portfolio Portfolios (r:1 w:0)
    // Storage: Portfolio PortfolioCustodian (r:1 w:0)
    // Storage: Portfolio PortfolioNFT (r:100 w:200)
    // Storage: Portfolio PortfolioLockedNFT (r:100 w:0)
    // Storage: Asset Tokens (r:1 w:0)
    // Storage: Portfolio PortfolioAssetBalances (r:2 w:2)
    // Storage: Portfolio PortfolioLockedAssets (r:1 w:0)
    // Storage: Portfolio PortfolioAssetCount (r:1 w:1)
    /// The range of component `f` is `[1, 10]`.
    /// The range of component `n` is `[1, 100]`.
    fn move_portfolio_funds_v2(f: u32, n: u32) -> Weight {
        // Minimum execution time: 516_367 nanoseconds.
        Weight::from_ref_time(12_450_313)
            // Standard Error: 3_211_571
            .saturating_add(Weight::from_ref_time(58_573_331).saturating_mul(f.into()))
            // Standard Error: 301_784
            .saturating_add(Weight::from_ref_time(18_164_947).saturating_mul(n.into()))
            .saturating_add(DbWeight::get().reads(4))
            .saturating_add(DbWeight::get().reads((4_u64).saturating_mul(f.into())))
            .saturating_add(DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(DbWeight::get().writes(1))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(f.into())))
            .saturating_add(DbWeight::get().writes((2_u64).saturating_mul(n.into())))
    }
}
