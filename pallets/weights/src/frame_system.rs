// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for frame_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-18, STEPS: `100`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 512
//! HOSTNAME: `dev-fsn001`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`

// Executed Command:
// ./target/release/polymesh
// benchmark
// pallet
// -s
// 100
// -r
// 5
// -p=frame_system
// -e=*
// --heap-pages
// 4096
// --db-cache
// 512
// --execution
// wasm
// --wasm-execution
// compiled
// --output
// ./pallets/weights/src/
// --template
// ./.maintain/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use polymesh_runtime_common::{RocksDbWeight as DbWeight, Weight};

/// Weights for frame_system using the Substrate node and recommended hardware.
pub struct SubstrateWeight;
impl frame_system::WeightInfo for SubstrateWeight {
    /// The range of component `b` is `[0, 7864320]`.
    fn remark(b: u32) -> Weight {
        // Minimum execution time: 4_799 nanoseconds.
        Weight::from_ref_time(3_782_975 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(219 as u64).saturating_mul(b as u64))
    }
    /// The range of component `b` is `[0, 7864320]`.
    fn remark_with_event(b: u32) -> Weight {
        // Minimum execution time: 16_020 nanoseconds.
        Weight::from_ref_time(16_641_000 as u64)
            // Standard Error: 1
            .saturating_add(Weight::from_ref_time(1_189 as u64).saturating_mul(b as u64))
    }
    // Storage: System Digest (r:1 w:1)
    // Storage: unknown [0x3a686561707061676573] (r:0 w:1)
    fn set_heap_pages() -> Weight {
        // Minimum execution time: 15_829 nanoseconds.
        Weight::from_ref_time(16_020_000 as u64)
            .saturating_add(DbWeight::get().reads(1 as u64))
            .saturating_add(DbWeight::get().writes(2 as u64))
    }
    // Storage: Skipped Metadata (r:0 w:0)
    /// The range of component `i` is `[0, 1000]`.
    fn set_storage(i: u32) -> Weight {
        // Minimum execution time: 7_974 nanoseconds.
        Weight::from_ref_time(7_995_000 as u64)
            // Standard Error: 1_116
            .saturating_add(Weight::from_ref_time(714_164 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
    }
    // Storage: Skipped Metadata (r:0 w:0)
    /// The range of component `i` is `[0, 1000]`.
    fn kill_storage(i: u32) -> Weight {
        // Minimum execution time: 5_210 nanoseconds.
        Weight::from_ref_time(5_320_000 as u64)
            // Standard Error: 1_136
            .saturating_add(Weight::from_ref_time(582_206 as u64).saturating_mul(i as u64))
            .saturating_add(DbWeight::get().writes((1 as u64).saturating_mul(i as u64)))
    }
    // Storage: Skipped Metadata (r:0 w:0)
    /// The range of component `p` is `[0, 1000]`.
    fn kill_prefix(p: u32) -> Weight {
        // Minimum execution time: 7_894 nanoseconds.
        Weight::from_ref_time(8_045_000 as u64)
            // Standard Error: 1_207
            .saturating_add(Weight::from_ref_time(1_127_154 as u64).saturating_mul(p as u64))
            .saturating_add(DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
}
